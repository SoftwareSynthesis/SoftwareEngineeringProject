/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['qunit/qunit.js']) {
  _$jscoverage['qunit/qunit.js'] = [];
  _$jscoverage['qunit/qunit.js'][11] = 0;
  _$jscoverage['qunit/qunit.js'][13] = 0;
  _$jscoverage['qunit/qunit.js'][26] = 0;
  _$jscoverage['qunit/qunit.js'][27] = 0;
  _$jscoverage['qunit/qunit.js'][28] = 0;
  _$jscoverage['qunit/qunit.js'][29] = 0;
  _$jscoverage['qunit/qunit.js'][30] = 0;
  _$jscoverage['qunit/qunit.js'][32] = 0;
  _$jscoverage['qunit/qunit.js'][47] = 0;
  _$jscoverage['qunit/qunit.js'][49] = 0;
  _$jscoverage['qunit/qunit.js'][50] = 0;
  _$jscoverage['qunit/qunit.js'][51] = 0;
  _$jscoverage['qunit/qunit.js'][52] = 0;
  _$jscoverage['qunit/qunit.js'][53] = 0;
  _$jscoverage['qunit/qunit.js'][54] = 0;
  _$jscoverage['qunit/qunit.js'][55] = 0;
  _$jscoverage['qunit/qunit.js'][56] = 0;
  _$jscoverage['qunit/qunit.js'][57] = 0;
  _$jscoverage['qunit/qunit.js'][59] = 0;
  _$jscoverage['qunit/qunit.js'][62] = 0;
  _$jscoverage['qunit/qunit.js'][75] = 0;
  _$jscoverage['qunit/qunit.js'][77] = 0;
  _$jscoverage['qunit/qunit.js'][78] = 0;
  _$jscoverage['qunit/qunit.js'][79] = 0;
  _$jscoverage['qunit/qunit.js'][80] = 0;
  _$jscoverage['qunit/qunit.js'][83] = 0;
  _$jscoverage['qunit/qunit.js'][86] = 0;
  _$jscoverage['qunit/qunit.js'][87] = 0;
  _$jscoverage['qunit/qunit.js'][88] = 0;
  _$jscoverage['qunit/qunit.js'][89] = 0;
  _$jscoverage['qunit/qunit.js'][92] = 0;
  _$jscoverage['qunit/qunit.js'][94] = 0;
  _$jscoverage['qunit/qunit.js'][96] = 0;
  _$jscoverage['qunit/qunit.js'][99] = 0;
  _$jscoverage['qunit/qunit.js'][100] = 0;
  _$jscoverage['qunit/qunit.js'][101] = 0;
  _$jscoverage['qunit/qunit.js'][104] = 0;
  _$jscoverage['qunit/qunit.js'][105] = 0;
  _$jscoverage['qunit/qunit.js'][106] = 0;
  _$jscoverage['qunit/qunit.js'][108] = 0;
  _$jscoverage['qunit/qunit.js'][109] = 0;
  _$jscoverage['qunit/qunit.js'][110] = 0;
  _$jscoverage['qunit/qunit.js'][111] = 0;
  _$jscoverage['qunit/qunit.js'][112] = 0;
  _$jscoverage['qunit/qunit.js'][114] = 0;
  _$jscoverage['qunit/qunit.js'][118] = 0;
  _$jscoverage['qunit/qunit.js'][119] = 0;
  _$jscoverage['qunit/qunit.js'][120] = 0;
  _$jscoverage['qunit/qunit.js'][127] = 0;
  _$jscoverage['qunit/qunit.js'][128] = 0;
  _$jscoverage['qunit/qunit.js'][129] = 0;
  _$jscoverage['qunit/qunit.js'][132] = 0;
  _$jscoverage['qunit/qunit.js'][133] = 0;
  _$jscoverage['qunit/qunit.js'][138] = 0;
  _$jscoverage['qunit/qunit.js'][140] = 0;
  _$jscoverage['qunit/qunit.js'][145] = 0;
  _$jscoverage['qunit/qunit.js'][146] = 0;
  _$jscoverage['qunit/qunit.js'][153] = 0;
  _$jscoverage['qunit/qunit.js'][155] = 0;
  _$jscoverage['qunit/qunit.js'][156] = 0;
  _$jscoverage['qunit/qunit.js'][158] = 0;
  _$jscoverage['qunit/qunit.js'][159] = 0;
  _$jscoverage['qunit/qunit.js'][160] = 0;
  _$jscoverage['qunit/qunit.js'][162] = 0;
  _$jscoverage['qunit/qunit.js'][163] = 0;
  _$jscoverage['qunit/qunit.js'][165] = 0;
  _$jscoverage['qunit/qunit.js'][169] = 0;
  _$jscoverage['qunit/qunit.js'][171] = 0;
  _$jscoverage['qunit/qunit.js'][173] = 0;
  _$jscoverage['qunit/qunit.js'][174] = 0;
  _$jscoverage['qunit/qunit.js'][177] = 0;
  _$jscoverage['qunit/qunit.js'][178] = 0;
  _$jscoverage['qunit/qunit.js'][181] = 0;
  _$jscoverage['qunit/qunit.js'][183] = 0;
  _$jscoverage['qunit/qunit.js'][184] = 0;
  _$jscoverage['qunit/qunit.js'][185] = 0;
  _$jscoverage['qunit/qunit.js'][186] = 0;
  _$jscoverage['qunit/qunit.js'][189] = 0;
  _$jscoverage['qunit/qunit.js'][190] = 0;
  _$jscoverage['qunit/qunit.js'][191] = 0;
  _$jscoverage['qunit/qunit.js'][193] = 0;
  _$jscoverage['qunit/qunit.js'][195] = 0;
  _$jscoverage['qunit/qunit.js'][197] = 0;
  _$jscoverage['qunit/qunit.js'][200] = 0;
  _$jscoverage['qunit/qunit.js'][201] = 0;
  _$jscoverage['qunit/qunit.js'][206] = 0;
  _$jscoverage['qunit/qunit.js'][207] = 0;
  _$jscoverage['qunit/qunit.js'][208] = 0;
  _$jscoverage['qunit/qunit.js'][209] = 0;
  _$jscoverage['qunit/qunit.js'][211] = 0;
  _$jscoverage['qunit/qunit.js'][212] = 0;
  _$jscoverage['qunit/qunit.js'][214] = 0;
  _$jscoverage['qunit/qunit.js'][215] = 0;
  _$jscoverage['qunit/qunit.js'][217] = 0;
  _$jscoverage['qunit/qunit.js'][220] = 0;
  _$jscoverage['qunit/qunit.js'][223] = 0;
  _$jscoverage['qunit/qunit.js'][224] = 0;
  _$jscoverage['qunit/qunit.js'][225] = 0;
  _$jscoverage['qunit/qunit.js'][226] = 0;
  _$jscoverage['qunit/qunit.js'][227] = 0;
  _$jscoverage['qunit/qunit.js'][228] = 0;
  _$jscoverage['qunit/qunit.js'][229] = 0;
  _$jscoverage['qunit/qunit.js'][232] = 0;
  _$jscoverage['qunit/qunit.js'][238] = 0;
  _$jscoverage['qunit/qunit.js'][239] = 0;
  _$jscoverage['qunit/qunit.js'][240] = 0;
  _$jscoverage['qunit/qunit.js'][242] = 0;
  _$jscoverage['qunit/qunit.js'][243] = 0;
  _$jscoverage['qunit/qunit.js'][244] = 0;
  _$jscoverage['qunit/qunit.js'][246] = 0;
  _$jscoverage['qunit/qunit.js'][247] = 0;
  _$jscoverage['qunit/qunit.js'][249] = 0;
  _$jscoverage['qunit/qunit.js'][250] = 0;
  _$jscoverage['qunit/qunit.js'][251] = 0;
  _$jscoverage['qunit/qunit.js'][252] = 0;
  _$jscoverage['qunit/qunit.js'][254] = 0;
  _$jscoverage['qunit/qunit.js'][255] = 0;
  _$jscoverage['qunit/qunit.js'][257] = 0;
  _$jscoverage['qunit/qunit.js'][258] = 0;
  _$jscoverage['qunit/qunit.js'][259] = 0;
  _$jscoverage['qunit/qunit.js'][264] = 0;
  _$jscoverage['qunit/qunit.js'][265] = 0;
  _$jscoverage['qunit/qunit.js'][266] = 0;
  _$jscoverage['qunit/qunit.js'][268] = 0;
  _$jscoverage['qunit/qunit.js'][272] = 0;
  _$jscoverage['qunit/qunit.js'][273] = 0;
  _$jscoverage['qunit/qunit.js'][277] = 0;
  _$jscoverage['qunit/qunit.js'][278] = 0;
  _$jscoverage['qunit/qunit.js'][280] = 0;
  _$jscoverage['qunit/qunit.js'][281] = 0;
  _$jscoverage['qunit/qunit.js'][283] = 0;
  _$jscoverage['qunit/qunit.js'][286] = 0;
  _$jscoverage['qunit/qunit.js'][287] = 0;
  _$jscoverage['qunit/qunit.js'][288] = 0;
  _$jscoverage['qunit/qunit.js'][289] = 0;
  _$jscoverage['qunit/qunit.js'][291] = 0;
  _$jscoverage['qunit/qunit.js'][292] = 0;
  _$jscoverage['qunit/qunit.js'][297] = 0;
  _$jscoverage['qunit/qunit.js'][298] = 0;
  _$jscoverage['qunit/qunit.js'][299] = 0;
  _$jscoverage['qunit/qunit.js'][302] = 0;
  _$jscoverage['qunit/qunit.js'][303] = 0;
  _$jscoverage['qunit/qunit.js'][304] = 0;
  _$jscoverage['qunit/qunit.js'][305] = 0;
  _$jscoverage['qunit/qunit.js'][306] = 0;
  _$jscoverage['qunit/qunit.js'][307] = 0;
  _$jscoverage['qunit/qunit.js'][308] = 0;
  _$jscoverage['qunit/qunit.js'][309] = 0;
  _$jscoverage['qunit/qunit.js'][312] = 0;
  _$jscoverage['qunit/qunit.js'][313] = 0;
  _$jscoverage['qunit/qunit.js'][314] = 0;
  _$jscoverage['qunit/qunit.js'][315] = 0;
  _$jscoverage['qunit/qunit.js'][316] = 0;
  _$jscoverage['qunit/qunit.js'][321] = 0;
  _$jscoverage['qunit/qunit.js'][330] = 0;
  _$jscoverage['qunit/qunit.js'][332] = 0;
  _$jscoverage['qunit/qunit.js'][336] = 0;
  _$jscoverage['qunit/qunit.js'][339] = 0;
  _$jscoverage['qunit/qunit.js'][340] = 0;
  _$jscoverage['qunit/qunit.js'][342] = 0;
  _$jscoverage['qunit/qunit.js'][344] = 0;
  _$jscoverage['qunit/qunit.js'][345] = 0;
  _$jscoverage['qunit/qunit.js'][347] = 0;
  _$jscoverage['qunit/qunit.js'][348] = 0;
  _$jscoverage['qunit/qunit.js'][350] = 0;
  _$jscoverage['qunit/qunit.js'][351] = 0;
  _$jscoverage['qunit/qunit.js'][353] = 0;
  _$jscoverage['qunit/qunit.js'][354] = 0;
  _$jscoverage['qunit/qunit.js'][360] = 0;
  _$jscoverage['qunit/qunit.js'][363] = 0;
  _$jscoverage['qunit/qunit.js'][364] = 0;
  _$jscoverage['qunit/qunit.js'][366] = 0;
  _$jscoverage['qunit/qunit.js'][373] = 0;
  _$jscoverage['qunit/qunit.js'][377] = 0;
  _$jscoverage['qunit/qunit.js'][378] = 0;
  _$jscoverage['qunit/qunit.js'][379] = 0;
  _$jscoverage['qunit/qunit.js'][383] = 0;
  _$jscoverage['qunit/qunit.js'][384] = 0;
  _$jscoverage['qunit/qunit.js'][385] = 0;
  _$jscoverage['qunit/qunit.js'][388] = 0;
  _$jscoverage['qunit/qunit.js'][392] = 0;
  _$jscoverage['qunit/qunit.js'][395] = 0;
  _$jscoverage['qunit/qunit.js'][396] = 0;
  _$jscoverage['qunit/qunit.js'][397] = 0;
  _$jscoverage['qunit/qunit.js'][400] = 0;
  _$jscoverage['qunit/qunit.js'][401] = 0;
  _$jscoverage['qunit/qunit.js'][404] = 0;
  _$jscoverage['qunit/qunit.js'][415] = 0;
  _$jscoverage['qunit/qunit.js'][416] = 0;
  _$jscoverage['qunit/qunit.js'][419] = 0;
  _$jscoverage['qunit/qunit.js'][424] = 0;
  _$jscoverage['qunit/qunit.js'][425] = 0;
  _$jscoverage['qunit/qunit.js'][427] = 0;
  _$jscoverage['qunit/qunit.js'][434] = 0;
  _$jscoverage['qunit/qunit.js'][435] = 0;
  _$jscoverage['qunit/qunit.js'][437] = 0;
  _$jscoverage['qunit/qunit.js'][438] = 0;
  _$jscoverage['qunit/qunit.js'][441] = 0;
  _$jscoverage['qunit/qunit.js'][444] = 0;
  _$jscoverage['qunit/qunit.js'][446] = 0;
  _$jscoverage['qunit/qunit.js'][447] = 0;
  _$jscoverage['qunit/qunit.js'][450] = 0;
  _$jscoverage['qunit/qunit.js'][451] = 0;
  _$jscoverage['qunit/qunit.js'][452] = 0;
  _$jscoverage['qunit/qunit.js'][453] = 0;
  _$jscoverage['qunit/qunit.js'][456] = 0;
  _$jscoverage['qunit/qunit.js'][457] = 0;
  _$jscoverage['qunit/qunit.js'][458] = 0;
  _$jscoverage['qunit/qunit.js'][459] = 0;
  _$jscoverage['qunit/qunit.js'][461] = 0;
  _$jscoverage['qunit/qunit.js'][462] = 0;
  _$jscoverage['qunit/qunit.js'][465] = 0;
  _$jscoverage['qunit/qunit.js'][466] = 0;
  _$jscoverage['qunit/qunit.js'][469] = 0;
  _$jscoverage['qunit/qunit.js'][470] = 0;
  _$jscoverage['qunit/qunit.js'][475] = 0;
  _$jscoverage['qunit/qunit.js'][476] = 0;
  _$jscoverage['qunit/qunit.js'][478] = 0;
  _$jscoverage['qunit/qunit.js'][479] = 0;
  _$jscoverage['qunit/qunit.js'][480] = 0;
  _$jscoverage['qunit/qunit.js'][481] = 0;
  _$jscoverage['qunit/qunit.js'][482] = 0;
  _$jscoverage['qunit/qunit.js'][483] = 0;
  _$jscoverage['qunit/qunit.js'][496] = 0;
  _$jscoverage['qunit/qunit.js'][504] = 0;
  _$jscoverage['qunit/qunit.js'][505] = 0;
  _$jscoverage['qunit/qunit.js'][507] = 0;
  _$jscoverage['qunit/qunit.js'][509] = 0;
  _$jscoverage['qunit/qunit.js'][517] = 0;
  _$jscoverage['qunit/qunit.js'][518] = 0;
  _$jscoverage['qunit/qunit.js'][520] = 0;
  _$jscoverage['qunit/qunit.js'][521] = 0;
  _$jscoverage['qunit/qunit.js'][522] = 0;
  _$jscoverage['qunit/qunit.js'][523] = 0;
  _$jscoverage['qunit/qunit.js'][524] = 0;
  _$jscoverage['qunit/qunit.js'][527] = 0;
  _$jscoverage['qunit/qunit.js'][528] = 0;
  _$jscoverage['qunit/qunit.js'][543] = 0;
  _$jscoverage['qunit/qunit.js'][552] = 0;
  _$jscoverage['qunit/qunit.js'][560] = 0;
  _$jscoverage['qunit/qunit.js'][561] = 0;
  _$jscoverage['qunit/qunit.js'][562] = 0;
  _$jscoverage['qunit/qunit.js'][570] = 0;
  _$jscoverage['qunit/qunit.js'][571] = 0;
  _$jscoverage['qunit/qunit.js'][572] = 0;
  _$jscoverage['qunit/qunit.js'][580] = 0;
  _$jscoverage['qunit/qunit.js'][588] = 0;
  _$jscoverage['qunit/qunit.js'][596] = 0;
  _$jscoverage['qunit/qunit.js'][604] = 0;
  _$jscoverage['qunit/qunit.js'][608] = 0;
  _$jscoverage['qunit/qunit.js'][613] = 0;
  _$jscoverage['qunit/qunit.js'][614] = 0;
  _$jscoverage['qunit/qunit.js'][615] = 0;
  _$jscoverage['qunit/qunit.js'][618] = 0;
  _$jscoverage['qunit/qunit.js'][619] = 0;
  _$jscoverage['qunit/qunit.js'][620] = 0;
  _$jscoverage['qunit/qunit.js'][622] = 0;
  _$jscoverage['qunit/qunit.js'][624] = 0;
  _$jscoverage['qunit/qunit.js'][626] = 0;
  _$jscoverage['qunit/qunit.js'][628] = 0;
  _$jscoverage['qunit/qunit.js'][629] = 0;
  _$jscoverage['qunit/qunit.js'][630] = 0;
  _$jscoverage['qunit/qunit.js'][632] = 0;
  _$jscoverage['qunit/qunit.js'][633] = 0;
  _$jscoverage['qunit/qunit.js'][635] = 0;
  _$jscoverage['qunit/qunit.js'][636] = 0;
  _$jscoverage['qunit/qunit.js'][638] = 0;
  _$jscoverage['qunit/qunit.js'][639] = 0;
  _$jscoverage['qunit/qunit.js'][640] = 0;
  _$jscoverage['qunit/qunit.js'][643] = 0;
  _$jscoverage['qunit/qunit.js'][645] = 0;
  _$jscoverage['qunit/qunit.js'][654] = 0;
  _$jscoverage['qunit/qunit.js'][661] = 0;
  _$jscoverage['qunit/qunit.js'][667] = 0;
  _$jscoverage['qunit/qunit.js'][668] = 0;
  _$jscoverage['qunit/qunit.js'][670] = 0;
  _$jscoverage['qunit/qunit.js'][671] = 0;
  _$jscoverage['qunit/qunit.js'][675] = 0;
  _$jscoverage['qunit/qunit.js'][676] = 0;
  _$jscoverage['qunit/qunit.js'][677] = 0;
  _$jscoverage['qunit/qunit.js'][678] = 0;
  _$jscoverage['qunit/qunit.js'][680] = 0;
  _$jscoverage['qunit/qunit.js'][688] = 0;
  _$jscoverage['qunit/qunit.js'][739] = 0;
  _$jscoverage['qunit/qunit.js'][740] = 0;
  _$jscoverage['qunit/qunit.js'][743] = 0;
  _$jscoverage['qunit/qunit.js'][747] = 0;
  _$jscoverage['qunit/qunit.js'][748] = 0;
  _$jscoverage['qunit/qunit.js'][755] = 0;
  _$jscoverage['qunit/qunit.js'][756] = 0;
  _$jscoverage['qunit/qunit.js'][757] = 0;
  _$jscoverage['qunit/qunit.js'][758] = 0;
  _$jscoverage['qunit/qunit.js'][760] = 0;
  _$jscoverage['qunit/qunit.js'][761] = 0;
  _$jscoverage['qunit/qunit.js'][765] = 0;
  _$jscoverage['qunit/qunit.js'][768] = 0;
  _$jscoverage['qunit/qunit.js'][771] = 0;
  _$jscoverage['qunit/qunit.js'][773] = 0;
  _$jscoverage['qunit/qunit.js'][776] = 0;
  _$jscoverage['qunit/qunit.js'][781] = 0;
  _$jscoverage['qunit/qunit.js'][788] = 0;
  _$jscoverage['qunit/qunit.js'][801] = 0;
  _$jscoverage['qunit/qunit.js'][804] = 0;
  _$jscoverage['qunit/qunit.js'][805] = 0;
  _$jscoverage['qunit/qunit.js'][813] = 0;
  _$jscoverage['qunit/qunit.js'][814] = 0;
  _$jscoverage['qunit/qunit.js'][815] = 0;
  _$jscoverage['qunit/qunit.js'][817] = 0;
  _$jscoverage['qunit/qunit.js'][818] = 0;
  _$jscoverage['qunit/qunit.js'][821] = 0;
  _$jscoverage['qunit/qunit.js'][822] = 0;
  _$jscoverage['qunit/qunit.js'][825] = 0;
  _$jscoverage['qunit/qunit.js'][826] = 0;
  _$jscoverage['qunit/qunit.js'][829] = 0;
  _$jscoverage['qunit/qunit.js'][830] = 0;
  _$jscoverage['qunit/qunit.js'][831] = 0;
  _$jscoverage['qunit/qunit.js'][832] = 0;
  _$jscoverage['qunit/qunit.js'][833] = 0;
  _$jscoverage['qunit/qunit.js'][834] = 0;
  _$jscoverage['qunit/qunit.js'][840] = 0;
  _$jscoverage['qunit/qunit.js'][841] = 0;
  _$jscoverage['qunit/qunit.js'][842] = 0;
  _$jscoverage['qunit/qunit.js'][849] = 0;
  _$jscoverage['qunit/qunit.js'][850] = 0;
  _$jscoverage['qunit/qunit.js'][851] = 0;
  _$jscoverage['qunit/qunit.js'][854] = 0;
  _$jscoverage['qunit/qunit.js'][855] = 0;
  _$jscoverage['qunit/qunit.js'][856] = 0;
  _$jscoverage['qunit/qunit.js'][862] = 0;
  _$jscoverage['qunit/qunit.js'][866] = 0;
  _$jscoverage['qunit/qunit.js'][867] = 0;
  _$jscoverage['qunit/qunit.js'][870] = 0;
  _$jscoverage['qunit/qunit.js'][871] = 0;
  _$jscoverage['qunit/qunit.js'][874] = 0;
  _$jscoverage['qunit/qunit.js'][877] = 0;
  _$jscoverage['qunit/qunit.js'][879] = 0;
  _$jscoverage['qunit/qunit.js'][880] = 0;
  _$jscoverage['qunit/qunit.js'][882] = 0;
  _$jscoverage['qunit/qunit.js'][889] = 0;
  _$jscoverage['qunit/qunit.js'][891] = 0;
  _$jscoverage['qunit/qunit.js'][892] = 0;
  _$jscoverage['qunit/qunit.js'][894] = 0;
  _$jscoverage['qunit/qunit.js'][898] = 0;
  _$jscoverage['qunit/qunit.js'][899] = 0;
  _$jscoverage['qunit/qunit.js'][902] = 0;
  _$jscoverage['qunit/qunit.js'][912] = 0;
  _$jscoverage['qunit/qunit.js'][913] = 0;
  _$jscoverage['qunit/qunit.js'][914] = 0;
  _$jscoverage['qunit/qunit.js'][916] = 0;
  _$jscoverage['qunit/qunit.js'][917] = 0;
  _$jscoverage['qunit/qunit.js'][918] = 0;
  _$jscoverage['qunit/qunit.js'][919] = 0;
  _$jscoverage['qunit/qunit.js'][921] = 0;
  _$jscoverage['qunit/qunit.js'][922] = 0;
  _$jscoverage['qunit/qunit.js'][923] = 0;
  _$jscoverage['qunit/qunit.js'][926] = 0;
  _$jscoverage['qunit/qunit.js'][928] = 0;
  _$jscoverage['qunit/qunit.js'][929] = 0;
  _$jscoverage['qunit/qunit.js'][930] = 0;
  _$jscoverage['qunit/qunit.js'][933] = 0;
  _$jscoverage['qunit/qunit.js'][936] = 0;
  _$jscoverage['qunit/qunit.js'][938] = 0;
  _$jscoverage['qunit/qunit.js'][945] = 0;
  _$jscoverage['qunit/qunit.js'][946] = 0;
  _$jscoverage['qunit/qunit.js'][949] = 0;
  _$jscoverage['qunit/qunit.js'][957] = 0;
  _$jscoverage['qunit/qunit.js'][958] = 0;
  _$jscoverage['qunit/qunit.js'][959] = 0;
  _$jscoverage['qunit/qunit.js'][961] = 0;
  _$jscoverage['qunit/qunit.js'][963] = 0;
  _$jscoverage['qunit/qunit.js'][964] = 0;
  _$jscoverage['qunit/qunit.js'][967] = 0;
  _$jscoverage['qunit/qunit.js'][968] = 0;
  _$jscoverage['qunit/qunit.js'][969] = 0;
  _$jscoverage['qunit/qunit.js'][972] = 0;
  _$jscoverage['qunit/qunit.js'][974] = 0;
  _$jscoverage['qunit/qunit.js'][976] = 0;
  _$jscoverage['qunit/qunit.js'][983] = 0;
  _$jscoverage['qunit/qunit.js'][984] = 0;
  _$jscoverage['qunit/qunit.js'][987] = 0;
  _$jscoverage['qunit/qunit.js'][988] = 0;
  _$jscoverage['qunit/qunit.js'][989] = 0;
  _$jscoverage['qunit/qunit.js'][991] = 0;
  _$jscoverage['qunit/qunit.js'][994] = 0;
  _$jscoverage['qunit/qunit.js'][1014] = 0;
  _$jscoverage['qunit/qunit.js'][1039] = 0;
  _$jscoverage['qunit/qunit.js'][1040] = 0;
  _$jscoverage['qunit/qunit.js'][1043] = 0;
  _$jscoverage['qunit/qunit.js'][1044] = 0;
  _$jscoverage['qunit/qunit.js'][1047] = 0;
  _$jscoverage['qunit/qunit.js'][1055] = 0;
  _$jscoverage['qunit/qunit.js'][1056] = 0;
  _$jscoverage['qunit/qunit.js'][1058] = 0;
  _$jscoverage['qunit/qunit.js'][1060] = 0;
  _$jscoverage['qunit/qunit.js'][1062] = 0;
  _$jscoverage['qunit/qunit.js'][1063] = 0;
  _$jscoverage['qunit/qunit.js'][1064] = 0;
  _$jscoverage['qunit/qunit.js'][1065] = 0;
  _$jscoverage['qunit/qunit.js'][1071] = 0;
  _$jscoverage['qunit/qunit.js'][1072] = 0;
  _$jscoverage['qunit/qunit.js'][1079] = 0;
  _$jscoverage['qunit/qunit.js'][1080] = 0;
  _$jscoverage['qunit/qunit.js'][1081] = 0;
  _$jscoverage['qunit/qunit.js'][1084] = 0;
  _$jscoverage['qunit/qunit.js'][1085] = 0;
  _$jscoverage['qunit/qunit.js'][1086] = 0;
  _$jscoverage['qunit/qunit.js'][1088] = 0;
  _$jscoverage['qunit/qunit.js'][1093] = 0;
  _$jscoverage['qunit/qunit.js'][1094] = 0;
  _$jscoverage['qunit/qunit.js'][1098] = 0;
  _$jscoverage['qunit/qunit.js'][1101] = 0;
  _$jscoverage['qunit/qunit.js'][1102] = 0;
  _$jscoverage['qunit/qunit.js'][1103] = 0;
  _$jscoverage['qunit/qunit.js'][1107] = 0;
  _$jscoverage['qunit/qunit.js'][1108] = 0;
  _$jscoverage['qunit/qunit.js'][1109] = 0;
  _$jscoverage['qunit/qunit.js'][1113] = 0;
  _$jscoverage['qunit/qunit.js'][1114] = 0;
  _$jscoverage['qunit/qunit.js'][1116] = 0;
  _$jscoverage['qunit/qunit.js'][1117] = 0;
  _$jscoverage['qunit/qunit.js'][1118] = 0;
  _$jscoverage['qunit/qunit.js'][1120] = 0;
  _$jscoverage['qunit/qunit.js'][1121] = 0;
  _$jscoverage['qunit/qunit.js'][1124] = 0;
  _$jscoverage['qunit/qunit.js'][1125] = 0;
  _$jscoverage['qunit/qunit.js'][1127] = 0;
  _$jscoverage['qunit/qunit.js'][1128] = 0;
  _$jscoverage['qunit/qunit.js'][1130] = 0;
  _$jscoverage['qunit/qunit.js'][1131] = 0;
  _$jscoverage['qunit/qunit.js'][1132] = 0;
  _$jscoverage['qunit/qunit.js'][1134] = 0;
  _$jscoverage['qunit/qunit.js'][1139] = 0;
  _$jscoverage['qunit/qunit.js'][1140] = 0;
  _$jscoverage['qunit/qunit.js'][1142] = 0;
  _$jscoverage['qunit/qunit.js'][1143] = 0;
  _$jscoverage['qunit/qunit.js'][1145] = 0;
  _$jscoverage['qunit/qunit.js'][1148] = 0;
  _$jscoverage['qunit/qunit.js'][1149] = 0;
  _$jscoverage['qunit/qunit.js'][1150] = 0;
  _$jscoverage['qunit/qunit.js'][1151] = 0;
  _$jscoverage['qunit/qunit.js'][1152] = 0;
  _$jscoverage['qunit/qunit.js'][1154] = 0;
  _$jscoverage['qunit/qunit.js'][1155] = 0;
  _$jscoverage['qunit/qunit.js'][1156] = 0;
  _$jscoverage['qunit/qunit.js'][1161] = 0;
  _$jscoverage['qunit/qunit.js'][1162] = 0;
  _$jscoverage['qunit/qunit.js'][1164] = 0;
  _$jscoverage['qunit/qunit.js'][1165] = 0;
  _$jscoverage['qunit/qunit.js'][1167] = 0;
  _$jscoverage['qunit/qunit.js'][1169] = 0;
  _$jscoverage['qunit/qunit.js'][1170] = 0;
  _$jscoverage['qunit/qunit.js'][1171] = 0;
  _$jscoverage['qunit/qunit.js'][1172] = 0;
  _$jscoverage['qunit/qunit.js'][1173] = 0;
  _$jscoverage['qunit/qunit.js'][1174] = 0;
  _$jscoverage['qunit/qunit.js'][1177] = 0;
  _$jscoverage['qunit/qunit.js'][1179] = 0;
  _$jscoverage['qunit/qunit.js'][1184] = 0;
  _$jscoverage['qunit/qunit.js'][1185] = 0;
  _$jscoverage['qunit/qunit.js'][1186] = 0;
  _$jscoverage['qunit/qunit.js'][1189] = 0;
  _$jscoverage['qunit/qunit.js'][1190] = 0;
  _$jscoverage['qunit/qunit.js'][1194] = 0;
  _$jscoverage['qunit/qunit.js'][1198] = 0;
  _$jscoverage['qunit/qunit.js'][1203] = 0;
  _$jscoverage['qunit/qunit.js'][1204] = 0;
  _$jscoverage['qunit/qunit.js'][1205] = 0;
  _$jscoverage['qunit/qunit.js'][1206] = 0;
  _$jscoverage['qunit/qunit.js'][1211] = 0;
  _$jscoverage['qunit/qunit.js'][1212] = 0;
  _$jscoverage['qunit/qunit.js'][1213] = 0;
  _$jscoverage['qunit/qunit.js'][1214] = 0;
  _$jscoverage['qunit/qunit.js'][1216] = 0;
  _$jscoverage['qunit/qunit.js'][1218] = 0;
  _$jscoverage['qunit/qunit.js'][1219] = 0;
  _$jscoverage['qunit/qunit.js'][1222] = 0;
  _$jscoverage['qunit/qunit.js'][1225] = 0;
  _$jscoverage['qunit/qunit.js'][1228] = 0;
  _$jscoverage['qunit/qunit.js'][1229] = 0;
  _$jscoverage['qunit/qunit.js'][1232] = 0;
  _$jscoverage['qunit/qunit.js'][1233] = 0;
  _$jscoverage['qunit/qunit.js'][1241] = 0;
  _$jscoverage['qunit/qunit.js'][1259] = 0;
  _$jscoverage['qunit/qunit.js'][1260] = 0;
  _$jscoverage['qunit/qunit.js'][1263] = 0;
  _$jscoverage['qunit/qunit.js'][1264] = 0;
  _$jscoverage['qunit/qunit.js'][1267] = 0;
  _$jscoverage['qunit/qunit.js'][1270] = 0;
  _$jscoverage['qunit/qunit.js'][1277] = 0;
  _$jscoverage['qunit/qunit.js'][1279] = 0;
  _$jscoverage['qunit/qunit.js'][1280] = 0;
  _$jscoverage['qunit/qunit.js'][1281] = 0;
  _$jscoverage['qunit/qunit.js'][1282] = 0;
  _$jscoverage['qunit/qunit.js'][1288] = 0;
  _$jscoverage['qunit/qunit.js'][1289] = 0;
  _$jscoverage['qunit/qunit.js'][1292] = 0;
  _$jscoverage['qunit/qunit.js'][1301] = 0;
  _$jscoverage['qunit/qunit.js'][1302] = 0;
  _$jscoverage['qunit/qunit.js'][1308] = 0;
  _$jscoverage['qunit/qunit.js'][1309] = 0;
  _$jscoverage['qunit/qunit.js'][1310] = 0;
  _$jscoverage['qunit/qunit.js'][1313] = 0;
  _$jscoverage['qunit/qunit.js'][1314] = 0;
  _$jscoverage['qunit/qunit.js'][1317] = 0;
  _$jscoverage['qunit/qunit.js'][1318] = 0;
  _$jscoverage['qunit/qunit.js'][1321] = 0;
  _$jscoverage['qunit/qunit.js'][1322] = 0;
  _$jscoverage['qunit/qunit.js'][1325] = 0;
  _$jscoverage['qunit/qunit.js'][1326] = 0;
  _$jscoverage['qunit/qunit.js'][1327] = 0;
  _$jscoverage['qunit/qunit.js'][1331] = 0;
  _$jscoverage['qunit/qunit.js'][1332] = 0;
  _$jscoverage['qunit/qunit.js'][1336] = 0;
  _$jscoverage['qunit/qunit.js'][1342] = 0;
  _$jscoverage['qunit/qunit.js'][1343] = 0;
  _$jscoverage['qunit/qunit.js'][1345] = 0;
  _$jscoverage['qunit/qunit.js'][1347] = 0;
  _$jscoverage['qunit/qunit.js'][1349] = 0;
  _$jscoverage['qunit/qunit.js'][1350] = 0;
  _$jscoverage['qunit/qunit.js'][1352] = 0;
  _$jscoverage['qunit/qunit.js'][1353] = 0;
  _$jscoverage['qunit/qunit.js'][1354] = 0;
  _$jscoverage['qunit/qunit.js'][1356] = 0;
  _$jscoverage['qunit/qunit.js'][1357] = 0;
  _$jscoverage['qunit/qunit.js'][1358] = 0;
  _$jscoverage['qunit/qunit.js'][1359] = 0;
  _$jscoverage['qunit/qunit.js'][1360] = 0;
  _$jscoverage['qunit/qunit.js'][1362] = 0;
  _$jscoverage['qunit/qunit.js'][1364] = 0;
  _$jscoverage['qunit/qunit.js'][1365] = 0;
  _$jscoverage['qunit/qunit.js'][1368] = 0;
  _$jscoverage['qunit/qunit.js'][1369] = 0;
  _$jscoverage['qunit/qunit.js'][1373] = 0;
  _$jscoverage['qunit/qunit.js'][1374] = 0;
  _$jscoverage['qunit/qunit.js'][1377] = 0;
  _$jscoverage['qunit/qunit.js'][1380] = 0;
  _$jscoverage['qunit/qunit.js'][1381] = 0;
  _$jscoverage['qunit/qunit.js'][1382] = 0;
  _$jscoverage['qunit/qunit.js'][1384] = 0;
  _$jscoverage['qunit/qunit.js'][1391] = 0;
  _$jscoverage['qunit/qunit.js'][1392] = 0;
  _$jscoverage['qunit/qunit.js'][1393] = 0;
  _$jscoverage['qunit/qunit.js'][1395] = 0;
  _$jscoverage['qunit/qunit.js'][1397] = 0;
  _$jscoverage['qunit/qunit.js'][1398] = 0;
  _$jscoverage['qunit/qunit.js'][1400] = 0;
  _$jscoverage['qunit/qunit.js'][1402] = 0;
  _$jscoverage['qunit/qunit.js'][1404] = 0;
  _$jscoverage['qunit/qunit.js'][1406] = 0;
  _$jscoverage['qunit/qunit.js'][1408] = 0;
  _$jscoverage['qunit/qunit.js'][1413] = 0;
  _$jscoverage['qunit/qunit.js'][1414] = 0;
  _$jscoverage['qunit/qunit.js'][1416] = 0;
  _$jscoverage['qunit/qunit.js'][1417] = 0;
  _$jscoverage['qunit/qunit.js'][1421] = 0;
  _$jscoverage['qunit/qunit.js'][1422] = 0;
  _$jscoverage['qunit/qunit.js'][1423] = 0;
  _$jscoverage['qunit/qunit.js'][1425] = 0;
  _$jscoverage['qunit/qunit.js'][1426] = 0;
  _$jscoverage['qunit/qunit.js'][1428] = 0;
  _$jscoverage['qunit/qunit.js'][1429] = 0;
  _$jscoverage['qunit/qunit.js'][1430] = 0;
  _$jscoverage['qunit/qunit.js'][1432] = 0;
  _$jscoverage['qunit/qunit.js'][1433] = 0;
  _$jscoverage['qunit/qunit.js'][1436] = 0;
  _$jscoverage['qunit/qunit.js'][1437] = 0;
  _$jscoverage['qunit/qunit.js'][1438] = 0;
  _$jscoverage['qunit/qunit.js'][1442] = 0;
  _$jscoverage['qunit/qunit.js'][1443] = 0;
  _$jscoverage['qunit/qunit.js'][1445] = 0;
  _$jscoverage['qunit/qunit.js'][1446] = 0;
  _$jscoverage['qunit/qunit.js'][1448] = 0;
  _$jscoverage['qunit/qunit.js'][1449] = 0;
  _$jscoverage['qunit/qunit.js'][1451] = 0;
  _$jscoverage['qunit/qunit.js'][1456] = 0;
  _$jscoverage['qunit/qunit.js'][1457] = 0;
  _$jscoverage['qunit/qunit.js'][1461] = 0;
  _$jscoverage['qunit/qunit.js'][1463] = 0;
  _$jscoverage['qunit/qunit.js'][1464] = 0;
  _$jscoverage['qunit/qunit.js'][1465] = 0;
  _$jscoverage['qunit/qunit.js'][1468] = 0;
  _$jscoverage['qunit/qunit.js'][1469] = 0;
  _$jscoverage['qunit/qunit.js'][1470] = 0;
  _$jscoverage['qunit/qunit.js'][1475] = 0;
  _$jscoverage['qunit/qunit.js'][1476] = 0;
  _$jscoverage['qunit/qunit.js'][1479] = 0;
  _$jscoverage['qunit/qunit.js'][1480] = 0;
  _$jscoverage['qunit/qunit.js'][1481] = 0;
  _$jscoverage['qunit/qunit.js'][1482] = 0;
  _$jscoverage['qunit/qunit.js'][1483] = 0;
  _$jscoverage['qunit/qunit.js'][1484] = 0;
  _$jscoverage['qunit/qunit.js'][1488] = 0;
  _$jscoverage['qunit/qunit.js'][1491] = 0;
  _$jscoverage['qunit/qunit.js'][1492] = 0;
  _$jscoverage['qunit/qunit.js'][1493] = 0;
  _$jscoverage['qunit/qunit.js'][1494] = 0;
  _$jscoverage['qunit/qunit.js'][1497] = 0;
  _$jscoverage['qunit/qunit.js'][1498] = 0;
  _$jscoverage['qunit/qunit.js'][1502] = 0;
  _$jscoverage['qunit/qunit.js'][1510] = 0;
  _$jscoverage['qunit/qunit.js'][1512] = 0;
  _$jscoverage['qunit/qunit.js'][1513] = 0;
  _$jscoverage['qunit/qunit.js'][1516] = 0;
  _$jscoverage['qunit/qunit.js'][1525] = 0;
  _$jscoverage['qunit/qunit.js'][1526] = 0;
  _$jscoverage['qunit/qunit.js'][1527] = 0;
  _$jscoverage['qunit/qunit.js'][1528] = 0;
  _$jscoverage['qunit/qunit.js'][1532] = 0;
  _$jscoverage['qunit/qunit.js'][1533] = 0;
  _$jscoverage['qunit/qunit.js'][1536] = 0;
  _$jscoverage['qunit/qunit.js'][1537] = 0;
  _$jscoverage['qunit/qunit.js'][1538] = 0;
  _$jscoverage['qunit/qunit.js'][1542] = 0;
  _$jscoverage['qunit/qunit.js'][1543] = 0;
  _$jscoverage['qunit/qunit.js'][1545] = 0;
  _$jscoverage['qunit/qunit.js'][1546] = 0;
  _$jscoverage['qunit/qunit.js'][1549] = 0;
  _$jscoverage['qunit/qunit.js'][1552] = 0;
  _$jscoverage['qunit/qunit.js'][1553] = 0;
  _$jscoverage['qunit/qunit.js'][1557] = 0;
  _$jscoverage['qunit/qunit.js'][1558] = 0;
  _$jscoverage['qunit/qunit.js'][1559] = 0;
  _$jscoverage['qunit/qunit.js'][1564] = 0;
  _$jscoverage['qunit/qunit.js'][1565] = 0;
  _$jscoverage['qunit/qunit.js'][1566] = 0;
  _$jscoverage['qunit/qunit.js'][1567] = 0;
  _$jscoverage['qunit/qunit.js'][1569] = 0;
  _$jscoverage['qunit/qunit.js'][1570] = 0;
  _$jscoverage['qunit/qunit.js'][1571] = 0;
  _$jscoverage['qunit/qunit.js'][1578] = 0;
  _$jscoverage['qunit/qunit.js'][1581] = 0;
  _$jscoverage['qunit/qunit.js'][1582] = 0;
  _$jscoverage['qunit/qunit.js'][1583] = 0;
  _$jscoverage['qunit/qunit.js'][1584] = 0;
  _$jscoverage['qunit/qunit.js'][1585] = 0;
  _$jscoverage['qunit/qunit.js'][1587] = 0;
  _$jscoverage['qunit/qunit.js'][1593] = 0;
  _$jscoverage['qunit/qunit.js'][1601] = 0;
  _$jscoverage['qunit/qunit.js'][1606] = 0;
  _$jscoverage['qunit/qunit.js'][1608] = 0;
  _$jscoverage['qunit/qunit.js'][1613] = 0;
  _$jscoverage['qunit/qunit.js'][1615] = 0;
  _$jscoverage['qunit/qunit.js'][1619] = 0;
  _$jscoverage['qunit/qunit.js'][1627] = 0;
  _$jscoverage['qunit/qunit.js'][1631] = 0;
  _$jscoverage['qunit/qunit.js'][1635] = 0;
  _$jscoverage['qunit/qunit.js'][1650] = 0;
  _$jscoverage['qunit/qunit.js'][1651] = 0;
  _$jscoverage['qunit/qunit.js'][1655] = 0;
  _$jscoverage['qunit/qunit.js'][1658] = 0;
  _$jscoverage['qunit/qunit.js'][1659] = 0;
  _$jscoverage['qunit/qunit.js'][1662] = 0;
  _$jscoverage['qunit/qunit.js'][1663] = 0;
  _$jscoverage['qunit/qunit.js'][1665] = 0;
  _$jscoverage['qunit/qunit.js'][1669] = 0;
  _$jscoverage['qunit/qunit.js'][1670] = 0;
  _$jscoverage['qunit/qunit.js'][1671] = 0;
  _$jscoverage['qunit/qunit.js'][1672] = 0;
  _$jscoverage['qunit/qunit.js'][1673] = 0;
  _$jscoverage['qunit/qunit.js'][1674] = 0;
  _$jscoverage['qunit/qunit.js'][1675] = 0;
  _$jscoverage['qunit/qunit.js'][1676] = 0;
  _$jscoverage['qunit/qunit.js'][1677] = 0;
  _$jscoverage['qunit/qunit.js'][1678] = 0;
  _$jscoverage['qunit/qunit.js'][1680] = 0;
  _$jscoverage['qunit/qunit.js'][1681] = 0;
  _$jscoverage['qunit/qunit.js'][1682] = 0;
  _$jscoverage['qunit/qunit.js'][1686] = 0;
  _$jscoverage['qunit/qunit.js'][1687] = 0;
  _$jscoverage['qunit/qunit.js'][1688] = 0;
  _$jscoverage['qunit/qunit.js'][1689] = 0;
  _$jscoverage['qunit/qunit.js'][1692] = 0;
  _$jscoverage['qunit/qunit.js'][1693] = 0;
  _$jscoverage['qunit/qunit.js'][1694] = 0;
  _$jscoverage['qunit/qunit.js'][1698] = 0;
  _$jscoverage['qunit/qunit.js'][1706] = 0;
  _$jscoverage['qunit/qunit.js'][1709] = 0;
  _$jscoverage['qunit/qunit.js'][1711] = 0;
  _$jscoverage['qunit/qunit.js'][1716] = 0;
  _$jscoverage['qunit/qunit.js'][1719] = 0;
  _$jscoverage['qunit/qunit.js'][1720] = 0;
  _$jscoverage['qunit/qunit.js'][1723] = 0;
  _$jscoverage['qunit/qunit.js'][1724] = 0;
  _$jscoverage['qunit/qunit.js'][1725] = 0;
  _$jscoverage['qunit/qunit.js'][1726] = 0;
  _$jscoverage['qunit/qunit.js'][1727] = 0;
  _$jscoverage['qunit/qunit.js'][1728] = 0;
  _$jscoverage['qunit/qunit.js'][1729] = 0;
  _$jscoverage['qunit/qunit.js'][1730] = 0;
  _$jscoverage['qunit/qunit.js'][1732] = 0;
  _$jscoverage['qunit/qunit.js'][1733] = 0;
  _$jscoverage['qunit/qunit.js'][1737] = 0;
  _$jscoverage['qunit/qunit.js'][1738] = 0;
  _$jscoverage['qunit/qunit.js'][1739] = 0;
  _$jscoverage['qunit/qunit.js'][1740] = 0;
  _$jscoverage['qunit/qunit.js'][1744] = 0;
  _$jscoverage['qunit/qunit.js'][1745] = 0;
  _$jscoverage['qunit/qunit.js'][1746] = 0;
  _$jscoverage['qunit/qunit.js'][1748] = 0;
  _$jscoverage['qunit/qunit.js'][1749] = 0;
  _$jscoverage['qunit/qunit.js'][1753] = 0;
  _$jscoverage['qunit/qunit.js'][1758] = 0;
  _$jscoverage['qunit/qunit.js'][1759] = 0;
  _$jscoverage['qunit/qunit.js'][1760] = 0;
  _$jscoverage['qunit/qunit.js'][1761] = 0;
  _$jscoverage['qunit/qunit.js'][1764] = 0;
  _$jscoverage['qunit/qunit.js'][1765] = 0;
  _$jscoverage['qunit/qunit.js'][1766] = 0;
  _$jscoverage['qunit/qunit.js'][1767] = 0;
  _$jscoverage['qunit/qunit.js'][1770] = 0;
  _$jscoverage['qunit/qunit.js'][1772] = 0;
  _$jscoverage['qunit/qunit.js'][1779] = 0;
  _$jscoverage['qunit/qunit.js'][1792] = 0;
  _$jscoverage['qunit/qunit.js'][1793] = 0;
  _$jscoverage['qunit/qunit.js'][1794] = 0;
  _$jscoverage['qunit/qunit.js'][1796] = 0;
  _$jscoverage['qunit/qunit.js'][1797] = 0;
  _$jscoverage['qunit/qunit.js'][1799] = 0;
  _$jscoverage['qunit/qunit.js'][1800] = 0;
  _$jscoverage['qunit/qunit.js'][1803] = 0;
  _$jscoverage['qunit/qunit.js'][1804] = 0;
  _$jscoverage['qunit/qunit.js'][1806] = 0;
  _$jscoverage['qunit/qunit.js'][1807] = 0;
  _$jscoverage['qunit/qunit.js'][1809] = 0;
  _$jscoverage['qunit/qunit.js'][1811] = 0;
  _$jscoverage['qunit/qunit.js'][1812] = 0;
  _$jscoverage['qunit/qunit.js'][1813] = 0;
  _$jscoverage['qunit/qunit.js'][1814] = 0;
  _$jscoverage['qunit/qunit.js'][1815] = 0;
  _$jscoverage['qunit/qunit.js'][1817] = 0;
  _$jscoverage['qunit/qunit.js'][1818] = 0;
  _$jscoverage['qunit/qunit.js'][1821] = 0;
  _$jscoverage['qunit/qunit.js'][1825] = 0;
  _$jscoverage['qunit/qunit.js'][1826] = 0;
  _$jscoverage['qunit/qunit.js'][1829] = 0;
  _$jscoverage['qunit/qunit.js'][1830] = 0;
  _$jscoverage['qunit/qunit.js'][1832] = 0;
  _$jscoverage['qunit/qunit.js'][1833] = 0;
  _$jscoverage['qunit/qunit.js'][1835] = 0;
  _$jscoverage['qunit/qunit.js'][1836] = 0;
  _$jscoverage['qunit/qunit.js'][1837] = 0;
  _$jscoverage['qunit/qunit.js'][1838] = 0;
  _$jscoverage['qunit/qunit.js'][1839] = 0;
  _$jscoverage['qunit/qunit.js'][1841] = 0;
  _$jscoverage['qunit/qunit.js'][1844] = 0;
  _$jscoverage['qunit/qunit.js'][1845] = 0;
  _$jscoverage['qunit/qunit.js'][1846] = 0;
  _$jscoverage['qunit/qunit.js'][1847] = 0;
  _$jscoverage['qunit/qunit.js'][1848] = 0;
  _$jscoverage['qunit/qunit.js'][1849] = 0;
  _$jscoverage['qunit/qunit.js'][1850] = 0;
  _$jscoverage['qunit/qunit.js'][1851] = 0;
  _$jscoverage['qunit/qunit.js'][1852] = 0;
  _$jscoverage['qunit/qunit.js'][1853] = 0;
  _$jscoverage['qunit/qunit.js'][1854] = 0;
  _$jscoverage['qunit/qunit.js'][1855] = 0;
  _$jscoverage['qunit/qunit.js'][1856] = 0;
  _$jscoverage['qunit/qunit.js'][1857] = 0;
  _$jscoverage['qunit/qunit.js'][1858] = 0;
  _$jscoverage['qunit/qunit.js'][1859] = 0;
  _$jscoverage['qunit/qunit.js'][1860] = 0;
  _$jscoverage['qunit/qunit.js'][1861] = 0;
  _$jscoverage['qunit/qunit.js'][1867] = 0;
  _$jscoverage['qunit/qunit.js'][1868] = 0;
  _$jscoverage['qunit/qunit.js'][1869] = 0;
  _$jscoverage['qunit/qunit.js'][1871] = 0;
  _$jscoverage['qunit/qunit.js'][1873] = 0;
  _$jscoverage['qunit/qunit.js'][1876] = 0;
  _$jscoverage['qunit/qunit.js'][1880] = 0;
  _$jscoverage['qunit/qunit.js'][1881] = 0;
  _$jscoverage['qunit/qunit.js'][1883] = 0;
  _$jscoverage['qunit/qunit.js'][1884] = 0;
  _$jscoverage['qunit/qunit.js'][1885] = 0;
  _$jscoverage['qunit/qunit.js'][1887] = 0;
  _$jscoverage['qunit/qunit.js'][1890] = 0;
  _$jscoverage['qunit/qunit.js'][1893] = 0;
  _$jscoverage['qunit/qunit.js'][1896] = 0;
  _$jscoverage['qunit/qunit.js'][1909] = 0;
  _$jscoverage['qunit/qunit.js'][1915] = 0;
  _$jscoverage['qunit/qunit.js'][1919] = 0;
  _$jscoverage['qunit/qunit.js'][1920] = 0;
  _$jscoverage['qunit/qunit.js'][1922] = 0;
  _$jscoverage['qunit/qunit.js'][1924] = 0;
  _$jscoverage['qunit/qunit.js'][1925] = 0;
  _$jscoverage['qunit/qunit.js'][1931] = 0;
  _$jscoverage['qunit/qunit.js'][1932] = 0;
  _$jscoverage['qunit/qunit.js'][1933] = 0;
  _$jscoverage['qunit/qunit.js'][1934] = 0;
  _$jscoverage['qunit/qunit.js'][1935] = 0;
  _$jscoverage['qunit/qunit.js'][1937] = 0;
  _$jscoverage['qunit/qunit.js'][1938] = 0;
  _$jscoverage['qunit/qunit.js'][1939] = 0;
  _$jscoverage['qunit/qunit.js'][1940] = 0;
  _$jscoverage['qunit/qunit.js'][1941] = 0;
  _$jscoverage['qunit/qunit.js'][1943] = 0;
  _$jscoverage['qunit/qunit.js'][1944] = 0;
  _$jscoverage['qunit/qunit.js'][1947] = 0;
  _$jscoverage['qunit/qunit.js'][1954] = 0;
  _$jscoverage['qunit/qunit.js'][1955] = 0;
  _$jscoverage['qunit/qunit.js'][1956] = 0;
  _$jscoverage['qunit/qunit.js'][1959] = 0;
  _$jscoverage['qunit/qunit.js'][1960] = 0;
  _$jscoverage['qunit/qunit.js'][1964] = 0;
  _$jscoverage['qunit/qunit.js'][1967] = 0;
  _$jscoverage['qunit/qunit.js'][1968] = 0;
  _$jscoverage['qunit/qunit.js'][1971] = 0;
  _$jscoverage['qunit/qunit.js'][1975] = 0;
  _$jscoverage['qunit/qunit.js'][1978] = 0;
  _$jscoverage['qunit/qunit.js'][1979] = 0;
  _$jscoverage['qunit/qunit.js'][1982] = 0;
  _$jscoverage['qunit/qunit.js'][1983] = 0;
  _$jscoverage['qunit/qunit.js'][1985] = 0;
  _$jscoverage['qunit/qunit.js'][1987] = 0;
  _$jscoverage['qunit/qunit.js'][2009] = 0;
  _$jscoverage['qunit/qunit.js'][2013] = 0;
  _$jscoverage['qunit/qunit.js'][2014] = 0;
  _$jscoverage['qunit/qunit.js'][2015] = 0;
  _$jscoverage['qunit/qunit.js'][2018] = 0;
  _$jscoverage['qunit/qunit.js'][2019] = 0;
  _$jscoverage['qunit/qunit.js'][2020] = 0;
  _$jscoverage['qunit/qunit.js'][2024] = 0;
  _$jscoverage['qunit/qunit.js'][2041] = 0;
  _$jscoverage['qunit/qunit.js'][2043] = 0;
  _$jscoverage['qunit/qunit.js'][2044] = 0;
  _$jscoverage['qunit/qunit.js'][2048] = 0;
  _$jscoverage['qunit/qunit.js'][2049] = 0;
  _$jscoverage['qunit/qunit.js'][2050] = 0;
  _$jscoverage['qunit/qunit.js'][2055] = 0;
  _$jscoverage['qunit/qunit.js'][2058] = 0;
  _$jscoverage['qunit/qunit.js'][2059] = 0;
  _$jscoverage['qunit/qunit.js'][2060] = 0;
  _$jscoverage['qunit/qunit.js'][2065] = 0;
  _$jscoverage['qunit/qunit.js'][2068] = 0;
  _$jscoverage['qunit/qunit.js'][2069] = 0;
  _$jscoverage['qunit/qunit.js'][2070] = 0;
  _$jscoverage['qunit/qunit.js'][2072] = 0;
  _$jscoverage['qunit/qunit.js'][2073] = 0;
  _$jscoverage['qunit/qunit.js'][2077] = 0;
  _$jscoverage['qunit/qunit.js'][2084] = 0;
  _$jscoverage['qunit/qunit.js'][2085] = 0;
  _$jscoverage['qunit/qunit.js'][2088] = 0;
  _$jscoverage['qunit/qunit.js'][2092] = 0;
  _$jscoverage['qunit/qunit.js'][2099] = 0;
  _$jscoverage['qunit/qunit.js'][2100] = 0;
  _$jscoverage['qunit/qunit.js'][2103] = 0;
  _$jscoverage['qunit/qunit.js'][2107] = 0;
  _$jscoverage['qunit/qunit.js'][2114] = 0;
  _$jscoverage['qunit/qunit.js'][2120] = 0;
  _$jscoverage['qunit/qunit.js'][2121] = 0;
  _$jscoverage['qunit/qunit.js'][2122] = 0;
  _$jscoverage['qunit/qunit.js'][2124] = 0;
  _$jscoverage['qunit/qunit.js'][2130] = 0;
  _$jscoverage['qunit/qunit.js'][2131] = 0;
  _$jscoverage['qunit/qunit.js'][2134] = 0;
  _$jscoverage['qunit/qunit.js'][2137] = 0;
  _$jscoverage['qunit/qunit.js'][2138] = 0;
  _$jscoverage['qunit/qunit.js'][2141] = 0;
  _$jscoverage['qunit/qunit.js'][2144] = 0;
  _$jscoverage['qunit/qunit.js'][2145] = 0;
  _$jscoverage['qunit/qunit.js'][2146] = 0;
  _$jscoverage['qunit/qunit.js'][2150] = 0;
  _$jscoverage['qunit/qunit.js'][2151] = 0;
  _$jscoverage['qunit/qunit.js'][2152] = 0;
  _$jscoverage['qunit/qunit.js'][2156] = 0;
  _$jscoverage['qunit/qunit.js'][2157] = 0;
  _$jscoverage['qunit/qunit.js'][2158] = 0;
  _$jscoverage['qunit/qunit.js'][2162] = 0;
  _$jscoverage['qunit/qunit.js'][2164] = 0;
  _$jscoverage['qunit/qunit.js'][2165] = 0;
  _$jscoverage['qunit/qunit.js'][2167] = 0;
  _$jscoverage['qunit/qunit.js'][2172] = 0;
  _$jscoverage['qunit/qunit.js'][2177] = 0;
  _$jscoverage['qunit/qunit.js'][2178] = 0;
  _$jscoverage['qunit/qunit.js'][2182] = 0;
}
_$jscoverage['qunit/qunit.js'].source = ["<span class=\"c\">/**</span>","<span class=\"c\"> * QUnit v1.12.0pre - A JavaScript Unit Testing Framework</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * http://qunitjs.com</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * Copyright 2012 jQuery Foundation and other contributors</span>","<span class=\"c\"> * Released under the MIT license.</span>","<span class=\"c\"> * http://jquery.org/license</span>","<span class=\"c\"> */</span>","","<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span> window <span class=\"k\">)</span> <span class=\"k\">{</span>","","<span class=\"k\">var</span> QUnit<span class=\"k\">,</span>","\tassert<span class=\"k\">,</span>","\tconfig<span class=\"k\">,</span>","\tonErrorFnPrev<span class=\"k\">,</span>","\ttestId <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span>","\tfileName <span class=\"k\">=</span> <span class=\"k\">(</span>sourceFromStacktrace<span class=\"k\">(</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"s\">\"\"</span> <span class=\"k\">).</span>replace<span class=\"k\">(</span><span class=\"s\">/(:\\d+)+\\)?/</span><span class=\"k\">,</span> <span class=\"s\">\"\"</span><span class=\"k\">).</span>replace<span class=\"k\">(</span><span class=\"s\">/.+\\//</span><span class=\"k\">,</span> <span class=\"s\">\"\"</span><span class=\"k\">),</span>","\ttoString <span class=\"k\">=</span> Object<span class=\"k\">.</span>prototype<span class=\"k\">.</span>toString<span class=\"k\">,</span>","\thasOwn <span class=\"k\">=</span> Object<span class=\"k\">.</span>prototype<span class=\"k\">.</span>hasOwnProperty<span class=\"k\">,</span>","\t<span class=\"c\">// Keep a local reference to Date (GH-283)</span>","\tDate <span class=\"k\">=</span> window<span class=\"k\">.</span>Date<span class=\"k\">,</span>","\tdefined <span class=\"k\">=</span> <span class=\"k\">{</span>","\t\tsetTimeout<span class=\"k\">:</span> <span class=\"k\">typeof</span> window<span class=\"k\">.</span>setTimeout <span class=\"k\">!==</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">,</span>","\t\tsessionStorage<span class=\"k\">:</span> <span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">var</span> x <span class=\"k\">=</span> <span class=\"s\">\"qunit-test-string\"</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t\t\t\tsessionStorage<span class=\"k\">.</span>setItem<span class=\"k\">(</span> x<span class=\"k\">,</span> x <span class=\"k\">);</span>","\t\t\t\tsessionStorage<span class=\"k\">.</span>removeItem<span class=\"k\">(</span> x <span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span> <span class=\"k\">catch</span><span class=\"k\">(</span> e <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span><span class=\"k\">())</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t<span class=\"c\">/**</span>","<span class=\"c\">\t * Provides a normalized error string, correcting an issue</span>","<span class=\"c\">\t * with IE 7 (and prior) where Error.prototype.toString is</span>","<span class=\"c\">\t * not properly implemented</span>","<span class=\"c\">\t *</span>","<span class=\"c\">\t * Based on http://es5.github.com/#x15.11.4.4</span>","<span class=\"c\">\t *</span>","<span class=\"c\">\t * @param {String|Error} error</span>","<span class=\"c\">\t * @return {String} error message</span>","<span class=\"c\">\t */</span>","\terrorString <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> error <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">var</span> name<span class=\"k\">,</span> message<span class=\"k\">,</span>","\t\t\terrorString <span class=\"k\">=</span> error<span class=\"k\">.</span>toString<span class=\"k\">();</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> errorString<span class=\"k\">.</span>substring<span class=\"k\">(</span> <span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">7</span> <span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">\"[object\"</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tname <span class=\"k\">=</span> error<span class=\"k\">.</span>name <span class=\"k\">?</span> error<span class=\"k\">.</span>name<span class=\"k\">.</span>toString<span class=\"k\">()</span> <span class=\"k\">:</span> <span class=\"s\">\"Error\"</span><span class=\"k\">;</span>","\t\t\tmessage <span class=\"k\">=</span> error<span class=\"k\">.</span>message <span class=\"k\">?</span> error<span class=\"k\">.</span>message<span class=\"k\">.</span>toString<span class=\"k\">()</span> <span class=\"k\">:</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> name <span class=\"k\">&amp;&amp;</span> message <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">return</span> name <span class=\"k\">+</span> <span class=\"s\">\": \"</span> <span class=\"k\">+</span> message<span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> name <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">return</span> name<span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> message <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">return</span> message<span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">return</span> <span class=\"s\">\"Error\"</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">return</span> errorString<span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t<span class=\"c\">/**</span>","<span class=\"c\">\t * Makes a clone of an object using only Array or Object as base,</span>","<span class=\"c\">\t * and copies over the own enumerable properties.</span>","<span class=\"c\">\t *</span>","<span class=\"c\">\t * @param {Object} obj</span>","<span class=\"c\">\t * @return {Object} New object with only the own properties (recursively).</span>","<span class=\"c\">\t */</span>","\tobjectValues <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> obj <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"c\">// Grunt 0.3.x uses an older version of jshint that still has jshint/jshint#392.</span>","\t\t<span class=\"c\">/*jshint newcap: false */</span>","\t\t<span class=\"k\">var</span> key<span class=\"k\">,</span> val<span class=\"k\">,</span>","\t\t\tvals <span class=\"k\">=</span> QUnit<span class=\"k\">.</span>is<span class=\"k\">(</span> <span class=\"s\">\"array\"</span><span class=\"k\">,</span> obj <span class=\"k\">)</span> <span class=\"k\">?</span> <span class=\"k\">[]</span> <span class=\"k\">:</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> key <span class=\"k\">in</span> obj <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> hasOwn<span class=\"k\">.</span>call<span class=\"k\">(</span> obj<span class=\"k\">,</span> key <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tval <span class=\"k\">=</span> obj<span class=\"k\">[</span>key<span class=\"k\">];</span>","\t\t\t\tvals<span class=\"k\">[</span>key<span class=\"k\">]</span> <span class=\"k\">=</span> val <span class=\"k\">===</span> Object<span class=\"k\">(</span>val<span class=\"k\">)</span> <span class=\"k\">?</span> objectValues<span class=\"k\">(</span>val<span class=\"k\">)</span> <span class=\"k\">:</span> val<span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">return</span> vals<span class=\"k\">;</span>","\t<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"k\">function</span> Test<span class=\"k\">(</span> settings <span class=\"k\">)</span> <span class=\"k\">{</span>","\textend<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">,</span> settings <span class=\"k\">);</span>","\t<span class=\"k\">this</span><span class=\"k\">.</span>assertions <span class=\"k\">=</span> <span class=\"k\">[];</span>","\t<span class=\"k\">this</span><span class=\"k\">.</span>testNumber <span class=\"k\">=</span> <span class=\"k\">++</span>Test<span class=\"k\">.</span>count<span class=\"k\">;</span>","<span class=\"k\">}</span>","","Test<span class=\"k\">.</span>count <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","","Test<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>","\tinit<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">var</span> a<span class=\"k\">,</span> b<span class=\"k\">,</span> li<span class=\"k\">,</span>","\t\t\ttests <span class=\"k\">=</span> id<span class=\"k\">(</span> <span class=\"s\">\"qunit-tests\"</span> <span class=\"k\">);</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> tests <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tb <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span> <span class=\"s\">\"strong\"</span> <span class=\"k\">);</span>","\t\t\tb<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>nameHtml<span class=\"k\">;</span>","","\t\t\t<span class=\"c\">// `a` initialized at top of scope</span>","\t\t\ta <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span> <span class=\"s\">\"a\"</span> <span class=\"k\">);</span>","\t\t\ta<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> <span class=\"s\">\"Rerun\"</span><span class=\"k\">;</span>","\t\t\ta<span class=\"k\">.</span>href <span class=\"k\">=</span> QUnit<span class=\"k\">.</span>url<span class=\"k\">(</span><span class=\"k\">{</span> testNumber<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>testNumber <span class=\"k\">}</span><span class=\"k\">);</span>","","\t\t\tli <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span> <span class=\"s\">\"li\"</span> <span class=\"k\">);</span>","\t\t\tli<span class=\"k\">.</span>appendChild<span class=\"k\">(</span> b <span class=\"k\">);</span>","\t\t\tli<span class=\"k\">.</span>appendChild<span class=\"k\">(</span> a <span class=\"k\">);</span>","\t\t\tli<span class=\"k\">.</span>className <span class=\"k\">=</span> <span class=\"s\">\"running\"</span><span class=\"k\">;</span>","\t\t\tli<span class=\"k\">.</span>id <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>id <span class=\"k\">=</span> <span class=\"s\">\"qunit-test-output\"</span> <span class=\"k\">+</span> testId<span class=\"k\">++;</span>","","\t\t\ttests<span class=\"k\">.</span>appendChild<span class=\"k\">(</span> li <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","\tsetup<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>module <span class=\"k\">!==</span> config<span class=\"k\">.</span>previousModule <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>previousModule <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\trunLoggingCallbacks<span class=\"k\">(</span> <span class=\"s\">\"moduleDone\"</span><span class=\"k\">,</span> QUnit<span class=\"k\">,</span> <span class=\"k\">{</span>","\t\t\t\t\tname<span class=\"k\">:</span> config<span class=\"k\">.</span>previousModule<span class=\"k\">,</span>","\t\t\t\t\tfailed<span class=\"k\">:</span> config<span class=\"k\">.</span>moduleStats<span class=\"k\">.</span>bad<span class=\"k\">,</span>","\t\t\t\t\tpassed<span class=\"k\">:</span> config<span class=\"k\">.</span>moduleStats<span class=\"k\">.</span>all <span class=\"k\">-</span> config<span class=\"k\">.</span>moduleStats<span class=\"k\">.</span>bad<span class=\"k\">,</span>","\t\t\t\t\ttotal<span class=\"k\">:</span> config<span class=\"k\">.</span>moduleStats<span class=\"k\">.</span>all","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span>","\t\t\tconfig<span class=\"k\">.</span>previousModule <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>module<span class=\"k\">;</span>","\t\t\tconfig<span class=\"k\">.</span>moduleStats <span class=\"k\">=</span> <span class=\"k\">{</span> all<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span> bad<span class=\"k\">:</span> <span class=\"s\">0</span> <span class=\"k\">}</span><span class=\"k\">;</span>","\t\t\trunLoggingCallbacks<span class=\"k\">(</span> <span class=\"s\">\"moduleStart\"</span><span class=\"k\">,</span> QUnit<span class=\"k\">,</span> <span class=\"k\">{</span>","\t\t\t\tname<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>module","\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>autorun <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\trunLoggingCallbacks<span class=\"k\">(</span> <span class=\"s\">\"moduleStart\"</span><span class=\"k\">,</span> QUnit<span class=\"k\">,</span> <span class=\"k\">{</span>","\t\t\t\tname<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>module","\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","","\t\tconfig<span class=\"k\">.</span>current <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","\t\t<span class=\"k\">this</span><span class=\"k\">.</span>testEnvironment <span class=\"k\">=</span> extend<span class=\"k\">(</span><span class=\"k\">{</span>","\t\t\tsetup<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","\t\t\tteardown<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{}</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>moduleTestEnvironment <span class=\"k\">);</span>","","\t\t<span class=\"k\">this</span><span class=\"k\">.</span>started <span class=\"k\">=</span> <span class=\"k\">+</span><span class=\"k\">new</span> Date<span class=\"k\">();</span>","\t\trunLoggingCallbacks<span class=\"k\">(</span> <span class=\"s\">\"testStart\"</span><span class=\"k\">,</span> QUnit<span class=\"k\">,</span> <span class=\"k\">{</span>","\t\t\tname<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>testName<span class=\"k\">,</span>","\t\t\tmodule<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>module","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","","\t\t<span class=\"c\">// allow utility functions to access the current test environment</span>","\t\t<span class=\"c\">// TODO why??</span>","\t\tQUnit<span class=\"k\">.</span>current_testEnvironment <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>testEnvironment<span class=\"k\">;</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>config<span class=\"k\">.</span>pollution <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tsaveGlobal<span class=\"k\">();</span>","\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>notrycatch <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">this</span><span class=\"k\">.</span>testEnvironment<span class=\"k\">.</span>setup<span class=\"k\">.</span>call<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>testEnvironment <span class=\"k\">);</span>","\t\t\t<span class=\"k\">return</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">this</span><span class=\"k\">.</span>testEnvironment<span class=\"k\">.</span>setup<span class=\"k\">.</span>call<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>testEnvironment <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span> <span class=\"k\">catch</span><span class=\"k\">(</span> e <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tQUnit<span class=\"k\">.</span>pushFailure<span class=\"k\">(</span> <span class=\"s\">\"Setup failed on \"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>testName <span class=\"k\">+</span> <span class=\"s\">\": \"</span> <span class=\"k\">+</span> <span class=\"k\">(</span> e<span class=\"k\">.</span>message <span class=\"k\">||</span> e <span class=\"k\">),</span> extractStacktrace<span class=\"k\">(</span> e<span class=\"k\">,</span> <span class=\"s\">1</span> <span class=\"k\">)</span> <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","\trun<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\tconfig<span class=\"k\">.</span>current <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","\t\t<span class=\"k\">var</span> running <span class=\"k\">=</span> id<span class=\"k\">(</span> <span class=\"s\">\"qunit-testresult\"</span> <span class=\"k\">);</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> running <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\trunning<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> <span class=\"s\">\"Running: &lt;br/&gt;\"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>nameHtml<span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>async <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tQUnit<span class=\"k\">.</span>stop<span class=\"k\">();</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">this</span><span class=\"k\">.</span>callbackStarted <span class=\"k\">=</span> <span class=\"k\">+</span><span class=\"k\">new</span> Date<span class=\"k\">();</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>notrycatch <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">this</span><span class=\"k\">.</span>callback<span class=\"k\">.</span>call<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>testEnvironment<span class=\"k\">,</span> QUnit<span class=\"k\">.</span>assert <span class=\"k\">);</span>","\t\t\t<span class=\"k\">this</span><span class=\"k\">.</span>callbackRuntime <span class=\"k\">=</span> <span class=\"k\">+</span><span class=\"k\">new</span> Date<span class=\"k\">()</span> <span class=\"k\">-</span> <span class=\"k\">this</span><span class=\"k\">.</span>callbackStarted<span class=\"k\">;</span>","\t\t\t<span class=\"k\">return</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">this</span><span class=\"k\">.</span>callback<span class=\"k\">.</span>call<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>testEnvironment<span class=\"k\">,</span> QUnit<span class=\"k\">.</span>assert <span class=\"k\">);</span>","\t\t\t<span class=\"k\">this</span><span class=\"k\">.</span>callbackRuntime <span class=\"k\">=</span> <span class=\"k\">+</span><span class=\"k\">new</span> Date<span class=\"k\">()</span> <span class=\"k\">-</span> <span class=\"k\">this</span><span class=\"k\">.</span>callbackStarted<span class=\"k\">;</span>","\t\t<span class=\"k\">}</span> <span class=\"k\">catch</span><span class=\"k\">(</span> e <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">this</span><span class=\"k\">.</span>callbackRuntime <span class=\"k\">=</span> <span class=\"k\">+</span><span class=\"k\">new</span> Date<span class=\"k\">()</span> <span class=\"k\">-</span> <span class=\"k\">this</span><span class=\"k\">.</span>callbackStarted<span class=\"k\">;</span>","","\t\t\tQUnit<span class=\"k\">.</span>pushFailure<span class=\"k\">(</span> <span class=\"s\">\"Died on test #\"</span> <span class=\"k\">+</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>assertions<span class=\"k\">.</span>length <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\" \"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>stack <span class=\"k\">+</span> <span class=\"s\">\": \"</span> <span class=\"k\">+</span> <span class=\"k\">(</span> e<span class=\"k\">.</span>message <span class=\"k\">||</span> e <span class=\"k\">),</span> extractStacktrace<span class=\"k\">(</span> e<span class=\"k\">,</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">);</span>","\t\t\t<span class=\"c\">// else next test will carry the responsibility</span>","\t\t\tsaveGlobal<span class=\"k\">();</span>","","\t\t\t<span class=\"c\">// Restart the tests if they're blocking</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>blocking <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tQUnit<span class=\"k\">.</span>start<span class=\"k\">();</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","\tteardown<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\tconfig<span class=\"k\">.</span>current <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>notrycatch <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">typeof</span> <span class=\"k\">this</span><span class=\"k\">.</span>callbackRuntime <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">this</span><span class=\"k\">.</span>callbackRuntime <span class=\"k\">=</span> <span class=\"k\">+</span><span class=\"k\">new</span> Date<span class=\"k\">()</span> <span class=\"k\">-</span> <span class=\"k\">this</span><span class=\"k\">.</span>callbackStarted<span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span>","\t\t\t<span class=\"k\">this</span><span class=\"k\">.</span>testEnvironment<span class=\"k\">.</span>teardown<span class=\"k\">.</span>call<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>testEnvironment <span class=\"k\">);</span>","\t\t\t<span class=\"k\">return</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">this</span><span class=\"k\">.</span>testEnvironment<span class=\"k\">.</span>teardown<span class=\"k\">.</span>call<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>testEnvironment <span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span> <span class=\"k\">catch</span><span class=\"k\">(</span> e <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tQUnit<span class=\"k\">.</span>pushFailure<span class=\"k\">(</span> <span class=\"s\">\"Teardown failed on \"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>testName <span class=\"k\">+</span> <span class=\"s\">\": \"</span> <span class=\"k\">+</span> <span class=\"k\">(</span> e<span class=\"k\">.</span>message <span class=\"k\">||</span> e <span class=\"k\">),</span> extractStacktrace<span class=\"k\">(</span> e<span class=\"k\">,</span> <span class=\"s\">1</span> <span class=\"k\">)</span> <span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span>","\t\tcheckPollution<span class=\"k\">();</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","\tfinish<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\tconfig<span class=\"k\">.</span>current <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>requireExpects <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>expected <span class=\"k\">===</span> <span class=\"k\">null</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tQUnit<span class=\"k\">.</span>pushFailure<span class=\"k\">(</span> <span class=\"s\">\"Expected number of assertions to be defined, but expect() was not called.\"</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>stack <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>expected <span class=\"k\">!==</span> <span class=\"k\">null</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>expected <span class=\"k\">!==</span> <span class=\"k\">this</span><span class=\"k\">.</span>assertions<span class=\"k\">.</span>length <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tQUnit<span class=\"k\">.</span>pushFailure<span class=\"k\">(</span> <span class=\"s\">\"Expected \"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>expected <span class=\"k\">+</span> <span class=\"s\">\" assertions, but \"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>assertions<span class=\"k\">.</span>length <span class=\"k\">+</span> <span class=\"s\">\" were run\"</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>stack <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>expected <span class=\"k\">===</span> <span class=\"k\">null</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>assertions<span class=\"k\">.</span>length <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tQUnit<span class=\"k\">.</span>pushFailure<span class=\"k\">(</span> <span class=\"s\">\"Expected at least one assertion, but none were run - call expect(0) to accept zero assertions.\"</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>stack <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">var</span> i<span class=\"k\">,</span> assertion<span class=\"k\">,</span> a<span class=\"k\">,</span> b<span class=\"k\">,</span> time<span class=\"k\">,</span> li<span class=\"k\">,</span> ol<span class=\"k\">,</span>","\t\t\ttest <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">,</span>","\t\t\tgood <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span>","\t\t\tbad <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span>","\t\t\ttests <span class=\"k\">=</span> id<span class=\"k\">(</span> <span class=\"s\">\"qunit-tests\"</span> <span class=\"k\">);</span>","","\t\t<span class=\"k\">this</span><span class=\"k\">.</span>runtime <span class=\"k\">=</span> <span class=\"k\">+</span><span class=\"k\">new</span> Date<span class=\"k\">()</span> <span class=\"k\">-</span> <span class=\"k\">this</span><span class=\"k\">.</span>started<span class=\"k\">;</span>","\t\tconfig<span class=\"k\">.</span>stats<span class=\"k\">.</span>all <span class=\"k\">+=</span> <span class=\"k\">this</span><span class=\"k\">.</span>assertions<span class=\"k\">.</span>length<span class=\"k\">;</span>","\t\tconfig<span class=\"k\">.</span>moduleStats<span class=\"k\">.</span>all <span class=\"k\">+=</span> <span class=\"k\">this</span><span class=\"k\">.</span>assertions<span class=\"k\">.</span>length<span class=\"k\">;</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> tests <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tol <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span> <span class=\"s\">\"ol\"</span> <span class=\"k\">);</span>","\t\t\tol<span class=\"k\">.</span>className <span class=\"k\">=</span> <span class=\"s\">\"qunit-assert-list\"</span><span class=\"k\">;</span>","","\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>assertions<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tassertion <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>assertions<span class=\"k\">[</span>i<span class=\"k\">];</span>","","\t\t\t\tli <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span> <span class=\"s\">\"li\"</span> <span class=\"k\">);</span>","\t\t\t\tli<span class=\"k\">.</span>className <span class=\"k\">=</span> assertion<span class=\"k\">.</span>result <span class=\"k\">?</span> <span class=\"s\">\"pass\"</span> <span class=\"k\">:</span> <span class=\"s\">\"fail\"</span><span class=\"k\">;</span>","\t\t\t\tli<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> assertion<span class=\"k\">.</span>message <span class=\"k\">||</span> <span class=\"k\">(</span> assertion<span class=\"k\">.</span>result <span class=\"k\">?</span> <span class=\"s\">\"okay\"</span> <span class=\"k\">:</span> <span class=\"s\">\"failed\"</span> <span class=\"k\">);</span>","\t\t\t\tol<span class=\"k\">.</span>appendChild<span class=\"k\">(</span> li <span class=\"k\">);</span>","","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> assertion<span class=\"k\">.</span>result <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\tgood<span class=\"k\">++;</span>","\t\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t\t\tbad<span class=\"k\">++;</span>","\t\t\t\t\tconfig<span class=\"k\">.</span>stats<span class=\"k\">.</span>bad<span class=\"k\">++;</span>","\t\t\t\t\tconfig<span class=\"k\">.</span>moduleStats<span class=\"k\">.</span>bad<span class=\"k\">++;</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t<span class=\"k\">}</span>","","\t\t\t<span class=\"c\">// store result when possible</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> QUnit<span class=\"k\">.</span>config<span class=\"k\">.</span>reorder <span class=\"k\">&amp;&amp;</span> defined<span class=\"k\">.</span>sessionStorage <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> bad <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\tsessionStorage<span class=\"k\">.</span>setItem<span class=\"k\">(</span> <span class=\"s\">\"qunit-test-\"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>module <span class=\"k\">+</span> <span class=\"s\">\"-\"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>testName<span class=\"k\">,</span> bad <span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t\t\tsessionStorage<span class=\"k\">.</span>removeItem<span class=\"k\">(</span> <span class=\"s\">\"qunit-test-\"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>module <span class=\"k\">+</span> <span class=\"s\">\"-\"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>testName <span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t<span class=\"k\">}</span>","","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> bad <span class=\"k\">===</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\taddClass<span class=\"k\">(</span> ol<span class=\"k\">,</span> <span class=\"s\">\"qunit-collapsed\"</span> <span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span>","","\t\t\t<span class=\"c\">// `b` initialized at top of scope</span>","\t\t\tb <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span> <span class=\"s\">\"strong\"</span> <span class=\"k\">);</span>","\t\t\tb<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>nameHtml <span class=\"k\">+</span> <span class=\"s\">\" &lt;b class='counts'&gt;(&lt;b class='failed'&gt;\"</span> <span class=\"k\">+</span> bad <span class=\"k\">+</span> <span class=\"s\">\"&lt;/b&gt;, &lt;b class='passed'&gt;\"</span> <span class=\"k\">+</span> good <span class=\"k\">+</span> <span class=\"s\">\"&lt;/b&gt;, \"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>assertions<span class=\"k\">.</span>length <span class=\"k\">+</span> <span class=\"s\">\")&lt;/b&gt;\"</span><span class=\"k\">;</span>","","\t\t\taddEvent<span class=\"k\">(</span>b<span class=\"k\">,</span> <span class=\"s\">\"click\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">var</span> next <span class=\"k\">=</span> b<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>lastChild<span class=\"k\">,</span>","\t\t\t\t\tcollapsed <span class=\"k\">=</span> hasClass<span class=\"k\">(</span> next<span class=\"k\">,</span> <span class=\"s\">\"qunit-collapsed\"</span> <span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">(</span> collapsed <span class=\"k\">?</span> removeClass <span class=\"k\">:</span> addClass <span class=\"k\">)(</span> next<span class=\"k\">,</span> <span class=\"s\">\"qunit-collapsed\"</span> <span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","","\t\t\taddEvent<span class=\"k\">(</span>b<span class=\"k\">,</span> <span class=\"s\">\"dblclick\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span> e <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">var</span> target <span class=\"k\">=</span> e <span class=\"k\">&amp;&amp;</span> e<span class=\"k\">.</span>target <span class=\"k\">?</span> e<span class=\"k\">.</span>target <span class=\"k\">:</span> window<span class=\"k\">.</span>event<span class=\"k\">.</span>srcElement<span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> target<span class=\"k\">.</span>nodeName<span class=\"k\">.</span>toLowerCase<span class=\"k\">()</span> <span class=\"k\">===</span> <span class=\"s\">\"span\"</span> <span class=\"k\">||</span> target<span class=\"k\">.</span>nodeName<span class=\"k\">.</span>toLowerCase<span class=\"k\">()</span> <span class=\"k\">===</span> <span class=\"s\">\"b\"</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\ttarget <span class=\"k\">=</span> target<span class=\"k\">.</span>parentNode<span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> window<span class=\"k\">.</span>location <span class=\"k\">&amp;&amp;</span> target<span class=\"k\">.</span>nodeName<span class=\"k\">.</span>toLowerCase<span class=\"k\">()</span> <span class=\"k\">===</span> <span class=\"s\">\"strong\"</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\twindow<span class=\"k\">.</span>location <span class=\"k\">=</span> QUnit<span class=\"k\">.</span>url<span class=\"k\">(</span><span class=\"k\">{</span> testNumber<span class=\"k\">:</span> test<span class=\"k\">.</span>testNumber <span class=\"k\">}</span><span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","","\t\t\t<span class=\"c\">// `time` initialized at top of scope</span>","\t\t\ttime <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span> <span class=\"s\">\"span\"</span> <span class=\"k\">);</span>","\t\t\ttime<span class=\"k\">.</span>className <span class=\"k\">=</span> <span class=\"s\">\"runtime\"</span><span class=\"k\">;</span>","\t\t\ttime<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>runtime <span class=\"k\">+</span> <span class=\"s\">\" ms\"</span><span class=\"k\">;</span>","","\t\t\t<span class=\"c\">// `li` initialized at top of scope</span>","\t\t\tli <span class=\"k\">=</span> id<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>id <span class=\"k\">);</span>","\t\t\tli<span class=\"k\">.</span>className <span class=\"k\">=</span> bad <span class=\"k\">?</span> <span class=\"s\">\"fail\"</span> <span class=\"k\">:</span> <span class=\"s\">\"pass\"</span><span class=\"k\">;</span>","\t\t\tli<span class=\"k\">.</span>removeChild<span class=\"k\">(</span> li<span class=\"k\">.</span>firstChild <span class=\"k\">);</span>","\t\t\ta <span class=\"k\">=</span> li<span class=\"k\">.</span>firstChild<span class=\"k\">;</span>","\t\t\tli<span class=\"k\">.</span>appendChild<span class=\"k\">(</span> b <span class=\"k\">);</span>","\t\t\tli<span class=\"k\">.</span>appendChild<span class=\"k\">(</span> a <span class=\"k\">);</span>","\t\t\tli<span class=\"k\">.</span>appendChild<span class=\"k\">(</span> time <span class=\"k\">);</span>","\t\t\tli<span class=\"k\">.</span>appendChild<span class=\"k\">(</span> ol <span class=\"k\">);</span>","","\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>assertions<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>assertions<span class=\"k\">[</span>i<span class=\"k\">].</span>result <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\tbad<span class=\"k\">++;</span>","\t\t\t\t\tconfig<span class=\"k\">.</span>stats<span class=\"k\">.</span>bad<span class=\"k\">++;</span>","\t\t\t\t\tconfig<span class=\"k\">.</span>moduleStats<span class=\"k\">.</span>bad<span class=\"k\">++;</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span>","","\t\trunLoggingCallbacks<span class=\"k\">(</span> <span class=\"s\">\"testDone\"</span><span class=\"k\">,</span> QUnit<span class=\"k\">,</span> <span class=\"k\">{</span>","\t\t\tname<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>testName<span class=\"k\">,</span>","\t\t\tmodule<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>module<span class=\"k\">,</span>","\t\t\tfailed<span class=\"k\">:</span> bad<span class=\"k\">,</span>","\t\t\tpassed<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>assertions<span class=\"k\">.</span>length <span class=\"k\">-</span> bad<span class=\"k\">,</span>","\t\t\ttotal<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>assertions<span class=\"k\">.</span>length<span class=\"k\">,</span>","\t\t\tduration<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>runtime","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","","\t\tQUnit<span class=\"k\">.</span>reset<span class=\"k\">();</span>","","\t\tconfig<span class=\"k\">.</span>current <span class=\"k\">=</span> undefined<span class=\"k\">;</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\tqueue<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">var</span> bad<span class=\"k\">,</span>","\t\t\ttest <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","\t\tsynchronize<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\ttest<span class=\"k\">.</span>init<span class=\"k\">();</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t<span class=\"k\">function</span> run<span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t<span class=\"c\">// each of these can by async</span>","\t\t\tsynchronize<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\ttest<span class=\"k\">.</span>setup<span class=\"k\">();</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t\tsynchronize<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\ttest<span class=\"k\">.</span>run<span class=\"k\">();</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t\tsynchronize<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\ttest<span class=\"k\">.</span>teardown<span class=\"k\">();</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t\tsynchronize<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\ttest<span class=\"k\">.</span>finish<span class=\"k\">();</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"c\">// `bad` initialized at top of scope</span>","\t\t<span class=\"c\">// defer when previous test run passed, if storage is available</span>","\t\tbad <span class=\"k\">=</span> QUnit<span class=\"k\">.</span>config<span class=\"k\">.</span>reorder <span class=\"k\">&amp;&amp;</span> defined<span class=\"k\">.</span>sessionStorage <span class=\"k\">&amp;&amp;</span>","\t\t\t\t\t\t<span class=\"k\">+</span>sessionStorage<span class=\"k\">.</span>getItem<span class=\"k\">(</span> <span class=\"s\">\"qunit-test-\"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>module <span class=\"k\">+</span> <span class=\"s\">\"-\"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>testName <span class=\"k\">);</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> bad <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\trun<span class=\"k\">();</span>","\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\tsynchronize<span class=\"k\">(</span> run<span class=\"k\">,</span> <span class=\"k\">true</span> <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">// Root QUnit object.</span>","<span class=\"c\">// `QUnit` initialized at top of scope</span>","QUnit <span class=\"k\">=</span> <span class=\"k\">{</span>","","\t<span class=\"c\">// call on start of module test to prepend name to all tests</span>","\tmodule<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> name<span class=\"k\">,</span> testEnvironment <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tconfig<span class=\"k\">.</span>currentModule <span class=\"k\">=</span> name<span class=\"k\">;</span>","\t\tconfig<span class=\"k\">.</span>currentModuleTestEnvironment <span class=\"k\">=</span> testEnvironment<span class=\"k\">;</span>","\t\tconfig<span class=\"k\">.</span>modules<span class=\"k\">[</span>name<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\tasyncTest<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> testName<span class=\"k\">,</span> expected<span class=\"k\">,</span> callback <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> arguments<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">2</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tcallback <span class=\"k\">=</span> expected<span class=\"k\">;</span>","\t\t\texpected <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","","\t\tQUnit<span class=\"k\">.</span>test<span class=\"k\">(</span> testName<span class=\"k\">,</span> expected<span class=\"k\">,</span> callback<span class=\"k\">,</span> <span class=\"k\">true</span> <span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\ttest<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> testName<span class=\"k\">,</span> expected<span class=\"k\">,</span> callback<span class=\"k\">,</span> async <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">var</span> test<span class=\"k\">,</span>","\t\t\tnameHtml <span class=\"k\">=</span> <span class=\"s\">\"&lt;span class='test-name'&gt;\"</span> <span class=\"k\">+</span> escapeText<span class=\"k\">(</span> testName <span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;/span&gt;\"</span><span class=\"k\">;</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> arguments<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">2</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tcallback <span class=\"k\">=</span> expected<span class=\"k\">;</span>","\t\t\texpected <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>currentModule <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tnameHtml <span class=\"k\">=</span> <span class=\"s\">\"&lt;span class='module-name'&gt;\"</span> <span class=\"k\">+</span> escapeText<span class=\"k\">(</span> config<span class=\"k\">.</span>currentModule <span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;/span&gt;: \"</span> <span class=\"k\">+</span> nameHtml<span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","","\t\ttest <span class=\"k\">=</span> <span class=\"k\">new</span> Test<span class=\"k\">(</span><span class=\"k\">{</span>","\t\t\tnameHtml<span class=\"k\">:</span> nameHtml<span class=\"k\">,</span>","\t\t\ttestName<span class=\"k\">:</span> testName<span class=\"k\">,</span>","\t\t\texpected<span class=\"k\">:</span> expected<span class=\"k\">,</span>","\t\t\tasync<span class=\"k\">:</span> async<span class=\"k\">,</span>","\t\t\tcallback<span class=\"k\">:</span> callback<span class=\"k\">,</span>","\t\t\tmodule<span class=\"k\">:</span> config<span class=\"k\">.</span>currentModule<span class=\"k\">,</span>","\t\t\tmoduleTestEnvironment<span class=\"k\">:</span> config<span class=\"k\">.</span>currentModuleTestEnvironment<span class=\"k\">,</span>","\t\t\tstack<span class=\"k\">:</span> sourceFromStacktrace<span class=\"k\">(</span> <span class=\"s\">2</span> <span class=\"k\">)</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>validTest<span class=\"k\">(</span> test <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">return</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","","\t\ttest<span class=\"k\">.</span>queue<span class=\"k\">();</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\t<span class=\"c\">// Specify the number of expected assertions to guarantee that failed test (no assertions are run at all) don't slip through.</span>","\texpect<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> asserts <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>arguments<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tconfig<span class=\"k\">.</span>current<span class=\"k\">.</span>expected <span class=\"k\">=</span> asserts<span class=\"k\">;</span>","\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">return</span> config<span class=\"k\">.</span>current<span class=\"k\">.</span>expected<span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\tstart<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> count <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"c\">// QUnit hasn't been initialized yet.</span>","\t\t<span class=\"c\">// Note: RequireJS (et al) may delay onLoad</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>semaphore <span class=\"k\">===</span> undefined <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tQUnit<span class=\"k\">.</span>begin<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"c\">// This is triggered at the top of QUnit.load, push start() to the event loop, to allow QUnit.load to finish first</span>","\t\t\t\tsetTimeout<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\t\tQUnit<span class=\"k\">.</span>start<span class=\"k\">(</span> count <span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t\t<span class=\"k\">return</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","","\t\tconfig<span class=\"k\">.</span>semaphore <span class=\"k\">-=</span> count <span class=\"k\">||</span> <span class=\"s\">1</span><span class=\"k\">;</span>","\t\t<span class=\"c\">// don't start until equal number of stop-calls</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>semaphore <span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">return</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","\t\t<span class=\"c\">// ignore if start is called more often then stop</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>semaphore <span class=\"k\">&lt;</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tconfig<span class=\"k\">.</span>semaphore <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","\t\t\tQUnit<span class=\"k\">.</span>pushFailure<span class=\"k\">(</span> <span class=\"s\">\"Called start() while already started (QUnit.config.semaphore was 0 already)\"</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> sourceFromStacktrace<span class=\"k\">(</span><span class=\"s\">2</span><span class=\"k\">)</span> <span class=\"k\">);</span>","\t\t\t<span class=\"k\">return</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","\t\t<span class=\"c\">// A slight delay, to avoid any current callbacks</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> defined<span class=\"k\">.</span>setTimeout <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\twindow<span class=\"k\">.</span>setTimeout<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>semaphore <span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">return</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>timeout <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\tclearTimeout<span class=\"k\">(</span> config<span class=\"k\">.</span>timeout <span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">}</span>","","\t\t\t\tconfig<span class=\"k\">.</span>blocking <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","\t\t\t\tprocess<span class=\"k\">(</span> <span class=\"k\">true</span> <span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"s\">13</span><span class=\"k\">);</span>","\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\tconfig<span class=\"k\">.</span>blocking <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","\t\t\tprocess<span class=\"k\">(</span> <span class=\"k\">true</span> <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\tstop<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> count <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tconfig<span class=\"k\">.</span>semaphore <span class=\"k\">+=</span> count <span class=\"k\">||</span> <span class=\"s\">1</span><span class=\"k\">;</span>","\t\tconfig<span class=\"k\">.</span>blocking <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>testTimeout <span class=\"k\">&amp;&amp;</span> defined<span class=\"k\">.</span>setTimeout <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tclearTimeout<span class=\"k\">(</span> config<span class=\"k\">.</span>timeout <span class=\"k\">);</span>","\t\t\tconfig<span class=\"k\">.</span>timeout <span class=\"k\">=</span> window<span class=\"k\">.</span>setTimeout<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\tQUnit<span class=\"k\">.</span>ok<span class=\"k\">(</span> <span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"s\">\"Test timed out\"</span> <span class=\"k\">);</span>","\t\t\t\tconfig<span class=\"k\">.</span>semaphore <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","\t\t\t\tQUnit<span class=\"k\">.</span>start<span class=\"k\">();</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span> config<span class=\"k\">.</span>testTimeout <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">// `assert` initialized at top of scope</span>","<span class=\"c\">// Assert helpers</span>","<span class=\"c\">// All of these must either call QUnit.push() or manually do:</span>","<span class=\"c\">// - runLoggingCallbacks( \"log\", .. );</span>","<span class=\"c\">// - config.current.assertions.push({ .. });</span>","<span class=\"c\">// We attach it to the QUnit object *after* we expose the public API,</span>","<span class=\"c\">// otherwise `assert` will become a global variable in browsers (#341).</span>","assert <span class=\"k\">=</span> <span class=\"k\">{</span>","\t<span class=\"c\">/**</span>","<span class=\"c\">\t * Asserts rough true-ish result.</span>","<span class=\"c\">\t * @name ok</span>","<span class=\"c\">\t * @function</span>","<span class=\"c\">\t * @example ok( \"asdfasdf\".length &gt; 5, \"There must be at least 5 chars\" );</span>","<span class=\"c\">\t */</span>","\tok<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> result<span class=\"k\">,</span> msg <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>config<span class=\"k\">.</span>current <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span> <span class=\"s\">\"ok() assertion outside test context, was \"</span> <span class=\"k\">+</span> sourceFromStacktrace<span class=\"k\">(</span><span class=\"s\">2</span><span class=\"k\">)</span> <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","\t\tresult <span class=\"k\">=</span> <span class=\"k\">!!</span>result<span class=\"k\">;</span>","","\t\t<span class=\"k\">var</span> source<span class=\"k\">,</span>","\t\t\tdetails <span class=\"k\">=</span> <span class=\"k\">{</span>","\t\t\t\tmodule<span class=\"k\">:</span> config<span class=\"k\">.</span>current<span class=\"k\">.</span>module<span class=\"k\">,</span>","\t\t\t\tname<span class=\"k\">:</span> config<span class=\"k\">.</span>current<span class=\"k\">.</span>testName<span class=\"k\">,</span>","\t\t\t\tresult<span class=\"k\">:</span> result<span class=\"k\">,</span>","\t\t\t\tmessage<span class=\"k\">:</span> msg","\t\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","","\t\tmsg <span class=\"k\">=</span> escapeText<span class=\"k\">(</span> msg <span class=\"k\">||</span> <span class=\"k\">(</span>result <span class=\"k\">?</span> <span class=\"s\">\"okay\"</span> <span class=\"k\">:</span> <span class=\"s\">\"failed\"</span> <span class=\"k\">)</span> <span class=\"k\">);</span>","\t\tmsg <span class=\"k\">=</span> <span class=\"s\">\"&lt;span class='test-message'&gt;\"</span> <span class=\"k\">+</span> msg <span class=\"k\">+</span> <span class=\"s\">\"&lt;/span&gt;\"</span><span class=\"k\">;</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>result <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tsource <span class=\"k\">=</span> sourceFromStacktrace<span class=\"k\">(</span> <span class=\"s\">2</span> <span class=\"k\">);</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> source <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tdetails<span class=\"k\">.</span>source <span class=\"k\">=</span> source<span class=\"k\">;</span>","\t\t\t\tmsg <span class=\"k\">+=</span> <span class=\"s\">\"&lt;table&gt;&lt;tr class='test-source'&gt;&lt;th&gt;Source: &lt;/th&gt;&lt;td&gt;&lt;pre&gt;\"</span> <span class=\"k\">+</span> escapeText<span class=\"k\">(</span> source <span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;\"</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span>","\t\trunLoggingCallbacks<span class=\"k\">(</span> <span class=\"s\">\"log\"</span><span class=\"k\">,</span> QUnit<span class=\"k\">,</span> details <span class=\"k\">);</span>","\t\tconfig<span class=\"k\">.</span>current<span class=\"k\">.</span>assertions<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">{</span>","\t\t\tresult<span class=\"k\">:</span> result<span class=\"k\">,</span>","\t\t\tmessage<span class=\"k\">:</span> msg","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\t<span class=\"c\">/**</span>","<span class=\"c\">\t * Assert that the first two arguments are equal, with an optional message.</span>","<span class=\"c\">\t * Prints out both actual and expected values.</span>","<span class=\"c\">\t * @name equal</span>","<span class=\"c\">\t * @function</span>","<span class=\"c\">\t * @example equal( format( \"Received {0} bytes.\", 2), \"Received 2 bytes.\", \"format() replaces {0} with next argument\" );</span>","<span class=\"c\">\t */</span>","\tequal<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"c\">/*jshint eqeqeq:false */</span>","\t\tQUnit<span class=\"k\">.</span>push<span class=\"k\">(</span> expected <span class=\"k\">==</span> actual<span class=\"k\">,</span> actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message <span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\t<span class=\"c\">/**</span>","<span class=\"c\">\t * @name notEqual</span>","<span class=\"c\">\t * @function</span>","<span class=\"c\">\t */</span>","\tnotEqual<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"c\">/*jshint eqeqeq:false */</span>","\t\tQUnit<span class=\"k\">.</span>push<span class=\"k\">(</span> expected <span class=\"k\">!=</span> actual<span class=\"k\">,</span> actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message <span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\t<span class=\"c\">/**</span>","<span class=\"c\">\t * @name propEqual</span>","<span class=\"c\">\t * @function</span>","<span class=\"c\">\t */</span>","\tpropEqual<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tactual <span class=\"k\">=</span> objectValues<span class=\"k\">(</span>actual<span class=\"k\">);</span>","\t\texpected <span class=\"k\">=</span> objectValues<span class=\"k\">(</span>expected<span class=\"k\">);</span>","\t\tQUnit<span class=\"k\">.</span>push<span class=\"k\">(</span> QUnit<span class=\"k\">.</span>equiv<span class=\"k\">(</span>actual<span class=\"k\">,</span> expected<span class=\"k\">),</span> actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message <span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\t<span class=\"c\">/**</span>","<span class=\"c\">\t * @name notPropEqual</span>","<span class=\"c\">\t * @function</span>","<span class=\"c\">\t */</span>","\tnotPropEqual<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tactual <span class=\"k\">=</span> objectValues<span class=\"k\">(</span>actual<span class=\"k\">);</span>","\t\texpected <span class=\"k\">=</span> objectValues<span class=\"k\">(</span>expected<span class=\"k\">);</span>","\t\tQUnit<span class=\"k\">.</span>push<span class=\"k\">(</span> <span class=\"k\">!</span>QUnit<span class=\"k\">.</span>equiv<span class=\"k\">(</span>actual<span class=\"k\">,</span> expected<span class=\"k\">),</span> actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message <span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\t<span class=\"c\">/**</span>","<span class=\"c\">\t * @name deepEqual</span>","<span class=\"c\">\t * @function</span>","<span class=\"c\">\t */</span>","\tdeepEqual<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tQUnit<span class=\"k\">.</span>push<span class=\"k\">(</span> QUnit<span class=\"k\">.</span>equiv<span class=\"k\">(</span>actual<span class=\"k\">,</span> expected<span class=\"k\">),</span> actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message <span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\t<span class=\"c\">/**</span>","<span class=\"c\">\t * @name notDeepEqual</span>","<span class=\"c\">\t * @function</span>","<span class=\"c\">\t */</span>","\tnotDeepEqual<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tQUnit<span class=\"k\">.</span>push<span class=\"k\">(</span> <span class=\"k\">!</span>QUnit<span class=\"k\">.</span>equiv<span class=\"k\">(</span>actual<span class=\"k\">,</span> expected<span class=\"k\">),</span> actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message <span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\t<span class=\"c\">/**</span>","<span class=\"c\">\t * @name strictEqual</span>","<span class=\"c\">\t * @function</span>","<span class=\"c\">\t */</span>","\tstrictEqual<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tQUnit<span class=\"k\">.</span>push<span class=\"k\">(</span> expected <span class=\"k\">===</span> actual<span class=\"k\">,</span> actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message <span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\t<span class=\"c\">/**</span>","<span class=\"c\">\t * @name notStrictEqual</span>","<span class=\"c\">\t * @function</span>","<span class=\"c\">\t */</span>","\tnotStrictEqual<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tQUnit<span class=\"k\">.</span>push<span class=\"k\">(</span> expected <span class=\"k\">!==</span> actual<span class=\"k\">,</span> actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message <span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\t<span class=\"s\">\"throws\"</span><span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> block<span class=\"k\">,</span> expected<span class=\"k\">,</span> message <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">var</span> actual<span class=\"k\">,</span>","\t\t\texpectedOutput <span class=\"k\">=</span> expected<span class=\"k\">,</span>","\t\t\tok <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","","\t\t<span class=\"c\">// 'expected' is optional</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">typeof</span> expected <span class=\"k\">===</span> <span class=\"s\">\"string\"</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tmessage <span class=\"k\">=</span> expected<span class=\"k\">;</span>","\t\t\texpected <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","","\t\tconfig<span class=\"k\">.</span>current<span class=\"k\">.</span>ignoreGlobalErrors <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","\t\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t\t\tblock<span class=\"k\">.</span>call<span class=\"k\">(</span> config<span class=\"k\">.</span>current<span class=\"k\">.</span>testEnvironment <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tactual <span class=\"k\">=</span> e<span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","\t\tconfig<span class=\"k\">.</span>current<span class=\"k\">.</span>ignoreGlobalErrors <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> actual <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"c\">// we don't want to validate thrown error</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>expected <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tok <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","\t\t\t\texpectedOutput <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","\t\t\t<span class=\"c\">// expected is a regexp</span>","\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> QUnit<span class=\"k\">.</span>objectType<span class=\"k\">(</span> expected <span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">\"regexp\"</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tok <span class=\"k\">=</span> expected<span class=\"k\">.</span>test<span class=\"k\">(</span> errorString<span class=\"k\">(</span> actual <span class=\"k\">)</span> <span class=\"k\">);</span>","\t\t\t<span class=\"c\">// expected is a constructor</span>","\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> actual <span class=\"k\">instanceof</span> expected <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tok <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","\t\t\t<span class=\"c\">// expected is a validation function which returns true is validation passed</span>","\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> expected<span class=\"k\">.</span>call<span class=\"k\">(</span> <span class=\"k\">{}</span><span class=\"k\">,</span> actual <span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"k\">true</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\texpectedOutput <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","\t\t\t\tok <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span>","","\t\t\tQUnit<span class=\"k\">.</span>push<span class=\"k\">(</span> ok<span class=\"k\">,</span> actual<span class=\"k\">,</span> expectedOutput<span class=\"k\">,</span> message <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\tQUnit<span class=\"k\">.</span>pushFailure<span class=\"k\">(</span> message<span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> <span class=\"s\">'No exception was thrown.'</span> <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @deprecate since 1.8.0</span>","<span class=\"c\"> * Kept assertion helpers in root for backwards compatibility.</span>","<span class=\"c\"> */</span>","extend<span class=\"k\">(</span> QUnit<span class=\"k\">,</span> assert <span class=\"k\">);</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @deprecated since 1.9.0</span>","<span class=\"c\"> * Kept root \"raises()\" for backwards compatibility.</span>","<span class=\"c\"> * (Note that we don't introduce assert.raises).</span>","<span class=\"c\"> */</span>","QUnit<span class=\"k\">.</span>raises <span class=\"k\">=</span> assert<span class=\"k\">[</span> <span class=\"s\">\"throws\"</span> <span class=\"k\">];</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @deprecated since 1.0.0, replaced with error pushes since 1.3.0</span>","<span class=\"c\"> * Kept to avoid TypeErrors for undefined methods.</span>","<span class=\"c\"> */</span>","QUnit<span class=\"k\">.</span>equals <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\tQUnit<span class=\"k\">.</span>push<span class=\"k\">(</span> <span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"s\">\"QUnit.equals has been deprecated since 2009 (e88049a0), use QUnit.equal instead\"</span> <span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","QUnit<span class=\"k\">.</span>same <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\tQUnit<span class=\"k\">.</span>push<span class=\"k\">(</span> <span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"s\">\"QUnit.same has been deprecated since 2009 (e88049a0), use QUnit.deepEqual instead\"</span> <span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">// We want access to the constructor's prototype</span>","<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t<span class=\"k\">function</span> F<span class=\"k\">()</span> <span class=\"k\">{}</span>","\tF<span class=\"k\">.</span>prototype <span class=\"k\">=</span> QUnit<span class=\"k\">;</span>","\tQUnit <span class=\"k\">=</span> <span class=\"k\">new</span> F<span class=\"k\">();</span>","\t<span class=\"c\">// Make F QUnit's constructor so that we can add to the prototype later</span>","\tQUnit<span class=\"k\">.</span>constructor <span class=\"k\">=</span> F<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">());</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Config object: Maintain internal state</span>","<span class=\"c\"> * Later exposed as QUnit.config</span>","<span class=\"c\"> * `config` initialized at top of scope</span>","<span class=\"c\"> */</span>","config <span class=\"k\">=</span> <span class=\"k\">{</span>","\t<span class=\"c\">// The queue of tests to run</span>","\tqueue<span class=\"k\">:</span> <span class=\"k\">[],</span>","","\t<span class=\"c\">// block until document ready</span>","\tblocking<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","","\t<span class=\"c\">// when enabled, show only failing tests</span>","\t<span class=\"c\">// gets persisted through sessionStorage and can be changed in UI via checkbox</span>","\thidepassed<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","","\t<span class=\"c\">// by default, run previously failed tests first</span>","\t<span class=\"c\">// very useful in combination with \"Hide passed tests\" checked</span>","\treorder<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","","\t<span class=\"c\">// by default, modify document.title when suite is done</span>","\taltertitle<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","","\t<span class=\"c\">// when enabled, all tests must call expect()</span>","\trequireExpects<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","","\t<span class=\"c\">// add checkboxes that are persisted in the query-string</span>","\t<span class=\"c\">// when enabled, the id is set to `true` as a `QUnit.config` property</span>","\turlConfig<span class=\"k\">:</span> <span class=\"k\">[</span>","\t\t<span class=\"k\">{</span>","\t\t\tid<span class=\"k\">:</span> <span class=\"s\">\"noglobals\"</span><span class=\"k\">,</span>","\t\t\tlabel<span class=\"k\">:</span> <span class=\"s\">\"Check for Globals\"</span><span class=\"k\">,</span>","\t\t\ttooltip<span class=\"k\">:</span> <span class=\"s\">\"Enabling this will test if any test introduces new properties on the `window` object. Stored as query-strings.\"</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t<span class=\"k\">{</span>","\t\t\tid<span class=\"k\">:</span> <span class=\"s\">\"notrycatch\"</span><span class=\"k\">,</span>","\t\t\tlabel<span class=\"k\">:</span> <span class=\"s\">\"No try-catch\"</span><span class=\"k\">,</span>","\t\t\ttooltip<span class=\"k\">:</span> <span class=\"s\">\"Enabling this will run tests outside of a try-catch block. Makes debugging exceptions in IE reasonable. Stored as query-strings.\"</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">],</span>","","\t<span class=\"c\">// Set of all modules.</span>","\tmodules<span class=\"k\">:</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","","\t<span class=\"c\">// logging callback queues</span>","\tbegin<span class=\"k\">:</span> <span class=\"k\">[],</span>","\tdone<span class=\"k\">:</span> <span class=\"k\">[],</span>","\tlog<span class=\"k\">:</span> <span class=\"k\">[],</span>","\ttestStart<span class=\"k\">:</span> <span class=\"k\">[],</span>","\ttestDone<span class=\"k\">:</span> <span class=\"k\">[],</span>","\tmoduleStart<span class=\"k\">:</span> <span class=\"k\">[],</span>","\tmoduleDone<span class=\"k\">:</span> <span class=\"k\">[]</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">// Export global variables, unless an 'exports' object exists,</span>","<span class=\"c\">// in that case we assume we're in CommonJS (dealt with on the bottom of the script)</span>","<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">typeof</span> exports <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\textend<span class=\"k\">(</span> window<span class=\"k\">,</span> QUnit <span class=\"k\">);</span>","","\t<span class=\"c\">// Expose QUnit object</span>","\twindow<span class=\"k\">.</span>QUnit <span class=\"k\">=</span> QUnit<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">// Initialize more QUnit.config and QUnit.urlParams</span>","<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t<span class=\"k\">var</span> i<span class=\"k\">,</span>","\t\tlocation <span class=\"k\">=</span> window<span class=\"k\">.</span>location <span class=\"k\">||</span> <span class=\"k\">{</span> search<span class=\"k\">:</span> <span class=\"s\">\"\"</span><span class=\"k\">,</span> protocol<span class=\"k\">:</span> <span class=\"s\">\"file:\"</span> <span class=\"k\">}</span><span class=\"k\">,</span>","\t\tparams <span class=\"k\">=</span> location<span class=\"k\">.</span>search<span class=\"k\">.</span>slice<span class=\"k\">(</span> <span class=\"s\">1</span> <span class=\"k\">).</span>split<span class=\"k\">(</span> <span class=\"s\">\"&amp;\"</span> <span class=\"k\">),</span>","\t\tlength <span class=\"k\">=</span> params<span class=\"k\">.</span>length<span class=\"k\">,</span>","\t\turlParams <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","\t\tcurrent<span class=\"k\">;</span>","","\t<span class=\"k\">if</span> <span class=\"k\">(</span> params<span class=\"k\">[</span> <span class=\"s\">0</span> <span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> length<span class=\"k\">;</span> i<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tcurrent <span class=\"k\">=</span> params<span class=\"k\">[</span> i <span class=\"k\">].</span>split<span class=\"k\">(</span> <span class=\"s\">\"=\"</span> <span class=\"k\">);</span>","\t\t\tcurrent<span class=\"k\">[</span> <span class=\"s\">0</span> <span class=\"k\">]</span> <span class=\"k\">=</span> decodeURIComponent<span class=\"k\">(</span> current<span class=\"k\">[</span> <span class=\"s\">0</span> <span class=\"k\">]</span> <span class=\"k\">);</span>","\t\t\t<span class=\"c\">// allow just a key to turn on a flag, e.g., test.html?noglobals</span>","\t\t\tcurrent<span class=\"k\">[</span> <span class=\"s\">1</span> <span class=\"k\">]</span> <span class=\"k\">=</span> current<span class=\"k\">[</span> <span class=\"s\">1</span> <span class=\"k\">]</span> <span class=\"k\">?</span> decodeURIComponent<span class=\"k\">(</span> current<span class=\"k\">[</span> <span class=\"s\">1</span> <span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">;</span>","\t\t\turlParams<span class=\"k\">[</span> current<span class=\"k\">[</span> <span class=\"s\">0</span> <span class=\"k\">]</span> <span class=\"k\">]</span> <span class=\"k\">=</span> current<span class=\"k\">[</span> <span class=\"s\">1</span> <span class=\"k\">];</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span>","","\tQUnit<span class=\"k\">.</span>urlParams <span class=\"k\">=</span> urlParams<span class=\"k\">;</span>","","\t<span class=\"c\">// String search anywhere in moduleName+testName</span>","\tconfig<span class=\"k\">.</span>filter <span class=\"k\">=</span> urlParams<span class=\"k\">.</span>filter<span class=\"k\">;</span>","","\t<span class=\"c\">// Exact match of the module name</span>","\tconfig<span class=\"k\">.</span>module <span class=\"k\">=</span> urlParams<span class=\"k\">.</span>module<span class=\"k\">;</span>","","\tconfig<span class=\"k\">.</span>testNumber <span class=\"k\">=</span> parseInt<span class=\"k\">(</span> urlParams<span class=\"k\">.</span>testNumber<span class=\"k\">,</span> <span class=\"s\">10</span> <span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"k\">null</span><span class=\"k\">;</span>","","\t<span class=\"c\">// Figure out if we're running the tests from a server or not</span>","\tQUnit<span class=\"k\">.</span>isLocal <span class=\"k\">=</span> location<span class=\"k\">.</span>protocol <span class=\"k\">===</span> <span class=\"s\">\"file:\"</span><span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">());</span>","","<span class=\"c\">// Extend QUnit object,</span>","<span class=\"c\">// these after set here because they should not be exposed as global functions</span>","extend<span class=\"k\">(</span> QUnit<span class=\"k\">,</span> <span class=\"k\">{</span>","\tassert<span class=\"k\">:</span> assert<span class=\"k\">,</span>","","\tconfig<span class=\"k\">:</span> config<span class=\"k\">,</span>","","\t<span class=\"c\">// Initialize the configuration options</span>","\tinit<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\textend<span class=\"k\">(</span> config<span class=\"k\">,</span> <span class=\"k\">{</span>","\t\t\tstats<span class=\"k\">:</span> <span class=\"k\">{</span> all<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span> bad<span class=\"k\">:</span> <span class=\"s\">0</span> <span class=\"k\">}</span><span class=\"k\">,</span>","\t\t\tmoduleStats<span class=\"k\">:</span> <span class=\"k\">{</span> all<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span> bad<span class=\"k\">:</span> <span class=\"s\">0</span> <span class=\"k\">}</span><span class=\"k\">,</span>","\t\t\tstarted<span class=\"k\">:</span> <span class=\"k\">+</span><span class=\"k\">new</span> Date<span class=\"k\">(),</span>","\t\t\tupdateRate<span class=\"k\">:</span> <span class=\"s\">1000</span><span class=\"k\">,</span>","\t\t\tblocking<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","\t\t\tautostart<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","\t\t\tautorun<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","\t\t\tfilter<span class=\"k\">:</span> <span class=\"s\">\"\"</span><span class=\"k\">,</span>","\t\t\tqueue<span class=\"k\">:</span> <span class=\"k\">[],</span>","\t\t\tsemaphore<span class=\"k\">:</span> <span class=\"s\">1</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","","\t\t<span class=\"k\">var</span> tests<span class=\"k\">,</span> banner<span class=\"k\">,</span> result<span class=\"k\">,</span>","\t\t\tqunit <span class=\"k\">=</span> id<span class=\"k\">(</span> <span class=\"s\">\"qunit\"</span> <span class=\"k\">);</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> qunit <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tqunit<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span>","\t\t\t\t<span class=\"s\">\"&lt;h1 id='qunit-header'&gt;\"</span> <span class=\"k\">+</span> escapeText<span class=\"k\">(</span> document<span class=\"k\">.</span>title <span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;/h1&gt;\"</span> <span class=\"k\">+</span>","\t\t\t\t<span class=\"s\">\"&lt;h2 id='qunit-banner'&gt;&lt;/h2&gt;\"</span> <span class=\"k\">+</span>","\t\t\t\t<span class=\"s\">\"&lt;div id='qunit-testrunner-toolbar'&gt;&lt;/div&gt;\"</span> <span class=\"k\">+</span>","\t\t\t\t<span class=\"s\">\"&lt;h2 id='qunit-userAgent'&gt;&lt;/h2&gt;\"</span> <span class=\"k\">+</span>","\t\t\t\t<span class=\"s\">\"&lt;ol id='qunit-tests'&gt;&lt;/ol&gt;\"</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","","\t\ttests <span class=\"k\">=</span> id<span class=\"k\">(</span> <span class=\"s\">\"qunit-tests\"</span> <span class=\"k\">);</span>","\t\tbanner <span class=\"k\">=</span> id<span class=\"k\">(</span> <span class=\"s\">\"qunit-banner\"</span> <span class=\"k\">);</span>","\t\tresult <span class=\"k\">=</span> id<span class=\"k\">(</span> <span class=\"s\">\"qunit-testresult\"</span> <span class=\"k\">);</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> tests <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\ttests<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> banner <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tbanner<span class=\"k\">.</span>className <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> result <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tresult<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>removeChild<span class=\"k\">(</span> result <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> tests <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tresult <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span> <span class=\"s\">\"p\"</span> <span class=\"k\">);</span>","\t\t\tresult<span class=\"k\">.</span>id <span class=\"k\">=</span> <span class=\"s\">\"qunit-testresult\"</span><span class=\"k\">;</span>","\t\t\tresult<span class=\"k\">.</span>className <span class=\"k\">=</span> <span class=\"s\">\"result\"</span><span class=\"k\">;</span>","\t\t\ttests<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>insertBefore<span class=\"k\">(</span> result<span class=\"k\">,</span> tests <span class=\"k\">);</span>","\t\t\tresult<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> <span class=\"s\">\"Running...&lt;br/&gt;&amp;nbsp;\"</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\t<span class=\"c\">// Resets the test setup. Useful for tests that modify the DOM.</span>","\treset<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">var</span> fixture <span class=\"k\">=</span> id<span class=\"k\">(</span> <span class=\"s\">\"qunit-fixture\"</span> <span class=\"k\">);</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> fixture <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tfixture<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> config<span class=\"k\">.</span>fixture<span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\t<span class=\"c\">// Trigger an event on an element.</span>","\t<span class=\"c\">// @example triggerEvent( document.body, \"click\" );</span>","\ttriggerEvent<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> elem<span class=\"k\">,</span> type<span class=\"k\">,</span> event <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> document<span class=\"k\">.</span>createEvent <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tevent <span class=\"k\">=</span> document<span class=\"k\">.</span>createEvent<span class=\"k\">(</span> <span class=\"s\">\"MouseEvents\"</span> <span class=\"k\">);</span>","\t\t\tevent<span class=\"k\">.</span>initMouseEvent<span class=\"k\">(</span>type<span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">,</span> elem<span class=\"k\">.</span>ownerDocument<span class=\"k\">.</span>defaultView<span class=\"k\">,</span>","\t\t\t\t<span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">);</span>","","\t\t\telem<span class=\"k\">.</span>dispatchEvent<span class=\"k\">(</span> event <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> elem<span class=\"k\">.</span>fireEvent <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\telem<span class=\"k\">.</span>fireEvent<span class=\"k\">(</span> <span class=\"s\">\"on\"</span> <span class=\"k\">+</span> type <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\t<span class=\"c\">// Safe object type checking</span>","\tis<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> type<span class=\"k\">,</span> obj <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">return</span> QUnit<span class=\"k\">.</span>objectType<span class=\"k\">(</span> obj <span class=\"k\">)</span> <span class=\"k\">===</span> type<span class=\"k\">;</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\tobjectType<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> obj <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">typeof</span> obj <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">return</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">;</span>","\t\t<span class=\"c\">// consider: typeof null === object</span>","\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> obj <span class=\"k\">===</span> <span class=\"k\">null</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">return</span> <span class=\"s\">\"null\"</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">var</span> match <span class=\"k\">=</span> toString<span class=\"k\">.</span>call<span class=\"k\">(</span> obj <span class=\"k\">).</span>match<span class=\"k\">(</span><span class=\"s\">/^\\[object\\s(.*)\\]$/</span><span class=\"k\">),</span>","\t\t\ttype <span class=\"k\">=</span> match <span class=\"k\">&amp;&amp;</span> match<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">||</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","","\t\t<span class=\"k\">switch</span> <span class=\"k\">(</span> type <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">case</span> <span class=\"s\">\"Number\"</span><span class=\"k\">:</span>","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> isNaN<span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">return</span> <span class=\"s\">\"nan\"</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t<span class=\"k\">return</span> <span class=\"s\">\"number\"</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">case</span> <span class=\"s\">\"String\"</span><span class=\"k\">:</span>","\t\t\t<span class=\"k\">case</span> <span class=\"s\">\"Boolean\"</span><span class=\"k\">:</span>","\t\t\t<span class=\"k\">case</span> <span class=\"s\">\"Array\"</span><span class=\"k\">:</span>","\t\t\t<span class=\"k\">case</span> <span class=\"s\">\"Date\"</span><span class=\"k\">:</span>","\t\t\t<span class=\"k\">case</span> <span class=\"s\">\"RegExp\"</span><span class=\"k\">:</span>","\t\t\t<span class=\"k\">case</span> <span class=\"s\">\"Function\"</span><span class=\"k\">:</span>","\t\t\t\t<span class=\"k\">return</span> type<span class=\"k\">.</span>toLowerCase<span class=\"k\">();</span>","\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">typeof</span> obj <span class=\"k\">===</span> <span class=\"s\">\"object\"</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">return</span> <span class=\"s\">\"object\"</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">return</span> undefined<span class=\"k\">;</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\tpush<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> result<span class=\"k\">,</span> actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>config<span class=\"k\">.</span>current <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span> <span class=\"s\">\"assertion outside test context, was \"</span> <span class=\"k\">+</span> sourceFromStacktrace<span class=\"k\">()</span> <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">var</span> output<span class=\"k\">,</span> source<span class=\"k\">,</span>","\t\t\tdetails <span class=\"k\">=</span> <span class=\"k\">{</span>","\t\t\t\tmodule<span class=\"k\">:</span> config<span class=\"k\">.</span>current<span class=\"k\">.</span>module<span class=\"k\">,</span>","\t\t\t\tname<span class=\"k\">:</span> config<span class=\"k\">.</span>current<span class=\"k\">.</span>testName<span class=\"k\">,</span>","\t\t\t\tresult<span class=\"k\">:</span> result<span class=\"k\">,</span>","\t\t\t\tmessage<span class=\"k\">:</span> message<span class=\"k\">,</span>","\t\t\t\tactual<span class=\"k\">:</span> actual<span class=\"k\">,</span>","\t\t\t\texpected<span class=\"k\">:</span> expected","\t\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","","\t\tmessage <span class=\"k\">=</span> escapeText<span class=\"k\">(</span> message <span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"k\">(</span> result <span class=\"k\">?</span> <span class=\"s\">\"okay\"</span> <span class=\"k\">:</span> <span class=\"s\">\"failed\"</span> <span class=\"k\">);</span>","\t\tmessage <span class=\"k\">=</span> <span class=\"s\">\"&lt;span class='test-message'&gt;\"</span> <span class=\"k\">+</span> message <span class=\"k\">+</span> <span class=\"s\">\"&lt;/span&gt;\"</span><span class=\"k\">;</span>","\t\toutput <span class=\"k\">=</span> message<span class=\"k\">;</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>result <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\texpected <span class=\"k\">=</span> escapeText<span class=\"k\">(</span> QUnit<span class=\"k\">.</span>jsDump<span class=\"k\">.</span>parse<span class=\"k\">(</span>expected<span class=\"k\">)</span> <span class=\"k\">);</span>","\t\t\tactual <span class=\"k\">=</span> escapeText<span class=\"k\">(</span> QUnit<span class=\"k\">.</span>jsDump<span class=\"k\">.</span>parse<span class=\"k\">(</span>actual<span class=\"k\">)</span> <span class=\"k\">);</span>","\t\t\toutput <span class=\"k\">+=</span> <span class=\"s\">\"&lt;table&gt;&lt;tr class='test-expected'&gt;&lt;th&gt;Expected: &lt;/th&gt;&lt;td&gt;&lt;pre&gt;\"</span> <span class=\"k\">+</span> expected <span class=\"k\">+</span> <span class=\"s\">\"&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;\"</span><span class=\"k\">;</span>","","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> actual <span class=\"k\">!==</span> expected <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\toutput <span class=\"k\">+=</span> <span class=\"s\">\"&lt;tr class='test-actual'&gt;&lt;th&gt;Result: &lt;/th&gt;&lt;td&gt;&lt;pre&gt;\"</span> <span class=\"k\">+</span> actual <span class=\"k\">+</span> <span class=\"s\">\"&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;\"</span><span class=\"k\">;</span>","\t\t\t\toutput <span class=\"k\">+=</span> <span class=\"s\">\"&lt;tr class='test-diff'&gt;&lt;th&gt;Diff: &lt;/th&gt;&lt;td&gt;&lt;pre&gt;\"</span> <span class=\"k\">+</span> QUnit<span class=\"k\">.</span>diff<span class=\"k\">(</span> expected<span class=\"k\">,</span> actual <span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;\"</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span>","","\t\t\tsource <span class=\"k\">=</span> sourceFromStacktrace<span class=\"k\">();</span>","","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> source <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tdetails<span class=\"k\">.</span>source <span class=\"k\">=</span> source<span class=\"k\">;</span>","\t\t\t\toutput <span class=\"k\">+=</span> <span class=\"s\">\"&lt;tr class='test-source'&gt;&lt;th&gt;Source: &lt;/th&gt;&lt;td&gt;&lt;pre&gt;\"</span> <span class=\"k\">+</span> escapeText<span class=\"k\">(</span> source <span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;\"</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span>","","\t\t\toutput <span class=\"k\">+=</span> <span class=\"s\">\"&lt;/table&gt;\"</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","","\t\trunLoggingCallbacks<span class=\"k\">(</span> <span class=\"s\">\"log\"</span><span class=\"k\">,</span> QUnit<span class=\"k\">,</span> details <span class=\"k\">);</span>","","\t\tconfig<span class=\"k\">.</span>current<span class=\"k\">.</span>assertions<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">{</span>","\t\t\tresult<span class=\"k\">:</span> <span class=\"k\">!!</span>result<span class=\"k\">,</span>","\t\t\tmessage<span class=\"k\">:</span> output","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\tpushFailure<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> message<span class=\"k\">,</span> source<span class=\"k\">,</span> actual <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>config<span class=\"k\">.</span>current <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span> <span class=\"s\">\"pushFailure() assertion outside test context, was \"</span> <span class=\"k\">+</span> sourceFromStacktrace<span class=\"k\">(</span><span class=\"s\">2</span><span class=\"k\">)</span> <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">var</span> output<span class=\"k\">,</span>","\t\t\tdetails <span class=\"k\">=</span> <span class=\"k\">{</span>","\t\t\t\tmodule<span class=\"k\">:</span> config<span class=\"k\">.</span>current<span class=\"k\">.</span>module<span class=\"k\">,</span>","\t\t\t\tname<span class=\"k\">:</span> config<span class=\"k\">.</span>current<span class=\"k\">.</span>testName<span class=\"k\">,</span>","\t\t\t\tresult<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","\t\t\t\tmessage<span class=\"k\">:</span> message","\t\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","","\t\tmessage <span class=\"k\">=</span> escapeText<span class=\"k\">(</span> message <span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"s\">\"error\"</span><span class=\"k\">;</span>","\t\tmessage <span class=\"k\">=</span> <span class=\"s\">\"&lt;span class='test-message'&gt;\"</span> <span class=\"k\">+</span> message <span class=\"k\">+</span> <span class=\"s\">\"&lt;/span&gt;\"</span><span class=\"k\">;</span>","\t\toutput <span class=\"k\">=</span> message<span class=\"k\">;</span>","","\t\toutput <span class=\"k\">+=</span> <span class=\"s\">\"&lt;table&gt;\"</span><span class=\"k\">;</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> actual <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\toutput <span class=\"k\">+=</span> <span class=\"s\">\"&lt;tr class='test-actual'&gt;&lt;th&gt;Result: &lt;/th&gt;&lt;td&gt;&lt;pre&gt;\"</span> <span class=\"k\">+</span> escapeText<span class=\"k\">(</span> actual <span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;\"</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> source <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tdetails<span class=\"k\">.</span>source <span class=\"k\">=</span> source<span class=\"k\">;</span>","\t\t\toutput <span class=\"k\">+=</span> <span class=\"s\">\"&lt;tr class='test-source'&gt;&lt;th&gt;Source: &lt;/th&gt;&lt;td&gt;&lt;pre&gt;\"</span> <span class=\"k\">+</span> escapeText<span class=\"k\">(</span> source <span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;\"</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","","\t\toutput <span class=\"k\">+=</span> <span class=\"s\">\"&lt;/table&gt;\"</span><span class=\"k\">;</span>","","\t\trunLoggingCallbacks<span class=\"k\">(</span> <span class=\"s\">\"log\"</span><span class=\"k\">,</span> QUnit<span class=\"k\">,</span> details <span class=\"k\">);</span>","","\t\tconfig<span class=\"k\">.</span>current<span class=\"k\">.</span>assertions<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">{</span>","\t\t\tresult<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","\t\t\tmessage<span class=\"k\">:</span> output","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\turl<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> params <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tparams <span class=\"k\">=</span> extend<span class=\"k\">(</span> extend<span class=\"k\">(</span> <span class=\"k\">{}</span><span class=\"k\">,</span> QUnit<span class=\"k\">.</span>urlParams <span class=\"k\">),</span> params <span class=\"k\">);</span>","\t\t<span class=\"k\">var</span> key<span class=\"k\">,</span>","\t\t\tquerystring <span class=\"k\">=</span> <span class=\"s\">\"?\"</span><span class=\"k\">;</span>","","\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> key <span class=\"k\">in</span> params <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>hasOwn<span class=\"k\">.</span>call<span class=\"k\">(</span> params<span class=\"k\">,</span> key <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">continue</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span>","\t\t\tquerystring <span class=\"k\">+=</span> encodeURIComponent<span class=\"k\">(</span> key <span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"=\"</span> <span class=\"k\">+</span>","\t\t\t\tencodeURIComponent<span class=\"k\">(</span> params<span class=\"k\">[</span> key <span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"&amp;\"</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">return</span> window<span class=\"k\">.</span>location<span class=\"k\">.</span>protocol <span class=\"k\">+</span> <span class=\"s\">\"//\"</span> <span class=\"k\">+</span> window<span class=\"k\">.</span>location<span class=\"k\">.</span>host <span class=\"k\">+</span>","\t\t\twindow<span class=\"k\">.</span>location<span class=\"k\">.</span>pathname <span class=\"k\">+</span> querystring<span class=\"k\">.</span>slice<span class=\"k\">(</span> <span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"k\">-</span><span class=\"s\">1</span> <span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\textend<span class=\"k\">:</span> extend<span class=\"k\">,</span>","\tid<span class=\"k\">:</span> id<span class=\"k\">,</span>","\taddEvent<span class=\"k\">:</span> addEvent<span class=\"k\">,</span>","\taddClass<span class=\"k\">:</span> addClass<span class=\"k\">,</span>","\thasClass<span class=\"k\">:</span> hasClass<span class=\"k\">,</span>","\tremoveClass<span class=\"k\">:</span> removeClass","\t<span class=\"c\">// load, equiv, jsDump, diff: Attached later</span>","<span class=\"k\">}</span><span class=\"k\">);</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @deprecated: Created for backwards compatibility with test runner that set the hook function</span>","<span class=\"c\"> * into QUnit.{hook}, instead of invoking it and passing the hook function.</span>","<span class=\"c\"> * QUnit.constructor is set to the empty F() above so that we can add to it's prototype here.</span>","<span class=\"c\"> * Doing this allows us to tell if the following methods have been overwritten on the actual</span>","<span class=\"c\"> * QUnit object.</span>","<span class=\"c\"> */</span>","extend<span class=\"k\">(</span> QUnit<span class=\"k\">.</span>constructor<span class=\"k\">.</span>prototype<span class=\"k\">,</span> <span class=\"k\">{</span>","","\t<span class=\"c\">// Logging callbacks; all receive a single argument with the listed properties</span>","\t<span class=\"c\">// run test/logs.html for any related changes</span>","\tbegin<span class=\"k\">:</span> registerLoggingCallback<span class=\"k\">(</span> <span class=\"s\">\"begin\"</span> <span class=\"k\">),</span>","","\t<span class=\"c\">// done: { failed, passed, total, runtime }</span>","\tdone<span class=\"k\">:</span> registerLoggingCallback<span class=\"k\">(</span> <span class=\"s\">\"done\"</span> <span class=\"k\">),</span>","","\t<span class=\"c\">// log: { result, actual, expected, message }</span>","\tlog<span class=\"k\">:</span> registerLoggingCallback<span class=\"k\">(</span> <span class=\"s\">\"log\"</span> <span class=\"k\">),</span>","","\t<span class=\"c\">// testStart: { name }</span>","\ttestStart<span class=\"k\">:</span> registerLoggingCallback<span class=\"k\">(</span> <span class=\"s\">\"testStart\"</span> <span class=\"k\">),</span>","","\t<span class=\"c\">// testDone: { name, failed, passed, total, duration }</span>","\ttestDone<span class=\"k\">:</span> registerLoggingCallback<span class=\"k\">(</span> <span class=\"s\">\"testDone\"</span> <span class=\"k\">),</span>","","\t<span class=\"c\">// moduleStart: { name }</span>","\tmoduleStart<span class=\"k\">:</span> registerLoggingCallback<span class=\"k\">(</span> <span class=\"s\">\"moduleStart\"</span> <span class=\"k\">),</span>","","\t<span class=\"c\">// moduleDone: { name, failed, passed, total }</span>","\tmoduleDone<span class=\"k\">:</span> registerLoggingCallback<span class=\"k\">(</span> <span class=\"s\">\"moduleDone\"</span> <span class=\"k\">)</span>","<span class=\"k\">}</span><span class=\"k\">);</span>","","<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">typeof</span> document <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">||</span> document<span class=\"k\">.</span>readyState <span class=\"k\">===</span> <span class=\"s\">\"complete\"</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\tconfig<span class=\"k\">.</span>autorun <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","QUnit<span class=\"k\">.</span>load <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\trunLoggingCallbacks<span class=\"k\">(</span> <span class=\"s\">\"begin\"</span><span class=\"k\">,</span> QUnit<span class=\"k\">,</span> <span class=\"k\">{}</span> <span class=\"k\">);</span>","","\t<span class=\"c\">// Initialize the config, saving the execution queue</span>","\t<span class=\"k\">var</span> banner<span class=\"k\">,</span> filter<span class=\"k\">,</span> i<span class=\"k\">,</span> label<span class=\"k\">,</span> len<span class=\"k\">,</span> main<span class=\"k\">,</span> ol<span class=\"k\">,</span> toolbar<span class=\"k\">,</span> userAgent<span class=\"k\">,</span> val<span class=\"k\">,</span>","\t\turlConfigCheckboxesContainer<span class=\"k\">,</span> urlConfigCheckboxes<span class=\"k\">,</span> moduleFilter<span class=\"k\">,</span>","\t\tnumModules <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span>","\t\tmoduleNames <span class=\"k\">=</span> <span class=\"k\">[],</span>","\t\tmoduleFilterHtml <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">,</span>","\t\turlConfigHtml <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">,</span>","\t\toldconfig <span class=\"k\">=</span> extend<span class=\"k\">(</span> <span class=\"k\">{}</span><span class=\"k\">,</span> config <span class=\"k\">);</span>","","\tQUnit<span class=\"k\">.</span>init<span class=\"k\">();</span>","\textend<span class=\"k\">(</span>config<span class=\"k\">,</span> oldconfig<span class=\"k\">);</span>","","\tconfig<span class=\"k\">.</span>blocking <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","","\tlen <span class=\"k\">=</span> config<span class=\"k\">.</span>urlConfig<span class=\"k\">.</span>length<span class=\"k\">;</span>","","\t<span class=\"k\">for</span> <span class=\"k\">(</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> len<span class=\"k\">;</span> i<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tval <span class=\"k\">=</span> config<span class=\"k\">.</span>urlConfig<span class=\"k\">[</span>i<span class=\"k\">];</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">typeof</span> val <span class=\"k\">===</span> <span class=\"s\">\"string\"</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tval <span class=\"k\">=</span> <span class=\"k\">{</span>","\t\t\t\tid<span class=\"k\">:</span> val<span class=\"k\">,</span>","\t\t\t\tlabel<span class=\"k\">:</span> val<span class=\"k\">,</span>","\t\t\t\ttooltip<span class=\"k\">:</span> <span class=\"s\">\"[no tooltip available]\"</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","\t\tconfig<span class=\"k\">[</span> val<span class=\"k\">.</span>id <span class=\"k\">]</span> <span class=\"k\">=</span> QUnit<span class=\"k\">.</span>urlParams<span class=\"k\">[</span> val<span class=\"k\">.</span>id <span class=\"k\">];</span>","\t\turlConfigHtml <span class=\"k\">+=</span> <span class=\"s\">\"&lt;input id='qunit-urlconfig-\"</span> <span class=\"k\">+</span> escapeText<span class=\"k\">(</span> val<span class=\"k\">.</span>id <span class=\"k\">)</span> <span class=\"k\">+</span>","\t\t\t<span class=\"s\">\"' name='\"</span> <span class=\"k\">+</span> escapeText<span class=\"k\">(</span> val<span class=\"k\">.</span>id <span class=\"k\">)</span> <span class=\"k\">+</span>","\t\t\t<span class=\"s\">\"' type='checkbox'\"</span> <span class=\"k\">+</span> <span class=\"k\">(</span> config<span class=\"k\">[</span> val<span class=\"k\">.</span>id <span class=\"k\">]</span> <span class=\"k\">?</span> <span class=\"s\">\" checked='checked'\"</span> <span class=\"k\">:</span> <span class=\"s\">\"\"</span> <span class=\"k\">)</span> <span class=\"k\">+</span>","\t\t\t<span class=\"s\">\" title='\"</span> <span class=\"k\">+</span> escapeText<span class=\"k\">(</span> val<span class=\"k\">.</span>tooltip <span class=\"k\">)</span> <span class=\"k\">+</span>","\t\t\t<span class=\"s\">\"'&gt;&lt;label for='qunit-urlconfig-\"</span> <span class=\"k\">+</span> escapeText<span class=\"k\">(</span> val<span class=\"k\">.</span>id <span class=\"k\">)</span> <span class=\"k\">+</span>","\t\t\t<span class=\"s\">\"' title='\"</span> <span class=\"k\">+</span> escapeText<span class=\"k\">(</span> val<span class=\"k\">.</span>tooltip <span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"'&gt;\"</span> <span class=\"k\">+</span> val<span class=\"k\">.</span>label <span class=\"k\">+</span> <span class=\"s\">\"&lt;/label&gt;\"</span><span class=\"k\">;</span>","\t<span class=\"k\">}</span>","\t<span class=\"k\">for</span> <span class=\"k\">(</span> i <span class=\"k\">in</span> config<span class=\"k\">.</span>modules <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>modules<span class=\"k\">.</span>hasOwnProperty<span class=\"k\">(</span> i <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tmoduleNames<span class=\"k\">.</span>push<span class=\"k\">(</span>i<span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span>","\tnumModules <span class=\"k\">=</span> moduleNames<span class=\"k\">.</span>length<span class=\"k\">;</span>","\tmoduleNames<span class=\"k\">.</span>sort<span class=\"k\">(</span> <span class=\"k\">function</span><span class=\"k\">(</span> a<span class=\"k\">,</span> b <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">return</span> a<span class=\"k\">.</span>localeCompare<span class=\"k\">(</span> b <span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">);</span>","\tmoduleFilterHtml <span class=\"k\">+=</span> <span class=\"s\">\"&lt;label for='qunit-modulefilter'&gt;Module: &lt;/label&gt;&lt;select id='qunit-modulefilter' name='modulefilter'&gt;&lt;option value='' \"</span> <span class=\"k\">+</span>","\t\t<span class=\"k\">(</span> config<span class=\"k\">.</span>module <span class=\"k\">===</span> undefined  <span class=\"k\">?</span> <span class=\"s\">\"selected='selected'\"</span> <span class=\"k\">:</span> <span class=\"s\">\"\"</span> <span class=\"k\">)</span> <span class=\"k\">+</span>","\t\t<span class=\"s\">\"&gt;&lt; All Modules &gt;&lt;/option&gt;\"</span><span class=\"k\">;</span>","","","\t<span class=\"k\">for</span> <span class=\"k\">(</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> numModules<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","\t\t\tmoduleFilterHtml <span class=\"k\">+=</span> <span class=\"s\">\"&lt;option value='\"</span> <span class=\"k\">+</span> escapeText<span class=\"k\">(</span> encodeURIComponent<span class=\"k\">(</span>moduleNames<span class=\"k\">[</span>i<span class=\"k\">])</span> <span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"' \"</span> <span class=\"k\">+</span>","\t\t\t\t<span class=\"k\">(</span> config<span class=\"k\">.</span>module <span class=\"k\">===</span> moduleNames<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">?</span> <span class=\"s\">\"selected='selected'\"</span> <span class=\"k\">:</span> <span class=\"s\">\"\"</span> <span class=\"k\">)</span> <span class=\"k\">+</span>","\t\t\t\t<span class=\"s\">\"&gt;\"</span> <span class=\"k\">+</span> escapeText<span class=\"k\">(</span>moduleNames<span class=\"k\">[</span>i<span class=\"k\">])</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;/option&gt;\"</span><span class=\"k\">;</span>","\t<span class=\"k\">}</span>","\tmoduleFilterHtml <span class=\"k\">+=</span> <span class=\"s\">\"&lt;/select&gt;\"</span><span class=\"k\">;</span>","","\t<span class=\"c\">// `userAgent` initialized at top of scope</span>","\tuserAgent <span class=\"k\">=</span> id<span class=\"k\">(</span> <span class=\"s\">\"qunit-userAgent\"</span> <span class=\"k\">);</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span> userAgent <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tuserAgent<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> navigator<span class=\"k\">.</span>userAgent<span class=\"k\">;</span>","\t<span class=\"k\">}</span>","","\t<span class=\"c\">// `banner` initialized at top of scope</span>","\tbanner <span class=\"k\">=</span> id<span class=\"k\">(</span> <span class=\"s\">\"qunit-header\"</span> <span class=\"k\">);</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span> banner <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tbanner<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> <span class=\"s\">\"&lt;a href='\"</span> <span class=\"k\">+</span> QUnit<span class=\"k\">.</span>url<span class=\"k\">(</span><span class=\"k\">{</span> filter<span class=\"k\">:</span> undefined<span class=\"k\">,</span> module<span class=\"k\">:</span> undefined<span class=\"k\">,</span> testNumber<span class=\"k\">:</span> undefined <span class=\"k\">}</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"'&gt;\"</span> <span class=\"k\">+</span> banner<span class=\"k\">.</span>innerHTML <span class=\"k\">+</span> <span class=\"s\">\"&lt;/a&gt; \"</span><span class=\"k\">;</span>","\t<span class=\"k\">}</span>","","\t<span class=\"c\">// `toolbar` initialized at top of scope</span>","\ttoolbar <span class=\"k\">=</span> id<span class=\"k\">(</span> <span class=\"s\">\"qunit-testrunner-toolbar\"</span> <span class=\"k\">);</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span> toolbar <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"c\">// `filter` initialized at top of scope</span>","\t\tfilter <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span> <span class=\"s\">\"input\"</span> <span class=\"k\">);</span>","\t\tfilter<span class=\"k\">.</span>type <span class=\"k\">=</span> <span class=\"s\">\"checkbox\"</span><span class=\"k\">;</span>","\t\tfilter<span class=\"k\">.</span>id <span class=\"k\">=</span> <span class=\"s\">\"qunit-filter-pass\"</span><span class=\"k\">;</span>","","\t\taddEvent<span class=\"k\">(</span> filter<span class=\"k\">,</span> <span class=\"s\">\"click\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">var</span> tmp<span class=\"k\">,</span>","\t\t\t\tol <span class=\"k\">=</span> document<span class=\"k\">.</span>getElementById<span class=\"k\">(</span> <span class=\"s\">\"qunit-tests\"</span> <span class=\"k\">);</span>","","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> filter<span class=\"k\">.</span>checked <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tol<span class=\"k\">.</span>className <span class=\"k\">=</span> ol<span class=\"k\">.</span>className <span class=\"k\">+</span> <span class=\"s\">\" hidepass\"</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t\ttmp <span class=\"k\">=</span> <span class=\"s\">\" \"</span> <span class=\"k\">+</span> ol<span class=\"k\">.</span>className<span class=\"k\">.</span>replace<span class=\"k\">(</span> <span class=\"s\">/[\\n\\t\\r]/g</span><span class=\"k\">,</span> <span class=\"s\">\" \"</span> <span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\" \"</span><span class=\"k\">;</span>","\t\t\t\tol<span class=\"k\">.</span>className <span class=\"k\">=</span> tmp<span class=\"k\">.</span>replace<span class=\"k\">(</span> <span class=\"s\">/ hidepass /</span><span class=\"k\">,</span> <span class=\"s\">\" \"</span> <span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> defined<span class=\"k\">.</span>sessionStorage <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>filter<span class=\"k\">.</span>checked<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\tsessionStorage<span class=\"k\">.</span>setItem<span class=\"k\">(</span> <span class=\"s\">\"qunit-filter-passed-tests\"</span><span class=\"k\">,</span> <span class=\"s\">\"true\"</span> <span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t\t\tsessionStorage<span class=\"k\">.</span>removeItem<span class=\"k\">(</span> <span class=\"s\">\"qunit-filter-passed-tests\"</span> <span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>hidepassed <span class=\"k\">||</span> defined<span class=\"k\">.</span>sessionStorage <span class=\"k\">&amp;&amp;</span> sessionStorage<span class=\"k\">.</span>getItem<span class=\"k\">(</span> <span class=\"s\">\"qunit-filter-passed-tests\"</span> <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tfilter<span class=\"k\">.</span>checked <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","\t\t\t<span class=\"c\">// `ol` initialized at top of scope</span>","\t\t\tol <span class=\"k\">=</span> document<span class=\"k\">.</span>getElementById<span class=\"k\">(</span> <span class=\"s\">\"qunit-tests\"</span> <span class=\"k\">);</span>","\t\t\tol<span class=\"k\">.</span>className <span class=\"k\">=</span> ol<span class=\"k\">.</span>className <span class=\"k\">+</span> <span class=\"s\">\" hidepass\"</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","\t\ttoolbar<span class=\"k\">.</span>appendChild<span class=\"k\">(</span> filter <span class=\"k\">);</span>","","\t\t<span class=\"c\">// `label` initialized at top of scope</span>","\t\tlabel <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span> <span class=\"s\">\"label\"</span> <span class=\"k\">);</span>","\t\tlabel<span class=\"k\">.</span>setAttribute<span class=\"k\">(</span> <span class=\"s\">\"for\"</span><span class=\"k\">,</span> <span class=\"s\">\"qunit-filter-pass\"</span> <span class=\"k\">);</span>","\t\tlabel<span class=\"k\">.</span>setAttribute<span class=\"k\">(</span> <span class=\"s\">\"title\"</span><span class=\"k\">,</span> <span class=\"s\">\"Only show tests and assertions that fail. Stored in sessionStorage.\"</span> <span class=\"k\">);</span>","\t\tlabel<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> <span class=\"s\">\"Hide passed tests\"</span><span class=\"k\">;</span>","\t\ttoolbar<span class=\"k\">.</span>appendChild<span class=\"k\">(</span> label <span class=\"k\">);</span>","","\t\turlConfigCheckboxesContainer <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"span\"</span><span class=\"k\">);</span>","\t\turlConfigCheckboxesContainer<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> urlConfigHtml<span class=\"k\">;</span>","\t\turlConfigCheckboxes <span class=\"k\">=</span> urlConfigCheckboxesContainer<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span><span class=\"s\">\"input\"</span><span class=\"k\">);</span>","\t\t<span class=\"c\">// For oldIE support:</span>","\t\t<span class=\"c\">// * Add handlers to the individual elements instead of the container</span>","\t\t<span class=\"c\">// * Use \"click\" instead of \"change\"</span>","\t\t<span class=\"c\">// * Fallback from event.target to event.srcElement</span>","\t\taddEvents<span class=\"k\">(</span> urlConfigCheckboxes<span class=\"k\">,</span> <span class=\"s\">\"click\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span> event <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">var</span> params <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","\t\t\t\ttarget <span class=\"k\">=</span> event<span class=\"k\">.</span>target <span class=\"k\">||</span> event<span class=\"k\">.</span>srcElement<span class=\"k\">;</span>","\t\t\tparams<span class=\"k\">[</span> target<span class=\"k\">.</span>name <span class=\"k\">]</span> <span class=\"k\">=</span> target<span class=\"k\">.</span>checked <span class=\"k\">?</span> <span class=\"k\">true</span> <span class=\"k\">:</span> undefined<span class=\"k\">;</span>","\t\t\twindow<span class=\"k\">.</span>location <span class=\"k\">=</span> QUnit<span class=\"k\">.</span>url<span class=\"k\">(</span> params <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\ttoolbar<span class=\"k\">.</span>appendChild<span class=\"k\">(</span> urlConfigCheckboxesContainer <span class=\"k\">);</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>numModules <span class=\"k\">&gt;</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tmoduleFilter <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span> <span class=\"s\">'span'</span> <span class=\"k\">);</span>","\t\t\tmoduleFilter<span class=\"k\">.</span>setAttribute<span class=\"k\">(</span> <span class=\"s\">'id'</span><span class=\"k\">,</span> <span class=\"s\">'qunit-modulefilter-container'</span> <span class=\"k\">);</span>","\t\t\tmoduleFilter<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> moduleFilterHtml<span class=\"k\">;</span>","\t\t\taddEvent<span class=\"k\">(</span> moduleFilter<span class=\"k\">.</span>lastChild<span class=\"k\">,</span> <span class=\"s\">\"change\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">var</span> selectBox <span class=\"k\">=</span> moduleFilter<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span><span class=\"s\">\"select\"</span><span class=\"k\">)[</span><span class=\"s\">0</span><span class=\"k\">],</span>","\t\t\t\t\tselectedModule <span class=\"k\">=</span> decodeURIComponent<span class=\"k\">(</span>selectBox<span class=\"k\">.</span>options<span class=\"k\">[</span>selectBox<span class=\"k\">.</span>selectedIndex<span class=\"k\">].</span>value<span class=\"k\">);</span>","","\t\t\t\twindow<span class=\"k\">.</span>location <span class=\"k\">=</span> QUnit<span class=\"k\">.</span>url<span class=\"k\">(</span> <span class=\"k\">{</span> module<span class=\"k\">:</span> <span class=\"k\">(</span> selectedModule <span class=\"k\">===</span> <span class=\"s\">\"\"</span> <span class=\"k\">)</span> <span class=\"k\">?</span> undefined <span class=\"k\">:</span> selectedModule <span class=\"k\">}</span> <span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t\ttoolbar<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>moduleFilter<span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span>","","\t<span class=\"c\">// `main` initialized at top of scope</span>","\tmain <span class=\"k\">=</span> id<span class=\"k\">(</span> <span class=\"s\">\"qunit-fixture\"</span> <span class=\"k\">);</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span> main <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tconfig<span class=\"k\">.</span>fixture <span class=\"k\">=</span> main<span class=\"k\">.</span>innerHTML<span class=\"k\">;</span>","\t<span class=\"k\">}</span>","","\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>autostart <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tQUnit<span class=\"k\">.</span>start<span class=\"k\">();</span>","\t<span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","addEvent<span class=\"k\">(</span> window<span class=\"k\">,</span> <span class=\"s\">\"load\"</span><span class=\"k\">,</span> QUnit<span class=\"k\">.</span>load <span class=\"k\">);</span>","","<span class=\"c\">// `onErrorFnPrev` initialized at top of scope</span>","<span class=\"c\">// Preserve other handlers</span>","onErrorFnPrev <span class=\"k\">=</span> window<span class=\"k\">.</span>onerror<span class=\"k\">;</span>","","<span class=\"c\">// Cover uncaught exceptions</span>","<span class=\"c\">// Returning true will suppress the default browser handler,</span>","<span class=\"c\">// returning false will let it run.</span>","window<span class=\"k\">.</span>onerror <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span> error<span class=\"k\">,</span> filePath<span class=\"k\">,</span> linerNr <span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">var</span> ret <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span> onErrorFnPrev <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tret <span class=\"k\">=</span> onErrorFnPrev<span class=\"k\">(</span> error<span class=\"k\">,</span> filePath<span class=\"k\">,</span> linerNr <span class=\"k\">);</span>","\t<span class=\"k\">}</span>","","\t<span class=\"c\">// Treat return value as window.onerror itself does,</span>","\t<span class=\"c\">// Only do our handling if not suppressed.</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span> ret <span class=\"k\">!==</span> <span class=\"k\">true</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> QUnit<span class=\"k\">.</span>config<span class=\"k\">.</span>current <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> QUnit<span class=\"k\">.</span>config<span class=\"k\">.</span>current<span class=\"k\">.</span>ignoreGlobalErrors <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span>","\t\t\tQUnit<span class=\"k\">.</span>pushFailure<span class=\"k\">(</span> error<span class=\"k\">,</span> filePath <span class=\"k\">+</span> <span class=\"s\">\":\"</span> <span class=\"k\">+</span> linerNr <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\tQUnit<span class=\"k\">.</span>test<span class=\"k\">(</span> <span class=\"s\">\"global failure\"</span><span class=\"k\">,</span> extend<span class=\"k\">(</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\tQUnit<span class=\"k\">.</span>pushFailure<span class=\"k\">(</span> error<span class=\"k\">,</span> filePath <span class=\"k\">+</span> <span class=\"s\">\":\"</span> <span class=\"k\">+</span> linerNr <span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span> validTest<span class=\"k\">:</span> validTest <span class=\"k\">}</span> <span class=\"k\">)</span> <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","\t<span class=\"k\">}</span>","","\t<span class=\"k\">return</span> ret<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"k\">function</span> done<span class=\"k\">()</span> <span class=\"k\">{</span>","\tconfig<span class=\"k\">.</span>autorun <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","","\t<span class=\"c\">// Log the last module results</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>currentModule <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\trunLoggingCallbacks<span class=\"k\">(</span> <span class=\"s\">\"moduleDone\"</span><span class=\"k\">,</span> QUnit<span class=\"k\">,</span> <span class=\"k\">{</span>","\t\t\tname<span class=\"k\">:</span> config<span class=\"k\">.</span>currentModule<span class=\"k\">,</span>","\t\t\tfailed<span class=\"k\">:</span> config<span class=\"k\">.</span>moduleStats<span class=\"k\">.</span>bad<span class=\"k\">,</span>","\t\t\tpassed<span class=\"k\">:</span> config<span class=\"k\">.</span>moduleStats<span class=\"k\">.</span>all <span class=\"k\">-</span> config<span class=\"k\">.</span>moduleStats<span class=\"k\">.</span>bad<span class=\"k\">,</span>","\t\t\ttotal<span class=\"k\">:</span> config<span class=\"k\">.</span>moduleStats<span class=\"k\">.</span>all","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span>","","\t<span class=\"k\">var</span> i<span class=\"k\">,</span> key<span class=\"k\">,</span>","\t\tbanner <span class=\"k\">=</span> id<span class=\"k\">(</span> <span class=\"s\">\"qunit-banner\"</span> <span class=\"k\">),</span>","\t\ttests <span class=\"k\">=</span> id<span class=\"k\">(</span> <span class=\"s\">\"qunit-tests\"</span> <span class=\"k\">),</span>","\t\truntime <span class=\"k\">=</span> <span class=\"k\">+</span><span class=\"k\">new</span> Date<span class=\"k\">()</span> <span class=\"k\">-</span> config<span class=\"k\">.</span>started<span class=\"k\">,</span>","\t\tpassed <span class=\"k\">=</span> config<span class=\"k\">.</span>stats<span class=\"k\">.</span>all <span class=\"k\">-</span> config<span class=\"k\">.</span>stats<span class=\"k\">.</span>bad<span class=\"k\">,</span>","\t\thtml <span class=\"k\">=</span> <span class=\"k\">[</span>","\t\t\t<span class=\"s\">\"Tests completed in \"</span><span class=\"k\">,</span>","\t\t\truntime<span class=\"k\">,</span>","\t\t\t<span class=\"s\">\" milliseconds.&lt;br/&gt;\"</span><span class=\"k\">,</span>","\t\t\t<span class=\"s\">\"&lt;span class='passed'&gt;\"</span><span class=\"k\">,</span>","\t\t\tpassed<span class=\"k\">,</span>","\t\t\t<span class=\"s\">\"&lt;/span&gt; assertions of &lt;span class='total'&gt;\"</span><span class=\"k\">,</span>","\t\t\tconfig<span class=\"k\">.</span>stats<span class=\"k\">.</span>all<span class=\"k\">,</span>","\t\t\t<span class=\"s\">\"&lt;/span&gt; passed, &lt;span class='failed'&gt;\"</span><span class=\"k\">,</span>","\t\t\tconfig<span class=\"k\">.</span>stats<span class=\"k\">.</span>bad<span class=\"k\">,</span>","\t\t\t<span class=\"s\">\"&lt;/span&gt; failed.\"</span>","\t\t<span class=\"k\">].</span>join<span class=\"k\">(</span> <span class=\"s\">\"\"</span> <span class=\"k\">);</span>","","\t<span class=\"k\">if</span> <span class=\"k\">(</span> banner <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tbanner<span class=\"k\">.</span>className <span class=\"k\">=</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>stats<span class=\"k\">.</span>bad <span class=\"k\">?</span> <span class=\"s\">\"qunit-fail\"</span> <span class=\"k\">:</span> <span class=\"s\">\"qunit-pass\"</span> <span class=\"k\">);</span>","\t<span class=\"k\">}</span>","","\t<span class=\"k\">if</span> <span class=\"k\">(</span> tests <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tid<span class=\"k\">(</span> <span class=\"s\">\"qunit-testresult\"</span> <span class=\"k\">).</span>innerHTML <span class=\"k\">=</span> html<span class=\"k\">;</span>","\t<span class=\"k\">}</span>","","\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>altertitle <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span> document <span class=\"k\">!==</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">&amp;&amp;</span> document<span class=\"k\">.</span>title <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"c\">// show &#226;&#156;&#150; for good, &#226;&#156;&#148; for bad suite result in title</span>","\t\t<span class=\"c\">// use escape sequences in case file gets loaded with non-utf-8-charset</span>","\t\tdocument<span class=\"k\">.</span>title <span class=\"k\">=</span> <span class=\"k\">[</span>","\t\t\t<span class=\"k\">(</span> config<span class=\"k\">.</span>stats<span class=\"k\">.</span>bad <span class=\"k\">?</span> <span class=\"s\">\"</span><span class=\"t\">\\u</span><span class=\"s\">2716\"</span> <span class=\"k\">:</span> <span class=\"s\">\"</span><span class=\"t\">\\u</span><span class=\"s\">2714\"</span> <span class=\"k\">),</span>","\t\t\tdocument<span class=\"k\">.</span>title<span class=\"k\">.</span>replace<span class=\"k\">(</span> <span class=\"s\">/^[\\u2714\\u2716] /i</span><span class=\"k\">,</span> <span class=\"s\">\"\"</span> <span class=\"k\">)</span>","\t\t<span class=\"k\">].</span>join<span class=\"k\">(</span> <span class=\"s\">\" \"</span> <span class=\"k\">);</span>","\t<span class=\"k\">}</span>","","\t<span class=\"c\">// clear own sessionStorage items if all tests passed</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>reorder <span class=\"k\">&amp;&amp;</span> defined<span class=\"k\">.</span>sessionStorage <span class=\"k\">&amp;&amp;</span> config<span class=\"k\">.</span>stats<span class=\"k\">.</span>bad <span class=\"k\">===</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"c\">// `key` &amp; `i` initialized at top of scope</span>","\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> sessionStorage<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tkey <span class=\"k\">=</span> sessionStorage<span class=\"k\">.</span>key<span class=\"k\">(</span> i<span class=\"k\">++</span> <span class=\"k\">);</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> key<span class=\"k\">.</span>indexOf<span class=\"k\">(</span> <span class=\"s\">\"qunit-test-\"</span> <span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tsessionStorage<span class=\"k\">.</span>removeItem<span class=\"k\">(</span> key <span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span>","","\t<span class=\"c\">// scroll back to top to show results</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span> window<span class=\"k\">.</span>scrollTo <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\twindow<span class=\"k\">.</span>scrollTo<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span>","","\trunLoggingCallbacks<span class=\"k\">(</span> <span class=\"s\">\"done\"</span><span class=\"k\">,</span> QUnit<span class=\"k\">,</span> <span class=\"k\">{</span>","\t\tfailed<span class=\"k\">:</span> config<span class=\"k\">.</span>stats<span class=\"k\">.</span>bad<span class=\"k\">,</span>","\t\tpassed<span class=\"k\">:</span> passed<span class=\"k\">,</span>","\t\ttotal<span class=\"k\">:</span> config<span class=\"k\">.</span>stats<span class=\"k\">.</span>all<span class=\"k\">,</span>","\t\truntime<span class=\"k\">:</span> runtime","\t<span class=\"k\">}</span><span class=\"k\">);</span>","<span class=\"k\">}</span>","","<span class=\"c\">/** @return Boolean: true if this test should be ran */</span>","<span class=\"k\">function</span> validTest<span class=\"k\">(</span> test <span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">var</span> include<span class=\"k\">,</span>","\t\tfilter <span class=\"k\">=</span> config<span class=\"k\">.</span>filter <span class=\"k\">&amp;&amp;</span> config<span class=\"k\">.</span>filter<span class=\"k\">.</span>toLowerCase<span class=\"k\">(),</span>","\t\tmodule <span class=\"k\">=</span> config<span class=\"k\">.</span>module <span class=\"k\">&amp;&amp;</span> config<span class=\"k\">.</span>module<span class=\"k\">.</span>toLowerCase<span class=\"k\">(),</span>","\t\tfullName <span class=\"k\">=</span> <span class=\"k\">(</span>test<span class=\"k\">.</span>module <span class=\"k\">+</span> <span class=\"s\">\": \"</span> <span class=\"k\">+</span> test<span class=\"k\">.</span>testName<span class=\"k\">).</span>toLowerCase<span class=\"k\">();</span>","","\t<span class=\"c\">// Internally-generated tests are always valid</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span> test<span class=\"k\">.</span>callback <span class=\"k\">&amp;&amp;</span> test<span class=\"k\">.</span>callback<span class=\"k\">.</span>validTest <span class=\"k\">===</span> validTest <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">delete</span> test<span class=\"k\">.</span>callback<span class=\"k\">.</span>validTest<span class=\"k\">;</span>","\t\t<span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","\t<span class=\"k\">}</span>","","\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>testNumber <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">return</span> test<span class=\"k\">.</span>testNumber <span class=\"k\">===</span> config<span class=\"k\">.</span>testNumber<span class=\"k\">;</span>","\t<span class=\"k\">}</span>","","\t<span class=\"k\">if</span> <span class=\"k\">(</span> module <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span> <span class=\"k\">!</span>test<span class=\"k\">.</span>module <span class=\"k\">||</span> test<span class=\"k\">.</span>module<span class=\"k\">.</span>toLowerCase<span class=\"k\">()</span> <span class=\"k\">!==</span> module <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","\t<span class=\"k\">}</span>","","\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>filter <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","\t<span class=\"k\">}</span>","","\tinclude <span class=\"k\">=</span> filter<span class=\"k\">.</span>charAt<span class=\"k\">(</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"s\">\"!\"</span><span class=\"k\">;</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>include <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tfilter <span class=\"k\">=</span> filter<span class=\"k\">.</span>slice<span class=\"k\">(</span> <span class=\"s\">1</span> <span class=\"k\">);</span>","\t<span class=\"k\">}</span>","","\t<span class=\"c\">// If the filter matches, we need to honour include</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span> fullName<span class=\"k\">.</span>indexOf<span class=\"k\">(</span> filter <span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"k\">-</span><span class=\"s\">1</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">return</span> include<span class=\"k\">;</span>","\t<span class=\"k\">}</span>","","\t<span class=\"c\">// Otherwise, do the opposite</span>","\t<span class=\"k\">return</span> <span class=\"k\">!</span>include<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">// so far supports only Firefox, Chrome and Opera (buggy), Safari (for real exceptions)</span>","<span class=\"c\">// Later Safari and IE10 are supposed to support error.stack as well</span>","<span class=\"c\">// See also https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error/Stack</span>","<span class=\"k\">function</span> extractStacktrace<span class=\"k\">(</span> e<span class=\"k\">,</span> offset <span class=\"k\">)</span> <span class=\"k\">{</span>","\toffset <span class=\"k\">=</span> offset <span class=\"k\">===</span> undefined <span class=\"k\">?</span> <span class=\"s\">3</span> <span class=\"k\">:</span> offset<span class=\"k\">;</span>","","\t<span class=\"k\">var</span> stack<span class=\"k\">,</span> include<span class=\"k\">,</span> i<span class=\"k\">;</span>","","\t<span class=\"k\">if</span> <span class=\"k\">(</span> e<span class=\"k\">.</span>stacktrace <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"c\">// Opera</span>","\t\t<span class=\"k\">return</span> e<span class=\"k\">.</span>stacktrace<span class=\"k\">.</span>split<span class=\"k\">(</span> <span class=\"s\">\"</span><span class=\"t\">\\n</span><span class=\"s\">\"</span> <span class=\"k\">)[</span> offset <span class=\"k\">+</span> <span class=\"s\">3</span> <span class=\"k\">];</span>","\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> e<span class=\"k\">.</span>stack <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"c\">// Firefox, Chrome</span>","\t\tstack <span class=\"k\">=</span> e<span class=\"k\">.</span>stack<span class=\"k\">.</span>split<span class=\"k\">(</span> <span class=\"s\">\"</span><span class=\"t\">\\n</span><span class=\"s\">\"</span> <span class=\"k\">);</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"s\">/^error$/i</span><span class=\"k\">.</span>test<span class=\"k\">(</span> stack<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tstack<span class=\"k\">.</span>shift<span class=\"k\">();</span>","\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> fileName <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tinclude <span class=\"k\">=</span> <span class=\"k\">[];</span>","\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> i <span class=\"k\">=</span> offset<span class=\"k\">;</span> i <span class=\"k\">&lt;</span> stack<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> stack<span class=\"k\">[</span> i <span class=\"k\">].</span>indexOf<span class=\"k\">(</span> fileName <span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"k\">-</span><span class=\"s\">1</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">break</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t\tinclude<span class=\"k\">.</span>push<span class=\"k\">(</span> stack<span class=\"k\">[</span> i <span class=\"k\">]</span> <span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> include<span class=\"k\">.</span>length <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">return</span> include<span class=\"k\">.</span>join<span class=\"k\">(</span> <span class=\"s\">\"</span><span class=\"t\">\\n</span><span class=\"s\">\"</span> <span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">return</span> stack<span class=\"k\">[</span> offset <span class=\"k\">];</span>","\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> e<span class=\"k\">.</span>sourceURL <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"c\">// Safari, PhantomJS</span>","\t\t<span class=\"c\">// hopefully one day Safari provides actual stacktraces</span>","\t\t<span class=\"c\">// exclude useless self-reference for generated Error objects</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"s\">/qunit.js$/</span><span class=\"k\">.</span>test<span class=\"k\">(</span> e<span class=\"k\">.</span>sourceURL <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">return</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","\t\t<span class=\"c\">// for actual exceptions, this is useful</span>","\t\t<span class=\"k\">return</span> e<span class=\"k\">.</span>sourceURL <span class=\"k\">+</span> <span class=\"s\">\":\"</span> <span class=\"k\">+</span> e<span class=\"k\">.</span>line<span class=\"k\">;</span>","\t<span class=\"k\">}</span>","<span class=\"k\">}</span>","<span class=\"k\">function</span> sourceFromStacktrace<span class=\"k\">(</span> offset <span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">();</span>","\t<span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span> e <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">return</span> extractStacktrace<span class=\"k\">(</span> e<span class=\"k\">,</span> offset <span class=\"k\">);</span>","\t<span class=\"k\">}</span>","<span class=\"k\">}</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Escape text for attribute or text content.</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> escapeText<span class=\"k\">(</span> s <span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>s <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">return</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","\t<span class=\"k\">}</span>","\ts <span class=\"k\">=</span> s <span class=\"k\">+</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","\t<span class=\"c\">// Both single quotes and double quotes (for attributes)</span>","\t<span class=\"k\">return</span> s<span class=\"k\">.</span>replace<span class=\"k\">(</span> <span class=\"s\">/['\"&lt;&gt;&amp;]/g</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span> s <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">switch</span><span class=\"k\">(</span> s <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">case</span> <span class=\"s\">'</span><span class=\"t\">\\'</span><span class=\"s\">'</span><span class=\"k\">:</span>","\t\t\t\t<span class=\"k\">return</span> <span class=\"s\">'&amp;#039;'</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">case</span> <span class=\"s\">'\"'</span><span class=\"k\">:</span>","\t\t\t\t<span class=\"k\">return</span> <span class=\"s\">'&amp;quot;'</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">case</span> <span class=\"s\">'&lt;'</span><span class=\"k\">:</span>","\t\t\t\t<span class=\"k\">return</span> <span class=\"s\">'&amp;lt;'</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">case</span> <span class=\"s\">'&gt;'</span><span class=\"k\">:</span>","\t\t\t\t<span class=\"k\">return</span> <span class=\"s\">'&amp;gt;'</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">case</span> <span class=\"s\">'&amp;'</span><span class=\"k\">:</span>","\t\t\t\t<span class=\"k\">return</span> <span class=\"s\">'&amp;amp;'</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">);</span>","<span class=\"k\">}</span>","","<span class=\"k\">function</span> synchronize<span class=\"k\">(</span> callback<span class=\"k\">,</span> last <span class=\"k\">)</span> <span class=\"k\">{</span>","\tconfig<span class=\"k\">.</span>queue<span class=\"k\">.</span>push<span class=\"k\">(</span> callback <span class=\"k\">);</span>","","\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>autorun <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>config<span class=\"k\">.</span>blocking <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tprocess<span class=\"k\">(</span> last <span class=\"k\">);</span>","\t<span class=\"k\">}</span>","<span class=\"k\">}</span>","","<span class=\"k\">function</span> process<span class=\"k\">(</span> last <span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">function</span> next<span class=\"k\">()</span> <span class=\"k\">{</span>","\t\tprocess<span class=\"k\">(</span> last <span class=\"k\">);</span>","\t<span class=\"k\">}</span>","\t<span class=\"k\">var</span> start <span class=\"k\">=</span> <span class=\"k\">new</span> Date<span class=\"k\">().</span>getTime<span class=\"k\">();</span>","\tconfig<span class=\"k\">.</span>depth <span class=\"k\">=</span> config<span class=\"k\">.</span>depth <span class=\"k\">?</span> config<span class=\"k\">.</span>depth <span class=\"k\">+</span> <span class=\"s\">1</span> <span class=\"k\">:</span> <span class=\"s\">1</span><span class=\"k\">;</span>","","\t<span class=\"k\">while</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>queue<span class=\"k\">.</span>length <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>config<span class=\"k\">.</span>blocking <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>defined<span class=\"k\">.</span>setTimeout <span class=\"k\">||</span> config<span class=\"k\">.</span>updateRate <span class=\"k\">&lt;=</span> <span class=\"s\">0</span> <span class=\"k\">||</span> <span class=\"k\">(</span> <span class=\"k\">(</span> <span class=\"k\">new</span> Date<span class=\"k\">().</span>getTime<span class=\"k\">()</span> <span class=\"k\">-</span> start <span class=\"k\">)</span> <span class=\"k\">&lt;</span> config<span class=\"k\">.</span>updateRate <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tconfig<span class=\"k\">.</span>queue<span class=\"k\">.</span>shift<span class=\"k\">()();</span>","\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\twindow<span class=\"k\">.</span>setTimeout<span class=\"k\">(</span> next<span class=\"k\">,</span> <span class=\"s\">13</span> <span class=\"k\">);</span>","\t\t\t<span class=\"k\">break</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span>","\tconfig<span class=\"k\">.</span>depth<span class=\"k\">--;</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span> last <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>config<span class=\"k\">.</span>blocking <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>config<span class=\"k\">.</span>queue<span class=\"k\">.</span>length <span class=\"k\">&amp;&amp;</span> config<span class=\"k\">.</span>depth <span class=\"k\">===</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tdone<span class=\"k\">();</span>","\t<span class=\"k\">}</span>","<span class=\"k\">}</span>","","<span class=\"k\">function</span> saveGlobal<span class=\"k\">()</span> <span class=\"k\">{</span>","\tconfig<span class=\"k\">.</span>pollution <span class=\"k\">=</span> <span class=\"k\">[];</span>","","\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>noglobals <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> <span class=\"k\">var</span> key <span class=\"k\">in</span> window <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"c\">// in Opera sometimes DOM element ids show up here, ignore them</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>hasOwn<span class=\"k\">.</span>call<span class=\"k\">(</span> window<span class=\"k\">,</span> key <span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"s\">/^qunit-test-output/</span><span class=\"k\">.</span>test<span class=\"k\">(</span> key <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">continue</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span>","\t\t\tconfig<span class=\"k\">.</span>pollution<span class=\"k\">.</span>push<span class=\"k\">(</span> key <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span>","<span class=\"k\">}</span>","","<span class=\"k\">function</span> checkPollution<span class=\"k\">()</span> <span class=\"k\">{</span>","\t<span class=\"k\">var</span> newGlobals<span class=\"k\">,</span>","\t\tdeletedGlobals<span class=\"k\">,</span>","\t\told <span class=\"k\">=</span> config<span class=\"k\">.</span>pollution<span class=\"k\">;</span>","","\tsaveGlobal<span class=\"k\">();</span>","","\tnewGlobals <span class=\"k\">=</span> diff<span class=\"k\">(</span> config<span class=\"k\">.</span>pollution<span class=\"k\">,</span> old <span class=\"k\">);</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span> newGlobals<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tQUnit<span class=\"k\">.</span>pushFailure<span class=\"k\">(</span> <span class=\"s\">\"Introduced global variable(s): \"</span> <span class=\"k\">+</span> newGlobals<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">\", \"</span><span class=\"k\">)</span> <span class=\"k\">);</span>","\t<span class=\"k\">}</span>","","\tdeletedGlobals <span class=\"k\">=</span> diff<span class=\"k\">(</span> old<span class=\"k\">,</span> config<span class=\"k\">.</span>pollution <span class=\"k\">);</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span> deletedGlobals<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tQUnit<span class=\"k\">.</span>pushFailure<span class=\"k\">(</span> <span class=\"s\">\"Deleted global variable(s): \"</span> <span class=\"k\">+</span> deletedGlobals<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">\", \"</span><span class=\"k\">)</span> <span class=\"k\">);</span>","\t<span class=\"k\">}</span>","<span class=\"k\">}</span>","","<span class=\"c\">// returns a new Array with the elements that are in a but not in b</span>","<span class=\"k\">function</span> diff<span class=\"k\">(</span> a<span class=\"k\">,</span> b <span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">var</span> i<span class=\"k\">,</span> j<span class=\"k\">,</span>","\t\tresult <span class=\"k\">=</span> a<span class=\"k\">.</span>slice<span class=\"k\">();</span>","","\t<span class=\"k\">for</span> <span class=\"k\">(</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> result<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> j <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> j <span class=\"k\">&lt;</span> b<span class=\"k\">.</span>length<span class=\"k\">;</span> j<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> result<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">===</span> b<span class=\"k\">[</span>j<span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tresult<span class=\"k\">.</span>splice<span class=\"k\">(</span> i<span class=\"k\">,</span> <span class=\"s\">1</span> <span class=\"k\">);</span>","\t\t\t\ti<span class=\"k\">--;</span>","\t\t\t\t<span class=\"k\">break</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span>","\t<span class=\"k\">return</span> result<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"k\">function</span> extend<span class=\"k\">(</span> a<span class=\"k\">,</span> b <span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">for</span> <span class=\"k\">(</span> <span class=\"k\">var</span> prop <span class=\"k\">in</span> b <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> b<span class=\"k\">[</span> prop <span class=\"k\">]</span> <span class=\"k\">===</span> undefined <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">delete</span> a<span class=\"k\">[</span> prop <span class=\"k\">];</span>","","\t\t<span class=\"c\">// Avoid \"Member not found\" error in IE8 caused by setting window.constructor</span>","\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> prop <span class=\"k\">!==</span> <span class=\"s\">\"constructor\"</span> <span class=\"k\">||</span> a <span class=\"k\">!==</span> window <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\ta<span class=\"k\">[</span> prop <span class=\"k\">]</span> <span class=\"k\">=</span> b<span class=\"k\">[</span> prop <span class=\"k\">];</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span>","","\t<span class=\"k\">return</span> a<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @param {HTMLElement} elem</span>","<span class=\"c\"> * @param {string} type</span>","<span class=\"c\"> * @param {Function} fn</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> addEvent<span class=\"k\">(</span> elem<span class=\"k\">,</span> type<span class=\"k\">,</span> fn <span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"c\">// Standards-based browsers</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span> elem<span class=\"k\">.</span>addEventListener <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\telem<span class=\"k\">.</span>addEventListener<span class=\"k\">(</span> type<span class=\"k\">,</span> fn<span class=\"k\">,</span> <span class=\"k\">false</span> <span class=\"k\">);</span>","\t<span class=\"c\">// IE</span>","\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\telem<span class=\"k\">.</span>attachEvent<span class=\"k\">(</span> <span class=\"s\">\"on\"</span> <span class=\"k\">+</span> type<span class=\"k\">,</span> fn <span class=\"k\">);</span>","\t<span class=\"k\">}</span>","<span class=\"k\">}</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @param {Array|NodeList} elems</span>","<span class=\"c\"> * @param {string} type</span>","<span class=\"c\"> * @param {Function} fn</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> addEvents<span class=\"k\">(</span> elems<span class=\"k\">,</span> type<span class=\"k\">,</span> fn <span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">var</span> i <span class=\"k\">=</span> elems<span class=\"k\">.</span>length<span class=\"k\">;</span>","\t<span class=\"k\">while</span> <span class=\"k\">(</span> i<span class=\"k\">--</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\taddEvent<span class=\"k\">(</span> elems<span class=\"k\">[</span>i<span class=\"k\">],</span> type<span class=\"k\">,</span> fn <span class=\"k\">);</span>","\t<span class=\"k\">}</span>","<span class=\"k\">}</span>","","<span class=\"k\">function</span> hasClass<span class=\"k\">(</span> elem<span class=\"k\">,</span> name <span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">return</span> <span class=\"k\">(</span><span class=\"s\">\" \"</span> <span class=\"k\">+</span> elem<span class=\"k\">.</span>className <span class=\"k\">+</span> <span class=\"s\">\" \"</span><span class=\"k\">).</span>indexOf<span class=\"k\">(</span><span class=\"s\">\" \"</span> <span class=\"k\">+</span> name <span class=\"k\">+</span> <span class=\"s\">\" \"</span><span class=\"k\">)</span> <span class=\"k\">&gt;</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"k\">function</span> addClass<span class=\"k\">(</span> elem<span class=\"k\">,</span> name <span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>hasClass<span class=\"k\">(</span> elem<span class=\"k\">,</span> name <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\telem<span class=\"k\">.</span>className <span class=\"k\">+=</span> <span class=\"k\">(</span>elem<span class=\"k\">.</span>className <span class=\"k\">?</span> <span class=\"s\">\" \"</span> <span class=\"k\">:</span> <span class=\"s\">\"\"</span><span class=\"k\">)</span> <span class=\"k\">+</span> name<span class=\"k\">;</span>","\t<span class=\"k\">}</span>","<span class=\"k\">}</span>","","<span class=\"k\">function</span> removeClass<span class=\"k\">(</span> elem<span class=\"k\">,</span> name <span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">var</span> set <span class=\"k\">=</span> <span class=\"s\">\" \"</span> <span class=\"k\">+</span> elem<span class=\"k\">.</span>className <span class=\"k\">+</span> <span class=\"s\">\" \"</span><span class=\"k\">;</span>","\t<span class=\"c\">// Class name may appear multiple times</span>","\t<span class=\"k\">while</span> <span class=\"k\">(</span> set<span class=\"k\">.</span>indexOf<span class=\"k\">(</span><span class=\"s\">\" \"</span> <span class=\"k\">+</span> name <span class=\"k\">+</span> <span class=\"s\">\" \"</span><span class=\"k\">)</span> <span class=\"k\">&gt;</span> <span class=\"k\">-</span><span class=\"s\">1</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tset <span class=\"k\">=</span> set<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">\" \"</span> <span class=\"k\">+</span> name <span class=\"k\">+</span> <span class=\"s\">\" \"</span> <span class=\"k\">,</span> <span class=\"s\">\" \"</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span>","\t<span class=\"c\">// If possible, trim it for prettiness, but not necessarily</span>","\telem<span class=\"k\">.</span>className <span class=\"k\">=</span> window<span class=\"k\">.</span>jQuery <span class=\"k\">?</span> jQuery<span class=\"k\">.</span>trim<span class=\"k\">(</span> set <span class=\"k\">)</span> <span class=\"k\">:</span> <span class=\"k\">(</span> set<span class=\"k\">.</span>trim <span class=\"k\">?</span> set<span class=\"k\">.</span>trim<span class=\"k\">()</span> <span class=\"k\">:</span> set <span class=\"k\">);</span>","<span class=\"k\">}</span>","","<span class=\"k\">function</span> id<span class=\"k\">(</span> name <span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">return</span> <span class=\"k\">!!(</span> <span class=\"k\">typeof</span> document <span class=\"k\">!==</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">&amp;&amp;</span> document <span class=\"k\">&amp;&amp;</span> document<span class=\"k\">.</span>getElementById <span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span>","\t\tdocument<span class=\"k\">.</span>getElementById<span class=\"k\">(</span> name <span class=\"k\">);</span>","<span class=\"k\">}</span>","","<span class=\"k\">function</span> registerLoggingCallback<span class=\"k\">(</span> key <span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">return</span> <span class=\"k\">function</span><span class=\"k\">(</span> callback <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tconfig<span class=\"k\">[</span>key<span class=\"k\">].</span>push<span class=\"k\">(</span> callback <span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">// Supports deprecated method of completely overwriting logging callbacks</span>","<span class=\"k\">function</span> runLoggingCallbacks<span class=\"k\">(</span> key<span class=\"k\">,</span> scope<span class=\"k\">,</span> args <span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">var</span> i<span class=\"k\">,</span> callbacks<span class=\"k\">;</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span> QUnit<span class=\"k\">.</span>hasOwnProperty<span class=\"k\">(</span> key <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tQUnit<span class=\"k\">[</span> key <span class=\"k\">].</span>call<span class=\"k\">(</span>scope<span class=\"k\">,</span> args <span class=\"k\">);</span>","\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\tcallbacks <span class=\"k\">=</span> config<span class=\"k\">[</span> key <span class=\"k\">];</span>","\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> callbacks<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tcallbacks<span class=\"k\">[</span> i <span class=\"k\">].</span>call<span class=\"k\">(</span> scope<span class=\"k\">,</span> args <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span>","<span class=\"k\">}</span>","","<span class=\"c\">// Test for equality any JavaScript type.</span>","<span class=\"c\">// Author: Philippe Rath&#195;&#169; &lt;prathe@gmail.com&gt;</span>","QUnit<span class=\"k\">.</span>equiv <span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","","\t<span class=\"c\">// Call the o related callback with the given arguments.</span>","\t<span class=\"k\">function</span> bindCallbacks<span class=\"k\">(</span> o<span class=\"k\">,</span> callbacks<span class=\"k\">,</span> args <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">var</span> prop <span class=\"k\">=</span> QUnit<span class=\"k\">.</span>objectType<span class=\"k\">(</span> o <span class=\"k\">);</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> prop <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> QUnit<span class=\"k\">.</span>objectType<span class=\"k\">(</span> callbacks<span class=\"k\">[</span> prop <span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">\"function\"</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">return</span> callbacks<span class=\"k\">[</span> prop <span class=\"k\">].</span>apply<span class=\"k\">(</span> callbacks<span class=\"k\">,</span> args <span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">return</span> callbacks<span class=\"k\">[</span> prop <span class=\"k\">];</span> <span class=\"c\">// or undefined</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span>","","\t<span class=\"c\">// the real equiv function</span>","\t<span class=\"k\">var</span> innerEquiv<span class=\"k\">,</span>","\t\t<span class=\"c\">// stack to decide between skip/abort functions</span>","\t\tcallers <span class=\"k\">=</span> <span class=\"k\">[],</span>","\t\t<span class=\"c\">// stack to avoiding loops from circular referencing</span>","\t\tparents <span class=\"k\">=</span> <span class=\"k\">[],</span>","\t\tparentsB <span class=\"k\">=</span> <span class=\"k\">[],</span>","","\t\tgetProto <span class=\"k\">=</span> Object<span class=\"k\">.</span>getPrototypeOf <span class=\"k\">||</span> <span class=\"k\">function</span> <span class=\"k\">(</span> obj <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">return</span> obj<span class=\"k\">.</span>__proto__<span class=\"k\">;</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\tcallbacks <span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","","\t\t\t<span class=\"c\">// for string, boolean, number and null</span>","\t\t\t<span class=\"k\">function</span> useStrictEquality<span class=\"k\">(</span> b<span class=\"k\">,</span> a <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"c\">/*jshint eqeqeq:false */</span>","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> b <span class=\"k\">instanceof</span> a<span class=\"k\">.</span>constructor <span class=\"k\">||</span> a <span class=\"k\">instanceof</span> b<span class=\"k\">.</span>constructor <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"c\">// to catch short annotation VS 'new' annotation of a</span>","\t\t\t\t\t<span class=\"c\">// declaration</span>","\t\t\t\t\t<span class=\"c\">// e.g. var i = 1;</span>","\t\t\t\t\t<span class=\"c\">// var j = new Number(1);</span>","\t\t\t\t\t<span class=\"k\">return</span> a <span class=\"k\">==</span> b<span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">return</span> a <span class=\"k\">===</span> b<span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t<span class=\"k\">}</span>","","\t\t\t<span class=\"k\">return</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"s\">\"string\"</span><span class=\"k\">:</span> useStrictEquality<span class=\"k\">,</span>","\t\t\t\t<span class=\"s\">\"boolean\"</span><span class=\"k\">:</span> useStrictEquality<span class=\"k\">,</span>","\t\t\t\t<span class=\"s\">\"number\"</span><span class=\"k\">:</span> useStrictEquality<span class=\"k\">,</span>","\t\t\t\t<span class=\"s\">\"null\"</span><span class=\"k\">:</span> useStrictEquality<span class=\"k\">,</span>","\t\t\t\t<span class=\"s\">\"undefined\"</span><span class=\"k\">:</span> useStrictEquality<span class=\"k\">,</span>","","\t\t\t\t<span class=\"s\">\"nan\"</span><span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> b <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">return</span> isNaN<span class=\"k\">(</span> b <span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\t\t\t\t<span class=\"s\">\"date\"</span><span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> b<span class=\"k\">,</span> a <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">return</span> QUnit<span class=\"k\">.</span>objectType<span class=\"k\">(</span> b <span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">\"date\"</span> <span class=\"k\">&amp;&amp;</span> a<span class=\"k\">.</span>valueOf<span class=\"k\">()</span> <span class=\"k\">===</span> b<span class=\"k\">.</span>valueOf<span class=\"k\">();</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\t\t\t\t<span class=\"s\">\"regexp\"</span><span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> b<span class=\"k\">,</span> a <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">return</span> QUnit<span class=\"k\">.</span>objectType<span class=\"k\">(</span> b <span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">\"regexp\"</span> <span class=\"k\">&amp;&amp;</span>","\t\t\t\t\t\t<span class=\"c\">// the regex itself</span>","\t\t\t\t\t\ta<span class=\"k\">.</span>source <span class=\"k\">===</span> b<span class=\"k\">.</span>source <span class=\"k\">&amp;&amp;</span>","\t\t\t\t\t\t<span class=\"c\">// and its modifiers</span>","\t\t\t\t\t\ta<span class=\"k\">.</span>global <span class=\"k\">===</span> b<span class=\"k\">.</span>global <span class=\"k\">&amp;&amp;</span>","\t\t\t\t\t\t<span class=\"c\">// (gmi) ...</span>","\t\t\t\t\t\ta<span class=\"k\">.</span>ignoreCase <span class=\"k\">===</span> b<span class=\"k\">.</span>ignoreCase <span class=\"k\">&amp;&amp;</span>","\t\t\t\t\t\ta<span class=\"k\">.</span>multiline <span class=\"k\">===</span> b<span class=\"k\">.</span>multiline <span class=\"k\">&amp;&amp;</span>","\t\t\t\t\t\ta<span class=\"k\">.</span>sticky <span class=\"k\">===</span> b<span class=\"k\">.</span>sticky<span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\t\t\t\t<span class=\"c\">// - skip when the property is a method of an instance (OOP)</span>","\t\t\t\t<span class=\"c\">// - abort otherwise,</span>","\t\t\t\t<span class=\"c\">// initial === would have catch identical references anyway</span>","\t\t\t\t<span class=\"s\">\"function\"</span><span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">var</span> caller <span class=\"k\">=</span> callers<span class=\"k\">[</span>callers<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">];</span>","\t\t\t\t\t<span class=\"k\">return</span> caller <span class=\"k\">!==</span> Object <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span> caller <span class=\"k\">!==</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\t\t\t\t<span class=\"s\">\"array\"</span><span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> b<span class=\"k\">,</span> a <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">var</span> i<span class=\"k\">,</span> j<span class=\"k\">,</span> len<span class=\"k\">,</span> loop<span class=\"k\">,</span> aCircular<span class=\"k\">,</span> bCircular<span class=\"k\">;</span>","","\t\t\t\t\t<span class=\"c\">// b could be an object literal here</span>","\t\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> QUnit<span class=\"k\">.</span>objectType<span class=\"k\">(</span> b <span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"s\">\"array\"</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\t<span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","\t\t\t\t\t<span class=\"k\">}</span>","","\t\t\t\t\tlen <span class=\"k\">=</span> a<span class=\"k\">.</span>length<span class=\"k\">;</span>","\t\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> len <span class=\"k\">!==</span> b<span class=\"k\">.</span>length <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\t<span class=\"c\">// safe and faster</span>","\t\t\t\t\t\t<span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","\t\t\t\t\t<span class=\"k\">}</span>","","\t\t\t\t\t<span class=\"c\">// track reference to avoid circular references</span>","\t\t\t\t\tparents<span class=\"k\">.</span>push<span class=\"k\">(</span> a <span class=\"k\">);</span>","\t\t\t\t\tparentsB<span class=\"k\">.</span>push<span class=\"k\">(</span> b <span class=\"k\">);</span>","\t\t\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> len<span class=\"k\">;</span> i<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\tloop <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","\t\t\t\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> j <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> j <span class=\"k\">&lt;</span> parents<span class=\"k\">.</span>length<span class=\"k\">;</span> j<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\t\taCircular <span class=\"k\">=</span> parents<span class=\"k\">[</span>j<span class=\"k\">]</span> <span class=\"k\">===</span> a<span class=\"k\">[</span>i<span class=\"k\">];</span>","\t\t\t\t\t\t\tbCircular <span class=\"k\">=</span> parentsB<span class=\"k\">[</span>j<span class=\"k\">]</span> <span class=\"k\">===</span> b<span class=\"k\">[</span>i<span class=\"k\">];</span>","\t\t\t\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> aCircular <span class=\"k\">||</span> bCircular <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> a<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">===</span> b<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">||</span> aCircular <span class=\"k\">&amp;&amp;</span> bCircular <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\t\t\t\tloop <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","\t\t\t\t\t\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t\t\t\t\t\t\tparents<span class=\"k\">.</span>pop<span class=\"k\">();</span>","\t\t\t\t\t\t\t\t\tparentsB<span class=\"k\">.</span>pop<span class=\"k\">();</span>","\t\t\t\t\t\t\t\t\t<span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","\t\t\t\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>loop <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>innerEquiv<span class=\"k\">(</span>a<span class=\"k\">[</span>i<span class=\"k\">],</span> b<span class=\"k\">[</span>i<span class=\"k\">])</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\t\tparents<span class=\"k\">.</span>pop<span class=\"k\">();</span>","\t\t\t\t\t\t\tparentsB<span class=\"k\">.</span>pop<span class=\"k\">();</span>","\t\t\t\t\t\t\t<span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","\t\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t\tparents<span class=\"k\">.</span>pop<span class=\"k\">();</span>","\t\t\t\t\tparentsB<span class=\"k\">.</span>pop<span class=\"k\">();</span>","\t\t\t\t\t<span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\t\t\t\t<span class=\"s\">\"object\"</span><span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> b<span class=\"k\">,</span> a <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">var</span> i<span class=\"k\">,</span> j<span class=\"k\">,</span> loop<span class=\"k\">,</span> aCircular<span class=\"k\">,</span> bCircular<span class=\"k\">,</span>","\t\t\t\t\t\t<span class=\"c\">// Default to true</span>","\t\t\t\t\t\teq <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">,</span>","\t\t\t\t\t\taProperties <span class=\"k\">=</span> <span class=\"k\">[],</span>","\t\t\t\t\t\tbProperties <span class=\"k\">=</span> <span class=\"k\">[];</span>","","\t\t\t\t\t<span class=\"c\">// comparing constructors is more strict than using</span>","\t\t\t\t\t<span class=\"c\">// instanceof</span>","\t\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> a<span class=\"k\">.</span>constructor <span class=\"k\">!==</span> b<span class=\"k\">.</span>constructor <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\t<span class=\"c\">// Allow objects with no prototype to be equivalent to</span>","\t\t\t\t\t\t<span class=\"c\">// objects with Object as their constructor.</span>","\t\t\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!((</span> getProto<span class=\"k\">(</span>a<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"k\">null</span> <span class=\"k\">&amp;&amp;</span> getProto<span class=\"k\">(</span>b<span class=\"k\">)</span> <span class=\"k\">===</span> Object<span class=\"k\">.</span>prototype <span class=\"k\">)</span> <span class=\"k\">||</span>","\t\t\t\t\t\t\t<span class=\"k\">(</span> getProto<span class=\"k\">(</span>b<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"k\">null</span> <span class=\"k\">&amp;&amp;</span> getProto<span class=\"k\">(</span>a<span class=\"k\">)</span> <span class=\"k\">===</span> Object<span class=\"k\">.</span>prototype <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\t\t\t<span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","\t\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t\t<span class=\"k\">}</span>","","\t\t\t\t\t<span class=\"c\">// stack constructor before traversing properties</span>","\t\t\t\t\tcallers<span class=\"k\">.</span>push<span class=\"k\">(</span> a<span class=\"k\">.</span>constructor <span class=\"k\">);</span>","","\t\t\t\t\t<span class=\"c\">// track reference to avoid circular references</span>","\t\t\t\t\tparents<span class=\"k\">.</span>push<span class=\"k\">(</span> a <span class=\"k\">);</span>","\t\t\t\t\tparentsB<span class=\"k\">.</span>push<span class=\"k\">(</span> b <span class=\"k\">);</span>","","\t\t\t\t\t<span class=\"c\">// be strict: don't ensures hasOwnProperty and go deep</span>","\t\t\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> i <span class=\"k\">in</span> a <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\tloop <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","\t\t\t\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> j <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> j <span class=\"k\">&lt;</span> parents<span class=\"k\">.</span>length<span class=\"k\">;</span> j<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\t\taCircular <span class=\"k\">=</span> parents<span class=\"k\">[</span>j<span class=\"k\">]</span> <span class=\"k\">===</span> a<span class=\"k\">[</span>i<span class=\"k\">];</span>","\t\t\t\t\t\t\tbCircular <span class=\"k\">=</span> parentsB<span class=\"k\">[</span>j<span class=\"k\">]</span> <span class=\"k\">===</span> b<span class=\"k\">[</span>i<span class=\"k\">];</span>","\t\t\t\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> aCircular <span class=\"k\">||</span> bCircular <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> a<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">===</span> b<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">||</span> aCircular <span class=\"k\">&amp;&amp;</span> bCircular <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\t\t\t\tloop <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","\t\t\t\t\t\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t\t\t\t\t\t\teq <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","\t\t\t\t\t\t\t\t\t<span class=\"k\">break</span><span class=\"k\">;</span>","\t\t\t\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t\t\taProperties<span class=\"k\">.</span>push<span class=\"k\">(</span>i<span class=\"k\">);</span>","\t\t\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>loop <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>innerEquiv<span class=\"k\">(</span>a<span class=\"k\">[</span>i<span class=\"k\">],</span> b<span class=\"k\">[</span>i<span class=\"k\">])</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\t\teq <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","\t\t\t\t\t\t\t<span class=\"k\">break</span><span class=\"k\">;</span>","\t\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t\t<span class=\"k\">}</span>","","\t\t\t\t\tparents<span class=\"k\">.</span>pop<span class=\"k\">();</span>","\t\t\t\t\tparentsB<span class=\"k\">.</span>pop<span class=\"k\">();</span>","\t\t\t\t\tcallers<span class=\"k\">.</span>pop<span class=\"k\">();</span> <span class=\"c\">// unstack, we are done</span>","","\t\t\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> i <span class=\"k\">in</span> b <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\tbProperties<span class=\"k\">.</span>push<span class=\"k\">(</span> i <span class=\"k\">);</span> <span class=\"c\">// collect b's properties</span>","\t\t\t\t\t<span class=\"k\">}</span>","","\t\t\t\t\t<span class=\"c\">// Ensures identical properties name</span>","\t\t\t\t\t<span class=\"k\">return</span> eq <span class=\"k\">&amp;&amp;</span> innerEquiv<span class=\"k\">(</span> aProperties<span class=\"k\">.</span>sort<span class=\"k\">(),</span> bProperties<span class=\"k\">.</span>sort<span class=\"k\">()</span> <span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span><span class=\"k\">());</span>","","\tinnerEquiv <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span> <span class=\"c\">// can take multiple arguments</span>","\t\t<span class=\"k\">var</span> args <span class=\"k\">=</span> <span class=\"k\">[].</span>slice<span class=\"k\">.</span>apply<span class=\"k\">(</span> arguments <span class=\"k\">);</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> args<span class=\"k\">.</span>length <span class=\"k\">&lt;</span> <span class=\"s\">2</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span> <span class=\"c\">// end transition</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">return</span> <span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span> a<span class=\"k\">,</span> b <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> a <span class=\"k\">===</span> b <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span> <span class=\"c\">// catch the most you can</span>","\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> a <span class=\"k\">===</span> <span class=\"k\">null</span> <span class=\"k\">||</span> b <span class=\"k\">===</span> <span class=\"k\">null</span> <span class=\"k\">||</span> <span class=\"k\">typeof</span> a <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">||</span>","\t\t\t\t\t<span class=\"k\">typeof</span> b <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">||</span>","\t\t\t\t\tQUnit<span class=\"k\">.</span>objectType<span class=\"k\">(</span>a<span class=\"k\">)</span> <span class=\"k\">!==</span> QUnit<span class=\"k\">.</span>objectType<span class=\"k\">(</span>b<span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"c\">// don't lose time with error prone cases</span>","\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">return</span> bindCallbacks<span class=\"k\">(</span>a<span class=\"k\">,</span> callbacks<span class=\"k\">,</span> <span class=\"k\">[</span> b<span class=\"k\">,</span> a <span class=\"k\">]);</span>","\t\t\t<span class=\"k\">}</span>","","\t\t\t<span class=\"c\">// apply transition with (1..n) arguments</span>","\t\t<span class=\"k\">}</span><span class=\"k\">(</span> args<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">],</span> args<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> arguments<span class=\"k\">.</span>callee<span class=\"k\">.</span>apply<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">,</span> args<span class=\"k\">.</span>splice<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">,</span> args<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span> <span class=\"k\">))</span> <span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">;</span>","","\t<span class=\"k\">return</span> innerEquiv<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">());</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * jsDump Copyright (c) 2008 Ariel Flesler - aflesler(at)gmail(dot)com |</span>","<span class=\"c\"> * http://flesler.blogspot.com Licensed under BSD</span>","<span class=\"c\"> * (http://www.opensource.org/licenses/bsd-license.php) Date: 5/15/2008</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @projectDescription Advanced and extensible data dumping for Javascript.</span>","<span class=\"c\"> * @version 1.0.0</span>","<span class=\"c\"> * @author Ariel Flesler</span>","<span class=\"c\"> * @link {http://flesler.blogspot.com/2008/05/jsdump-pretty-dump-of-any-javascript.html}</span>","<span class=\"c\"> */</span>","QUnit<span class=\"k\">.</span>jsDump <span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t<span class=\"k\">function</span> quote<span class=\"k\">(</span> str <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">return</span> <span class=\"s\">'\"'</span> <span class=\"k\">+</span> str<span class=\"k\">.</span>toString<span class=\"k\">().</span>replace<span class=\"k\">(</span> <span class=\"s\">/\"/g</span><span class=\"k\">,</span> <span class=\"s\">'</span><span class=\"t\">\\\\</span><span class=\"s\">\"'</span> <span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">'\"'</span><span class=\"k\">;</span>","\t<span class=\"k\">}</span>","\t<span class=\"k\">function</span> literal<span class=\"k\">(</span> o <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">return</span> o <span class=\"k\">+</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","\t<span class=\"k\">}</span>","\t<span class=\"k\">function</span> join<span class=\"k\">(</span> pre<span class=\"k\">,</span> arr<span class=\"k\">,</span> post <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">var</span> s <span class=\"k\">=</span> jsDump<span class=\"k\">.</span>separator<span class=\"k\">(),</span>","\t\t\tbase <span class=\"k\">=</span> jsDump<span class=\"k\">.</span>indent<span class=\"k\">(),</span>","\t\t\tinner <span class=\"k\">=</span> jsDump<span class=\"k\">.</span>indent<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">);</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> arr<span class=\"k\">.</span>join <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tarr <span class=\"k\">=</span> arr<span class=\"k\">.</span>join<span class=\"k\">(</span> <span class=\"s\">\",\"</span> <span class=\"k\">+</span> s <span class=\"k\">+</span> inner <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>arr <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">return</span> pre <span class=\"k\">+</span> post<span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">return</span> <span class=\"k\">[</span> pre<span class=\"k\">,</span> inner <span class=\"k\">+</span> arr<span class=\"k\">,</span> base <span class=\"k\">+</span> post <span class=\"k\">].</span>join<span class=\"k\">(</span>s<span class=\"k\">);</span>","\t<span class=\"k\">}</span>","\t<span class=\"k\">function</span> array<span class=\"k\">(</span> arr<span class=\"k\">,</span> stack <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">var</span> i <span class=\"k\">=</span> arr<span class=\"k\">.</span>length<span class=\"k\">,</span> ret <span class=\"k\">=</span> <span class=\"k\">new</span> Array<span class=\"k\">(</span>i<span class=\"k\">);</span>","\t\t<span class=\"k\">this</span><span class=\"k\">.</span>up<span class=\"k\">();</span>","\t\t<span class=\"k\">while</span> <span class=\"k\">(</span> i<span class=\"k\">--</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tret<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>parse<span class=\"k\">(</span> arr<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">,</span> undefined <span class=\"k\">,</span> stack<span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">this</span><span class=\"k\">.</span>down<span class=\"k\">();</span>","\t\t<span class=\"k\">return</span> join<span class=\"k\">(</span> <span class=\"s\">\"[\"</span><span class=\"k\">,</span> ret<span class=\"k\">,</span> <span class=\"s\">\"]\"</span> <span class=\"k\">);</span>","\t<span class=\"k\">}</span>","","\t<span class=\"k\">var</span> reName <span class=\"k\">=</span> <span class=\"s\">/^function (\\w+)/</span><span class=\"k\">,</span>","\t\tjsDump <span class=\"k\">=</span> <span class=\"k\">{</span>","\t\t\t<span class=\"c\">// type is used mostly internally, you can fix a (custom)type in advance</span>","\t\t\tparse<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> obj<span class=\"k\">,</span> type<span class=\"k\">,</span> stack <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tstack <span class=\"k\">=</span> stack <span class=\"k\">||</span> <span class=\"k\">[</span> <span class=\"k\">];</span>","\t\t\t\t<span class=\"k\">var</span> inStack<span class=\"k\">,</span> res<span class=\"k\">,</span>","\t\t\t\t\tparser <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>parsers<span class=\"k\">[</span> type <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">.</span>typeOf<span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">];</span>","","\t\t\t\ttype <span class=\"k\">=</span> <span class=\"k\">typeof</span> parser<span class=\"k\">;</span>","\t\t\t\tinStack <span class=\"k\">=</span> inArray<span class=\"k\">(</span> obj<span class=\"k\">,</span> stack <span class=\"k\">);</span>","","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> inStack <span class=\"k\">!==</span> <span class=\"k\">-</span><span class=\"s\">1</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">return</span> <span class=\"s\">\"recursion(\"</span> <span class=\"k\">+</span> <span class=\"k\">(</span>inStack <span class=\"k\">-</span> stack<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\")\"</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> type <span class=\"k\">===</span> <span class=\"s\">\"function\"</span> <span class=\"k\">)</span>  <span class=\"k\">{</span>","\t\t\t\t\tstack<span class=\"k\">.</span>push<span class=\"k\">(</span> obj <span class=\"k\">);</span>","\t\t\t\t\tres <span class=\"k\">=</span> parser<span class=\"k\">.</span>call<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">,</span> obj<span class=\"k\">,</span> stack <span class=\"k\">);</span>","\t\t\t\t\tstack<span class=\"k\">.</span>pop<span class=\"k\">();</span>","\t\t\t\t\t<span class=\"k\">return</span> res<span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t<span class=\"k\">return</span> <span class=\"k\">(</span> type <span class=\"k\">===</span> <span class=\"s\">\"string\"</span> <span class=\"k\">)</span> <span class=\"k\">?</span> parser <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>parsers<span class=\"k\">.</span>error<span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t\ttypeOf<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> obj <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">var</span> type<span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> obj <span class=\"k\">===</span> <span class=\"k\">null</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\ttype <span class=\"k\">=</span> <span class=\"s\">\"null\"</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">typeof</span> obj <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\ttype <span class=\"k\">=</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> QUnit<span class=\"k\">.</span>is<span class=\"k\">(</span> <span class=\"s\">\"regexp\"</span><span class=\"k\">,</span> obj<span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\ttype <span class=\"k\">=</span> <span class=\"s\">\"regexp\"</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> QUnit<span class=\"k\">.</span>is<span class=\"k\">(</span> <span class=\"s\">\"date\"</span><span class=\"k\">,</span> obj<span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\ttype <span class=\"k\">=</span> <span class=\"s\">\"date\"</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> QUnit<span class=\"k\">.</span>is<span class=\"k\">(</span> <span class=\"s\">\"function\"</span><span class=\"k\">,</span> obj<span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\ttype <span class=\"k\">=</span> <span class=\"s\">\"function\"</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">typeof</span> obj<span class=\"k\">.</span>setInterval <span class=\"k\">!==</span> undefined <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span> obj<span class=\"k\">.</span>document <span class=\"k\">!==</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span> obj<span class=\"k\">.</span>nodeType <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\ttype <span class=\"k\">=</span> <span class=\"s\">\"window\"</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> obj<span class=\"k\">.</span>nodeType <span class=\"k\">===</span> <span class=\"s\">9</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\ttype <span class=\"k\">=</span> <span class=\"s\">\"document\"</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> obj<span class=\"k\">.</span>nodeType <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\ttype <span class=\"k\">=</span> <span class=\"s\">\"node\"</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>","\t\t\t\t\t<span class=\"c\">// native arrays</span>","\t\t\t\t\ttoString<span class=\"k\">.</span>call<span class=\"k\">(</span> obj <span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">\"[object Array]\"</span> <span class=\"k\">||</span>","\t\t\t\t\t<span class=\"c\">// NodeList objects</span>","\t\t\t\t\t<span class=\"k\">(</span> <span class=\"k\">typeof</span> obj<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">\"number\"</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span> obj<span class=\"k\">.</span>item <span class=\"k\">!==</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span> obj<span class=\"k\">.</span>length <span class=\"k\">?</span> obj<span class=\"k\">.</span>item<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">===</span> obj<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">:</span> <span class=\"k\">(</span> obj<span class=\"k\">.</span>item<span class=\"k\">(</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"k\">null</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span> obj<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">)</span>","\t\t\t\t<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\ttype <span class=\"k\">=</span> <span class=\"s\">\"array\"</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> obj<span class=\"k\">.</span>constructor <span class=\"k\">===</span> Error<span class=\"k\">.</span>prototype<span class=\"k\">.</span>constructor <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\ttype <span class=\"k\">=</span> <span class=\"s\">\"error\"</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t\t\ttype <span class=\"k\">=</span> <span class=\"k\">typeof</span> obj<span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t<span class=\"k\">return</span> type<span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t\tseparator<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>multiline <span class=\"k\">?</span>\t<span class=\"k\">this</span><span class=\"k\">.</span>HTML <span class=\"k\">?</span> <span class=\"s\">\"&lt;br /&gt;\"</span> <span class=\"k\">:</span> <span class=\"s\">\"</span><span class=\"t\">\\n</span><span class=\"s\">\"</span> <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>HTML <span class=\"k\">?</span> <span class=\"s\">\"&amp;nbsp;\"</span> <span class=\"k\">:</span> <span class=\"s\">\" \"</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t\t<span class=\"c\">// extra can be a number, shortcut for increasing-calling-decreasing</span>","\t\t\tindent<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> extra <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>multiline <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">return</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t<span class=\"k\">var</span> chr <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>indentChar<span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>HTML <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\tchr <span class=\"k\">=</span> chr<span class=\"k\">.</span>replace<span class=\"k\">(</span> <span class=\"s\">/\\t/g</span><span class=\"k\">,</span> <span class=\"s\">\"   \"</span> <span class=\"k\">).</span>replace<span class=\"k\">(</span> <span class=\"s\">/ /g</span><span class=\"k\">,</span> <span class=\"s\">\"&amp;nbsp;\"</span> <span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t<span class=\"k\">return</span> <span class=\"k\">new</span> Array<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>_depth_ <span class=\"k\">+</span> <span class=\"k\">(</span>extra<span class=\"k\">||</span><span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">).</span>join<span class=\"k\">(</span>chr<span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t\tup<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> a <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">this</span><span class=\"k\">.</span>_depth_ <span class=\"k\">+=</span> a <span class=\"k\">||</span> <span class=\"s\">1</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t\tdown<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> a <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">this</span><span class=\"k\">.</span>_depth_ <span class=\"k\">-=</span> a <span class=\"k\">||</span> <span class=\"s\">1</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t\tsetParser<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> name<span class=\"k\">,</span> parser <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">this</span><span class=\"k\">.</span>parsers<span class=\"k\">[</span>name<span class=\"k\">]</span> <span class=\"k\">=</span> parser<span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t\t<span class=\"c\">// The next 3 are exposed so you can use them</span>","\t\t\tquote<span class=\"k\">:</span> quote<span class=\"k\">,</span>","\t\t\tliteral<span class=\"k\">:</span> literal<span class=\"k\">,</span>","\t\t\tjoin<span class=\"k\">:</span> join<span class=\"k\">,</span>","\t\t\t<span class=\"c\">//</span>","\t\t\t_depth_<span class=\"k\">:</span> <span class=\"s\">1</span><span class=\"k\">,</span>","\t\t\t<span class=\"c\">// This is the list of parsers, to modify them, use jsDump.setParser</span>","\t\t\tparsers<span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\t\twindow<span class=\"k\">:</span> <span class=\"s\">\"[Window]\"</span><span class=\"k\">,</span>","\t\t\t\tdocument<span class=\"k\">:</span> <span class=\"s\">\"[Document]\"</span><span class=\"k\">,</span>","\t\t\t\terror<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>error<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">return</span> <span class=\"s\">\"Error(</span><span class=\"t\">\\\"</span><span class=\"s\">\"</span> <span class=\"k\">+</span> error<span class=\"k\">.</span>message <span class=\"k\">+</span> <span class=\"s\">\"</span><span class=\"t\">\\\"</span><span class=\"s\">)\"</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t\t\tunknown<span class=\"k\">:</span> <span class=\"s\">\"[Unknown]\"</span><span class=\"k\">,</span>","\t\t\t\t<span class=\"s\">\"null\"</span><span class=\"k\">:</span> <span class=\"s\">\"null\"</span><span class=\"k\">,</span>","\t\t\t\t<span class=\"s\">\"undefined\"</span><span class=\"k\">:</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">,</span>","\t\t\t\t<span class=\"s\">\"function\"</span><span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> fn <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">var</span> ret <span class=\"k\">=</span> <span class=\"s\">\"function\"</span><span class=\"k\">,</span>","\t\t\t\t\t\t<span class=\"c\">// functions never have name in IE</span>","\t\t\t\t\t\tname <span class=\"k\">=</span> <span class=\"s\">\"name\"</span> <span class=\"k\">in</span> fn <span class=\"k\">?</span> fn<span class=\"k\">.</span>name <span class=\"k\">:</span> <span class=\"k\">(</span>reName<span class=\"k\">.</span>exec<span class=\"k\">(</span>fn<span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"k\">[])[</span><span class=\"s\">1</span><span class=\"k\">];</span>","","\t\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> name <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\tret <span class=\"k\">+=</span> <span class=\"s\">\" \"</span> <span class=\"k\">+</span> name<span class=\"k\">;</span>","\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t\tret <span class=\"k\">+=</span> <span class=\"s\">\"( \"</span><span class=\"k\">;</span>","","\t\t\t\t\tret <span class=\"k\">=</span> <span class=\"k\">[</span> ret<span class=\"k\">,</span> QUnit<span class=\"k\">.</span>jsDump<span class=\"k\">.</span>parse<span class=\"k\">(</span> fn<span class=\"k\">,</span> <span class=\"s\">\"functionArgs\"</span> <span class=\"k\">),</span> <span class=\"s\">\"){\"</span> <span class=\"k\">].</span>join<span class=\"k\">(</span> <span class=\"s\">\"\"</span> <span class=\"k\">);</span>","\t\t\t\t\t<span class=\"k\">return</span> join<span class=\"k\">(</span> ret<span class=\"k\">,</span> QUnit<span class=\"k\">.</span>jsDump<span class=\"k\">.</span>parse<span class=\"k\">(</span>fn<span class=\"k\">,</span><span class=\"s\">\"functionCode\"</span> <span class=\"k\">),</span> <span class=\"s\">\"}\"</span> <span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t\t\tarray<span class=\"k\">:</span> array<span class=\"k\">,</span>","\t\t\t\tnodelist<span class=\"k\">:</span> array<span class=\"k\">,</span>","\t\t\t\t<span class=\"s\">\"arguments\"</span><span class=\"k\">:</span> array<span class=\"k\">,</span>","\t\t\t\tobject<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> map<span class=\"k\">,</span> stack <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">var</span> ret <span class=\"k\">=</span> <span class=\"k\">[</span> <span class=\"k\">],</span> keys<span class=\"k\">,</span> key<span class=\"k\">,</span> val<span class=\"k\">,</span> i<span class=\"k\">;</span>","\t\t\t\t\tQUnit<span class=\"k\">.</span>jsDump<span class=\"k\">.</span>up<span class=\"k\">();</span>","\t\t\t\t\tkeys <span class=\"k\">=</span> <span class=\"k\">[];</span>","\t\t\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> key <span class=\"k\">in</span> map <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\tkeys<span class=\"k\">.</span>push<span class=\"k\">(</span> key <span class=\"k\">);</span>","\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t\tkeys<span class=\"k\">.</span>sort<span class=\"k\">();</span>","\t\t\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> keys<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\tkey <span class=\"k\">=</span> keys<span class=\"k\">[</span> i <span class=\"k\">];</span>","\t\t\t\t\t\tval <span class=\"k\">=</span> map<span class=\"k\">[</span> key <span class=\"k\">];</span>","\t\t\t\t\t\tret<span class=\"k\">.</span>push<span class=\"k\">(</span> QUnit<span class=\"k\">.</span>jsDump<span class=\"k\">.</span>parse<span class=\"k\">(</span> key<span class=\"k\">,</span> <span class=\"s\">\"key\"</span> <span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\": \"</span> <span class=\"k\">+</span> QUnit<span class=\"k\">.</span>jsDump<span class=\"k\">.</span>parse<span class=\"k\">(</span> val<span class=\"k\">,</span> undefined<span class=\"k\">,</span> stack <span class=\"k\">)</span> <span class=\"k\">);</span>","\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t\tQUnit<span class=\"k\">.</span>jsDump<span class=\"k\">.</span>down<span class=\"k\">();</span>","\t\t\t\t\t<span class=\"k\">return</span> join<span class=\"k\">(</span> <span class=\"s\">\"{\"</span><span class=\"k\">,</span> ret<span class=\"k\">,</span> <span class=\"s\">\"}\"</span> <span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t\t\tnode<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> node <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">var</span> len<span class=\"k\">,</span> i<span class=\"k\">,</span> val<span class=\"k\">,</span>","\t\t\t\t\t\topen <span class=\"k\">=</span> QUnit<span class=\"k\">.</span>jsDump<span class=\"k\">.</span>HTML <span class=\"k\">?</span> <span class=\"s\">\"&amp;lt;\"</span> <span class=\"k\">:</span> <span class=\"s\">\"&lt;\"</span><span class=\"k\">,</span>","\t\t\t\t\t\tclose <span class=\"k\">=</span> QUnit<span class=\"k\">.</span>jsDump<span class=\"k\">.</span>HTML <span class=\"k\">?</span> <span class=\"s\">\"&amp;gt;\"</span> <span class=\"k\">:</span> <span class=\"s\">\"&gt;\"</span><span class=\"k\">,</span>","\t\t\t\t\t\ttag <span class=\"k\">=</span> node<span class=\"k\">.</span>nodeName<span class=\"k\">.</span>toLowerCase<span class=\"k\">(),</span>","\t\t\t\t\t\tret <span class=\"k\">=</span> open <span class=\"k\">+</span> tag<span class=\"k\">,</span>","\t\t\t\t\t\tattrs <span class=\"k\">=</span> node<span class=\"k\">.</span>attributes<span class=\"k\">;</span>","","\t\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> attrs <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> len <span class=\"k\">=</span> attrs<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">&lt;</span> len<span class=\"k\">;</span> i<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\t\tval <span class=\"k\">=</span> attrs<span class=\"k\">[</span>i<span class=\"k\">].</span>nodeValue<span class=\"k\">;</span>","\t\t\t\t\t\t\t<span class=\"c\">// IE6 includes all attributes in .attributes, even ones not explicitly set.</span>","\t\t\t\t\t\t\t<span class=\"c\">// Those have values like undefined, null, 0, false, \"\" or \"inherit\".</span>","\t\t\t\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> val <span class=\"k\">&amp;&amp;</span> val <span class=\"k\">!==</span> <span class=\"s\">\"inherit\"</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\t\t\tret <span class=\"k\">+=</span> <span class=\"s\">\" \"</span> <span class=\"k\">+</span> attrs<span class=\"k\">[</span>i<span class=\"k\">].</span>nodeName <span class=\"k\">+</span> <span class=\"s\">\"=\"</span> <span class=\"k\">+</span> QUnit<span class=\"k\">.</span>jsDump<span class=\"k\">.</span>parse<span class=\"k\">(</span> val<span class=\"k\">,</span> <span class=\"s\">\"attribute\"</span> <span class=\"k\">);</span>","\t\t\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t\tret <span class=\"k\">+=</span> close<span class=\"k\">;</span>","","\t\t\t\t\t<span class=\"c\">// Show content of TextNode or CDATASection</span>","\t\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> node<span class=\"k\">.</span>nodeType <span class=\"k\">===</span> <span class=\"s\">3</span> <span class=\"k\">||</span> node<span class=\"k\">.</span>nodeType <span class=\"k\">===</span> <span class=\"s\">4</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\tret <span class=\"k\">+=</span> node<span class=\"k\">.</span>nodeValue<span class=\"k\">;</span>","\t\t\t\t\t<span class=\"k\">}</span>","","\t\t\t\t\t<span class=\"k\">return</span> ret <span class=\"k\">+</span> open <span class=\"k\">+</span> <span class=\"s\">\"/\"</span> <span class=\"k\">+</span> tag <span class=\"k\">+</span> close<span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t\t\t<span class=\"c\">// function calls it internally, it's the arguments part of the function</span>","\t\t\t\tfunctionArgs<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> fn <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">var</span> args<span class=\"k\">,</span>","\t\t\t\t\t\tl <span class=\"k\">=</span> fn<span class=\"k\">.</span>length<span class=\"k\">;</span>","","\t\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>l <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\t<span class=\"k\">return</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","\t\t\t\t\t<span class=\"k\">}</span>","","\t\t\t\t\targs <span class=\"k\">=</span> <span class=\"k\">new</span> Array<span class=\"k\">(</span>l<span class=\"k\">);</span>","\t\t\t\t\t<span class=\"k\">while</span> <span class=\"k\">(</span> l<span class=\"k\">--</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\t<span class=\"c\">// 97 is 'a'</span>","\t\t\t\t\t\targs<span class=\"k\">[</span>l<span class=\"k\">]</span> <span class=\"k\">=</span> String<span class=\"k\">.</span>fromCharCode<span class=\"k\">(</span><span class=\"s\">97</span><span class=\"k\">+</span>l<span class=\"k\">);</span>","\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t\t<span class=\"k\">return</span> <span class=\"s\">\" \"</span> <span class=\"k\">+</span> args<span class=\"k\">.</span>join<span class=\"k\">(</span> <span class=\"s\">\", \"</span> <span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\" \"</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t\t\t<span class=\"c\">// object calls it internally, the key part of an item in a map</span>","\t\t\t\tkey<span class=\"k\">:</span> quote<span class=\"k\">,</span>","\t\t\t\t<span class=\"c\">// function calls it internally, it's the content of the function</span>","\t\t\t\tfunctionCode<span class=\"k\">:</span> <span class=\"s\">\"[code]\"</span><span class=\"k\">,</span>","\t\t\t\t<span class=\"c\">// node calls it internally, it's an html attribute value</span>","\t\t\t\tattribute<span class=\"k\">:</span> quote<span class=\"k\">,</span>","\t\t\t\tstring<span class=\"k\">:</span> quote<span class=\"k\">,</span>","\t\t\t\tdate<span class=\"k\">:</span> quote<span class=\"k\">,</span>","\t\t\t\tregexp<span class=\"k\">:</span> literal<span class=\"k\">,</span>","\t\t\t\tnumber<span class=\"k\">:</span> literal<span class=\"k\">,</span>","\t\t\t\t<span class=\"s\">\"boolean\"</span><span class=\"k\">:</span> literal","\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t\t<span class=\"c\">// if true, entities are escaped ( &lt;, &gt;, \\t, space and \\n )</span>","\t\t\tHTML<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","\t\t\t<span class=\"c\">// indentation unit</span>","\t\t\tindentChar<span class=\"k\">:</span> <span class=\"s\">\"  \"</span><span class=\"k\">,</span>","\t\t\t<span class=\"c\">// if true, items in a collection, are separated by a \\n, else just a space.</span>","\t\t\tmultiline<span class=\"k\">:</span> <span class=\"k\">true</span>","\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","","\t<span class=\"k\">return</span> jsDump<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">());</span>","","<span class=\"c\">// from jquery.js</span>","<span class=\"k\">function</span> inArray<span class=\"k\">(</span> elem<span class=\"k\">,</span> array <span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span> array<span class=\"k\">.</span>indexOf <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">return</span> array<span class=\"k\">.</span>indexOf<span class=\"k\">(</span> elem <span class=\"k\">);</span>","\t<span class=\"k\">}</span>","","\t<span class=\"k\">for</span> <span class=\"k\">(</span> <span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> length <span class=\"k\">=</span> array<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">&lt;</span> length<span class=\"k\">;</span> i<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> array<span class=\"k\">[</span> i <span class=\"k\">]</span> <span class=\"k\">===</span> elem <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">return</span> i<span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span>","","\t<span class=\"k\">return</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\"> * Javascript Diff Algorithm</span>","<span class=\"c\"> *  By John Resig (http://ejohn.org/)</span>","<span class=\"c\"> *  Modified by Chu Alan \"sprite\"</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * Released under the MIT license.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * More Info:</span>","<span class=\"c\"> *  http://ejohn.org/projects/javascript-diff-algorithm/</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * Usage: QUnit.diff(expected, actual)</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * QUnit.diff( \"the quick brown fox jumped over\", \"the quick fox jumps over\" ) == \"the  quick &lt;del&gt;brown &lt;/del&gt; fox &lt;del&gt;jumped &lt;/del&gt;&lt;ins&gt;jumps &lt;/ins&gt; over\"</span>","<span class=\"c\"> */</span>","QUnit<span class=\"k\">.</span>diff <span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t<span class=\"c\">/*jshint eqeqeq:false, eqnull:true */</span>","\t<span class=\"k\">function</span> diff<span class=\"k\">(</span> o<span class=\"k\">,</span> n <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">var</span> i<span class=\"k\">,</span>","\t\t\tns <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","\t\t\tos <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","","\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> n<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>hasOwn<span class=\"k\">.</span>call<span class=\"k\">(</span> ns<span class=\"k\">,</span> n<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tns<span class=\"k\">[</span> n<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">{</span>","\t\t\t\t\trows<span class=\"k\">:</span> <span class=\"k\">[],</span>","\t\t\t\t\to<span class=\"k\">:</span> <span class=\"k\">null</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span>","\t\t\tns<span class=\"k\">[</span> n<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">].</span>rows<span class=\"k\">.</span>push<span class=\"k\">(</span> i <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> o<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>hasOwn<span class=\"k\">.</span>call<span class=\"k\">(</span> os<span class=\"k\">,</span> o<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tos<span class=\"k\">[</span> o<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">{</span>","\t\t\t\t\trows<span class=\"k\">:</span> <span class=\"k\">[],</span>","\t\t\t\t\tn<span class=\"k\">:</span> <span class=\"k\">null</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span>","\t\t\tos<span class=\"k\">[</span> o<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">].</span>rows<span class=\"k\">.</span>push<span class=\"k\">(</span> i <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> i <span class=\"k\">in</span> ns <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>hasOwn<span class=\"k\">.</span>call<span class=\"k\">(</span> ns<span class=\"k\">,</span> i <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">continue</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> ns<span class=\"k\">[</span>i<span class=\"k\">].</span>rows<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">1</span> <span class=\"k\">&amp;&amp;</span> hasOwn<span class=\"k\">.</span>call<span class=\"k\">(</span> os<span class=\"k\">,</span> i <span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> os<span class=\"k\">[</span>i<span class=\"k\">].</span>rows<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">1</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tn<span class=\"k\">[</span> ns<span class=\"k\">[</span>i<span class=\"k\">].</span>rows<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">{</span>","\t\t\t\t\ttext<span class=\"k\">:</span> n<span class=\"k\">[</span> ns<span class=\"k\">[</span>i<span class=\"k\">].</span>rows<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">],</span>","\t\t\t\t\trow<span class=\"k\">:</span> os<span class=\"k\">[</span>i<span class=\"k\">].</span>rows<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","\t\t\t\to<span class=\"k\">[</span> os<span class=\"k\">[</span>i<span class=\"k\">].</span>rows<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">{</span>","\t\t\t\t\ttext<span class=\"k\">:</span> o<span class=\"k\">[</span> os<span class=\"k\">[</span>i<span class=\"k\">].</span>rows<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">],</span>","\t\t\t\t\trow<span class=\"k\">:</span> ns<span class=\"k\">[</span>i<span class=\"k\">].</span>rows<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> n<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">;</span> i<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> n<span class=\"k\">[</span>i<span class=\"k\">].</span>text <span class=\"k\">!=</span> <span class=\"k\">null</span> <span class=\"k\">&amp;&amp;</span> n<span class=\"k\">[</span> i <span class=\"k\">+</span> <span class=\"s\">1</span> <span class=\"k\">].</span>text <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">&amp;&amp;</span> n<span class=\"k\">[</span>i<span class=\"k\">].</span>row <span class=\"k\">+</span> <span class=\"s\">1</span> <span class=\"k\">&lt;</span> o<span class=\"k\">.</span>length <span class=\"k\">&amp;&amp;</span> o<span class=\"k\">[</span> n<span class=\"k\">[</span>i<span class=\"k\">].</span>row <span class=\"k\">+</span> <span class=\"s\">1</span> <span class=\"k\">].</span>text <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">&amp;&amp;</span>","\t\t\t\t\t\tn<span class=\"k\">[</span> i <span class=\"k\">+</span> <span class=\"s\">1</span> <span class=\"k\">]</span> <span class=\"k\">==</span> o<span class=\"k\">[</span> n<span class=\"k\">[</span>i<span class=\"k\">].</span>row <span class=\"k\">+</span> <span class=\"s\">1</span> <span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","","\t\t\t\tn<span class=\"k\">[</span> i <span class=\"k\">+</span> <span class=\"s\">1</span> <span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">{</span>","\t\t\t\t\ttext<span class=\"k\">:</span> n<span class=\"k\">[</span> i <span class=\"k\">+</span> <span class=\"s\">1</span> <span class=\"k\">],</span>","\t\t\t\t\trow<span class=\"k\">:</span> n<span class=\"k\">[</span>i<span class=\"k\">].</span>row <span class=\"k\">+</span> <span class=\"s\">1</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","\t\t\t\to<span class=\"k\">[</span> n<span class=\"k\">[</span>i<span class=\"k\">].</span>row <span class=\"k\">+</span> <span class=\"s\">1</span> <span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">{</span>","\t\t\t\t\ttext<span class=\"k\">:</span> o<span class=\"k\">[</span> n<span class=\"k\">[</span>i<span class=\"k\">].</span>row <span class=\"k\">+</span> <span class=\"s\">1</span> <span class=\"k\">],</span>","\t\t\t\t\trow<span class=\"k\">:</span> i <span class=\"k\">+</span> <span class=\"s\">1</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> i <span class=\"k\">=</span> n<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">;</span> i <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">;</span> i<span class=\"k\">--</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> n<span class=\"k\">[</span>i<span class=\"k\">].</span>text <span class=\"k\">!=</span> <span class=\"k\">null</span> <span class=\"k\">&amp;&amp;</span> n<span class=\"k\">[</span> i <span class=\"k\">-</span> <span class=\"s\">1</span> <span class=\"k\">].</span>text <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">&amp;&amp;</span> n<span class=\"k\">[</span>i<span class=\"k\">].</span>row <span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"k\">&amp;&amp;</span> o<span class=\"k\">[</span> n<span class=\"k\">[</span>i<span class=\"k\">].</span>row <span class=\"k\">-</span> <span class=\"s\">1</span> <span class=\"k\">].</span>text <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">&amp;&amp;</span>","\t\t\t\t\t\tn<span class=\"k\">[</span> i <span class=\"k\">-</span> <span class=\"s\">1</span> <span class=\"k\">]</span> <span class=\"k\">==</span> o<span class=\"k\">[</span> n<span class=\"k\">[</span>i<span class=\"k\">].</span>row <span class=\"k\">-</span> <span class=\"s\">1</span> <span class=\"k\">])</span> <span class=\"k\">{</span>","","\t\t\t\tn<span class=\"k\">[</span> i <span class=\"k\">-</span> <span class=\"s\">1</span> <span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">{</span>","\t\t\t\t\ttext<span class=\"k\">:</span> n<span class=\"k\">[</span> i <span class=\"k\">-</span> <span class=\"s\">1</span> <span class=\"k\">],</span>","\t\t\t\t\trow<span class=\"k\">:</span> n<span class=\"k\">[</span>i<span class=\"k\">].</span>row <span class=\"k\">-</span> <span class=\"s\">1</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","\t\t\t\to<span class=\"k\">[</span> n<span class=\"k\">[</span>i<span class=\"k\">].</span>row <span class=\"k\">-</span> <span class=\"s\">1</span> <span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">{</span>","\t\t\t\t\ttext<span class=\"k\">:</span> o<span class=\"k\">[</span> n<span class=\"k\">[</span>i<span class=\"k\">].</span>row <span class=\"k\">-</span> <span class=\"s\">1</span> <span class=\"k\">],</span>","\t\t\t\t\trow<span class=\"k\">:</span> i <span class=\"k\">-</span> <span class=\"s\">1</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">return</span> <span class=\"k\">{</span>","\t\t\to<span class=\"k\">:</span> o<span class=\"k\">,</span>","\t\t\tn<span class=\"k\">:</span> n","\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","\t<span class=\"k\">}</span>","","\t<span class=\"k\">return</span> <span class=\"k\">function</span><span class=\"k\">(</span> o<span class=\"k\">,</span> n <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\to <span class=\"k\">=</span> o<span class=\"k\">.</span>replace<span class=\"k\">(</span> <span class=\"s\">/\\s+$/</span><span class=\"k\">,</span> <span class=\"s\">\"\"</span> <span class=\"k\">);</span>","\t\tn <span class=\"k\">=</span> n<span class=\"k\">.</span>replace<span class=\"k\">(</span> <span class=\"s\">/\\s+$/</span><span class=\"k\">,</span> <span class=\"s\">\"\"</span> <span class=\"k\">);</span>","","\t\t<span class=\"k\">var</span> i<span class=\"k\">,</span> pre<span class=\"k\">,</span>","\t\t\tstr <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">,</span>","\t\t\tout <span class=\"k\">=</span> diff<span class=\"k\">(</span> o <span class=\"k\">===</span> <span class=\"s\">\"\"</span> <span class=\"k\">?</span> <span class=\"k\">[]</span> <span class=\"k\">:</span> o<span class=\"k\">.</span>split<span class=\"k\">(</span><span class=\"s\">/\\s+/</span><span class=\"k\">),</span> n <span class=\"k\">===</span> <span class=\"s\">\"\"</span> <span class=\"k\">?</span> <span class=\"k\">[]</span> <span class=\"k\">:</span> n<span class=\"k\">.</span>split<span class=\"k\">(</span><span class=\"s\">/\\s+/</span><span class=\"k\">)</span> <span class=\"k\">),</span>","\t\t\toSpace <span class=\"k\">=</span> o<span class=\"k\">.</span>match<span class=\"k\">(</span><span class=\"s\">/\\s+/g</span><span class=\"k\">),</span>","\t\t\tnSpace <span class=\"k\">=</span> n<span class=\"k\">.</span>match<span class=\"k\">(</span><span class=\"s\">/\\s+/g</span><span class=\"k\">);</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> oSpace <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\toSpace <span class=\"k\">=</span> <span class=\"k\">[</span> <span class=\"s\">\" \"</span> <span class=\"k\">];</span>","\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\toSpace<span class=\"k\">.</span>push<span class=\"k\">(</span> <span class=\"s\">\" \"</span> <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> nSpace <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tnSpace <span class=\"k\">=</span> <span class=\"k\">[</span> <span class=\"s\">\" \"</span> <span class=\"k\">];</span>","\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\tnSpace<span class=\"k\">.</span>push<span class=\"k\">(</span> <span class=\"s\">\" \"</span> <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> out<span class=\"k\">.</span>n<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> out<span class=\"k\">.</span>o<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tstr <span class=\"k\">+=</span> <span class=\"s\">\"&lt;del&gt;\"</span> <span class=\"k\">+</span> out<span class=\"k\">.</span>o<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">+</span> oSpace<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;/del&gt;\"</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> out<span class=\"k\">.</span>n<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>text <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> n <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> n <span class=\"k\">&lt;</span> out<span class=\"k\">.</span>o<span class=\"k\">.</span>length <span class=\"k\">&amp;&amp;</span> out<span class=\"k\">.</span>o<span class=\"k\">[</span>n<span class=\"k\">].</span>text <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">;</span> n<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\tstr <span class=\"k\">+=</span> <span class=\"s\">\"&lt;del&gt;\"</span> <span class=\"k\">+</span> out<span class=\"k\">.</span>o<span class=\"k\">[</span>n<span class=\"k\">]</span> <span class=\"k\">+</span> oSpace<span class=\"k\">[</span>n<span class=\"k\">]</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;/del&gt;\"</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t<span class=\"k\">}</span>","","\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> out<span class=\"k\">.</span>n<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>out<span class=\"k\">.</span>n<span class=\"k\">[</span>i<span class=\"k\">].</span>text <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\tstr <span class=\"k\">+=</span> <span class=\"s\">\"&lt;ins&gt;\"</span> <span class=\"k\">+</span> out<span class=\"k\">.</span>n<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">+</span> nSpace<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;/ins&gt;\"</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t<span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"c\">// `pre` initialized at top of scope</span>","\t\t\t\t\tpre <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","","\t\t\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> n <span class=\"k\">=</span> out<span class=\"k\">.</span>n<span class=\"k\">[</span>i<span class=\"k\">].</span>row <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">;</span> n <span class=\"k\">&lt;</span> out<span class=\"k\">.</span>o<span class=\"k\">.</span>length <span class=\"k\">&amp;&amp;</span> out<span class=\"k\">.</span>o<span class=\"k\">[</span>n<span class=\"k\">].</span>text <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">;</span> n<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\tpre <span class=\"k\">+=</span> <span class=\"s\">\"&lt;del&gt;\"</span> <span class=\"k\">+</span> out<span class=\"k\">.</span>o<span class=\"k\">[</span>n<span class=\"k\">]</span> <span class=\"k\">+</span> oSpace<span class=\"k\">[</span>n<span class=\"k\">]</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;/del&gt;\"</span><span class=\"k\">;</span>","\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t\tstr <span class=\"k\">+=</span> <span class=\"s\">\" \"</span> <span class=\"k\">+</span> out<span class=\"k\">.</span>n<span class=\"k\">[</span>i<span class=\"k\">].</span>text <span class=\"k\">+</span> nSpace<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">+</span> pre<span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">return</span> str<span class=\"k\">;</span>","\t<span class=\"k\">}</span><span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">());</span>","","<span class=\"c\">// for CommonJS environments, export everything</span>","<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">typeof</span> exports <span class=\"k\">!==</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\textend<span class=\"k\">(</span> exports<span class=\"k\">,</span> QUnit <span class=\"k\">);</span>","<span class=\"k\">}</span>","","<span class=\"c\">// get at whatever the global object is, like window in browsers</span>","<span class=\"k\">}</span><span class=\"k\">(</span> <span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span><span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">.</span>call<span class=\"k\">())</span> <span class=\"k\">));</span>"];
_$jscoverage['qunit/qunit.js'][11]++;
(function (window) {
  _$jscoverage['qunit/qunit.js'][13]++;
  var QUnit, assert, config, onErrorFnPrev, testId = 0, fileName = (sourceFromStacktrace(0) || "").replace(/(:\d+)+\)?/, "").replace(/.+\//, ""), toString = Object.prototype.toString, hasOwn = Object.prototype.hasOwnProperty, Date = window.Date, defined = {setTimeout: ((typeof window.setTimeout) !== "undefined"), sessionStorage: (function () {
  _$jscoverage['qunit/qunit.js'][26]++;
  var x = "qunit-test-string";
  _$jscoverage['qunit/qunit.js'][27]++;
  try {
    _$jscoverage['qunit/qunit.js'][28]++;
    sessionStorage.setItem(x, x);
    _$jscoverage['qunit/qunit.js'][29]++;
    sessionStorage.removeItem(x);
    _$jscoverage['qunit/qunit.js'][30]++;
    return true;
  }
  catch (e) {
    _$jscoverage['qunit/qunit.js'][32]++;
    return false;
  }
})()}, errorString = (function (error) {
  _$jscoverage['qunit/qunit.js'][47]++;
  var name, message, errorString = error.toString();
  _$jscoverage['qunit/qunit.js'][49]++;
  if ((errorString.substring(0, 7) === "[object")) {
    _$jscoverage['qunit/qunit.js'][50]++;
    name = (error.name? error.name.toString(): "Error");
    _$jscoverage['qunit/qunit.js'][51]++;
    message = (error.message? error.message.toString(): "");
    _$jscoverage['qunit/qunit.js'][52]++;
    if ((name && message)) {
      _$jscoverage['qunit/qunit.js'][53]++;
      return (name + ": " + message);
    }
    else {
      _$jscoverage['qunit/qunit.js'][54]++;
      if (name) {
        _$jscoverage['qunit/qunit.js'][55]++;
        return name;
      }
      else {
        _$jscoverage['qunit/qunit.js'][56]++;
        if (message) {
          _$jscoverage['qunit/qunit.js'][57]++;
          return message;
        }
        else {
          _$jscoverage['qunit/qunit.js'][59]++;
          return "Error";
        }
      }
    }
  }
  else {
    _$jscoverage['qunit/qunit.js'][62]++;
    return errorString;
  }
}), objectValues = (function (obj) {
  _$jscoverage['qunit/qunit.js'][75]++;
  var key, val, vals = (QUnit.is("array", obj)? []: {});
  _$jscoverage['qunit/qunit.js'][77]++;
  for (key in obj) {
    _$jscoverage['qunit/qunit.js'][78]++;
    if (hasOwn.call(obj, key)) {
      _$jscoverage['qunit/qunit.js'][79]++;
      val = obj[key];
      _$jscoverage['qunit/qunit.js'][80]++;
      vals[key] = ((val === Object(val))? objectValues(val): val);
    }
}
  _$jscoverage['qunit/qunit.js'][83]++;
  return vals;
});
  _$jscoverage['qunit/qunit.js'][86]++;
  function Test(settings) {
    _$jscoverage['qunit/qunit.js'][87]++;
    extend(this, settings);
    _$jscoverage['qunit/qunit.js'][88]++;
    this.assertions = [];
    _$jscoverage['qunit/qunit.js'][89]++;
    this.testNumber = (++Test.count);
}
  _$jscoverage['qunit/qunit.js'][92]++;
  Test.count = 0;
  _$jscoverage['qunit/qunit.js'][94]++;
  Test.prototype = {init: (function () {
  _$jscoverage['qunit/qunit.js'][96]++;
  var a, b, li, tests = id("qunit-tests");
  _$jscoverage['qunit/qunit.js'][99]++;
  if (tests) {
    _$jscoverage['qunit/qunit.js'][100]++;
    b = document.createElement("strong");
    _$jscoverage['qunit/qunit.js'][101]++;
    b.innerHTML = this.nameHtml;
    _$jscoverage['qunit/qunit.js'][104]++;
    a = document.createElement("a");
    _$jscoverage['qunit/qunit.js'][105]++;
    a.innerHTML = "Rerun";
    _$jscoverage['qunit/qunit.js'][106]++;
    a.href = QUnit.url({testNumber: this.testNumber});
    _$jscoverage['qunit/qunit.js'][108]++;
    li = document.createElement("li");
    _$jscoverage['qunit/qunit.js'][109]++;
    li.appendChild(b);
    _$jscoverage['qunit/qunit.js'][110]++;
    li.appendChild(a);
    _$jscoverage['qunit/qunit.js'][111]++;
    li.className = "running";
    _$jscoverage['qunit/qunit.js'][112]++;
    li.id = (this.id = ("qunit-test-output" + (testId++)));
    _$jscoverage['qunit/qunit.js'][114]++;
    tests.appendChild(li);
  }
}), setup: (function () {
  _$jscoverage['qunit/qunit.js'][118]++;
  if ((this.module !== config.previousModule)) {
    _$jscoverage['qunit/qunit.js'][119]++;
    if (config.previousModule) {
      _$jscoverage['qunit/qunit.js'][120]++;
      runLoggingCallbacks("moduleDone", QUnit, {name: config.previousModule, failed: config.moduleStats.bad, passed: (config.moduleStats.all - config.moduleStats.bad), total: config.moduleStats.all});
    }
    _$jscoverage['qunit/qunit.js'][127]++;
    config.previousModule = this.module;
    _$jscoverage['qunit/qunit.js'][128]++;
    config.moduleStats = {all: 0, bad: 0};
    _$jscoverage['qunit/qunit.js'][129]++;
    runLoggingCallbacks("moduleStart", QUnit, {name: this.module});
  }
  else {
    _$jscoverage['qunit/qunit.js'][132]++;
    if (config.autorun) {
      _$jscoverage['qunit/qunit.js'][133]++;
      runLoggingCallbacks("moduleStart", QUnit, {name: this.module});
    }
  }
  _$jscoverage['qunit/qunit.js'][138]++;
  config.current = this;
  _$jscoverage['qunit/qunit.js'][140]++;
  this.testEnvironment = extend({setup: (function () {
}), teardown: (function () {
})}, this.moduleTestEnvironment);
  _$jscoverage['qunit/qunit.js'][145]++;
  this.started = (+ new Date());
  _$jscoverage['qunit/qunit.js'][146]++;
  runLoggingCallbacks("testStart", QUnit, {name: this.testName, module: this.module});
  _$jscoverage['qunit/qunit.js'][153]++;
  QUnit.current_testEnvironment = this.testEnvironment;
  _$jscoverage['qunit/qunit.js'][155]++;
  if ((! config.pollution)) {
    _$jscoverage['qunit/qunit.js'][156]++;
    saveGlobal();
  }
  _$jscoverage['qunit/qunit.js'][158]++;
  if (config.notrycatch) {
    _$jscoverage['qunit/qunit.js'][159]++;
    this.testEnvironment.setup.call(this.testEnvironment);
    _$jscoverage['qunit/qunit.js'][160]++;
    return;
  }
  _$jscoverage['qunit/qunit.js'][162]++;
  try {
    _$jscoverage['qunit/qunit.js'][163]++;
    this.testEnvironment.setup.call(this.testEnvironment);
  }
  catch (e) {
    _$jscoverage['qunit/qunit.js'][165]++;
    QUnit.pushFailure(("Setup failed on " + this.testName + ": " + (e.message || e)), extractStacktrace(e, 1));
  }
}), run: (function () {
  _$jscoverage['qunit/qunit.js'][169]++;
  config.current = this;
  _$jscoverage['qunit/qunit.js'][171]++;
  var running = id("qunit-testresult");
  _$jscoverage['qunit/qunit.js'][173]++;
  if (running) {
    _$jscoverage['qunit/qunit.js'][174]++;
    running.innerHTML = ("Running: <br/>" + this.nameHtml);
  }
  _$jscoverage['qunit/qunit.js'][177]++;
  if (this.async) {
    _$jscoverage['qunit/qunit.js'][178]++;
    QUnit.stop();
  }
  _$jscoverage['qunit/qunit.js'][181]++;
  this.callbackStarted = (+ new Date());
  _$jscoverage['qunit/qunit.js'][183]++;
  if (config.notrycatch) {
    _$jscoverage['qunit/qunit.js'][184]++;
    this.callback.call(this.testEnvironment, QUnit.assert);
    _$jscoverage['qunit/qunit.js'][185]++;
    this.callbackRuntime = ((+ new Date()) - this.callbackStarted);
    _$jscoverage['qunit/qunit.js'][186]++;
    return;
  }
  _$jscoverage['qunit/qunit.js'][189]++;
  try {
    _$jscoverage['qunit/qunit.js'][190]++;
    this.callback.call(this.testEnvironment, QUnit.assert);
    _$jscoverage['qunit/qunit.js'][191]++;
    this.callbackRuntime = ((+ new Date()) - this.callbackStarted);
  }
  catch (e) {
    _$jscoverage['qunit/qunit.js'][193]++;
    this.callbackRuntime = ((+ new Date()) - this.callbackStarted);
    _$jscoverage['qunit/qunit.js'][195]++;
    QUnit.pushFailure(("Died on test #" + (this.assertions.length + 1) + " " + this.stack + ": " + (e.message || e)), extractStacktrace(e, 0));
    _$jscoverage['qunit/qunit.js'][197]++;
    saveGlobal();
    _$jscoverage['qunit/qunit.js'][200]++;
    if (config.blocking) {
      _$jscoverage['qunit/qunit.js'][201]++;
      QUnit.start();
    }
  }
}), teardown: (function () {
  _$jscoverage['qunit/qunit.js'][206]++;
  config.current = this;
  _$jscoverage['qunit/qunit.js'][207]++;
  if (config.notrycatch) {
    _$jscoverage['qunit/qunit.js'][208]++;
    if (((typeof this.callbackRuntime) === "undefined")) {
      _$jscoverage['qunit/qunit.js'][209]++;
      this.callbackRuntime = ((+ new Date()) - this.callbackStarted);
    }
    _$jscoverage['qunit/qunit.js'][211]++;
    this.testEnvironment.teardown.call(this.testEnvironment);
    _$jscoverage['qunit/qunit.js'][212]++;
    return;
  }
  else {
    _$jscoverage['qunit/qunit.js'][214]++;
    try {
      _$jscoverage['qunit/qunit.js'][215]++;
      this.testEnvironment.teardown.call(this.testEnvironment);
    }
    catch (e) {
      _$jscoverage['qunit/qunit.js'][217]++;
      QUnit.pushFailure(("Teardown failed on " + this.testName + ": " + (e.message || e)), extractStacktrace(e, 1));
    }
  }
  _$jscoverage['qunit/qunit.js'][220]++;
  checkPollution();
}), finish: (function () {
  _$jscoverage['qunit/qunit.js'][223]++;
  config.current = this;
  _$jscoverage['qunit/qunit.js'][224]++;
  if ((config.requireExpects && (this.expected === null))) {
    _$jscoverage['qunit/qunit.js'][225]++;
    QUnit.pushFailure("Expected number of assertions to be defined, but expect() was not called.", this.stack);
  }
  else {
    _$jscoverage['qunit/qunit.js'][226]++;
    if (((this.expected !== null) && (this.expected !== this.assertions.length))) {
      _$jscoverage['qunit/qunit.js'][227]++;
      QUnit.pushFailure(("Expected " + this.expected + " assertions, but " + this.assertions.length + " were run"), this.stack);
    }
    else {
      _$jscoverage['qunit/qunit.js'][228]++;
      if (((this.expected === null) && (! this.assertions.length))) {
        _$jscoverage['qunit/qunit.js'][229]++;
        QUnit.pushFailure("Expected at least one assertion, but none were run - call expect(0) to accept zero assertions.", this.stack);
      }
    }
  }
  _$jscoverage['qunit/qunit.js'][232]++;
  var i, assertion, a, b, time, li, ol, test = this, good = 0, bad = 0, tests = id("qunit-tests");
  _$jscoverage['qunit/qunit.js'][238]++;
  this.runtime = ((+ new Date()) - this.started);
  _$jscoverage['qunit/qunit.js'][239]++;
  config.stats.all += this.assertions.length;
  _$jscoverage['qunit/qunit.js'][240]++;
  config.moduleStats.all += this.assertions.length;
  _$jscoverage['qunit/qunit.js'][242]++;
  if (tests) {
    _$jscoverage['qunit/qunit.js'][243]++;
    ol = document.createElement("ol");
    _$jscoverage['qunit/qunit.js'][244]++;
    ol.className = "qunit-assert-list";
    _$jscoverage['qunit/qunit.js'][246]++;
    for (i = 0; (i < this.assertions.length); (i++)) {
      _$jscoverage['qunit/qunit.js'][247]++;
      assertion = this.assertions[i];
      _$jscoverage['qunit/qunit.js'][249]++;
      li = document.createElement("li");
      _$jscoverage['qunit/qunit.js'][250]++;
      li.className = (assertion.result? "pass": "fail");
      _$jscoverage['qunit/qunit.js'][251]++;
      li.innerHTML = (assertion.message || (assertion.result? "okay": "failed"));
      _$jscoverage['qunit/qunit.js'][252]++;
      ol.appendChild(li);
      _$jscoverage['qunit/qunit.js'][254]++;
      if (assertion.result) {
        _$jscoverage['qunit/qunit.js'][255]++;
        (good++);
      }
      else {
        _$jscoverage['qunit/qunit.js'][257]++;
        (bad++);
        _$jscoverage['qunit/qunit.js'][258]++;
        (config.stats.bad++);
        _$jscoverage['qunit/qunit.js'][259]++;
        (config.moduleStats.bad++);
      }
}
    _$jscoverage['qunit/qunit.js'][264]++;
    if ((QUnit.config.reorder && defined.sessionStorage)) {
      _$jscoverage['qunit/qunit.js'][265]++;
      if (bad) {
        _$jscoverage['qunit/qunit.js'][266]++;
        sessionStorage.setItem(("qunit-test-" + this.module + "-" + this.testName), bad);
      }
      else {
        _$jscoverage['qunit/qunit.js'][268]++;
        sessionStorage.removeItem(("qunit-test-" + this.module + "-" + this.testName));
      }
    }
    _$jscoverage['qunit/qunit.js'][272]++;
    if ((bad === 0)) {
      _$jscoverage['qunit/qunit.js'][273]++;
      addClass(ol, "qunit-collapsed");
    }
    _$jscoverage['qunit/qunit.js'][277]++;
    b = document.createElement("strong");
    _$jscoverage['qunit/qunit.js'][278]++;
    b.innerHTML = (this.nameHtml + " <b class='counts'>(<b class='failed'>" + bad + "</b>, <b class='passed'>" + good + "</b>, " + this.assertions.length + ")</b>");
    _$jscoverage['qunit/qunit.js'][280]++;
    addEvent(b, "click", (function () {
  _$jscoverage['qunit/qunit.js'][281]++;
  var next = b.parentNode.lastChild, collapsed = hasClass(next, "qunit-collapsed");
  _$jscoverage['qunit/qunit.js'][283]++;
  ((collapsed? removeClass: addClass))(next, "qunit-collapsed");
}));
    _$jscoverage['qunit/qunit.js'][286]++;
    addEvent(b, "dblclick", (function (e) {
  _$jscoverage['qunit/qunit.js'][287]++;
  var target = ((e && e.target)? e.target: window.event.srcElement);
  _$jscoverage['qunit/qunit.js'][288]++;
  if (((target.nodeName.toLowerCase() === "span") || (target.nodeName.toLowerCase() === "b"))) {
    _$jscoverage['qunit/qunit.js'][289]++;
    target = target.parentNode;
  }
  _$jscoverage['qunit/qunit.js'][291]++;
  if ((window.location && (target.nodeName.toLowerCase() === "strong"))) {
    _$jscoverage['qunit/qunit.js'][292]++;
    window.location = QUnit.url({testNumber: test.testNumber});
  }
}));
    _$jscoverage['qunit/qunit.js'][297]++;
    time = document.createElement("span");
    _$jscoverage['qunit/qunit.js'][298]++;
    time.className = "runtime";
    _$jscoverage['qunit/qunit.js'][299]++;
    time.innerHTML = (this.runtime + " ms");
    _$jscoverage['qunit/qunit.js'][302]++;
    li = id(this.id);
    _$jscoverage['qunit/qunit.js'][303]++;
    li.className = (bad? "fail": "pass");
    _$jscoverage['qunit/qunit.js'][304]++;
    li.removeChild(li.firstChild);
    _$jscoverage['qunit/qunit.js'][305]++;
    a = li.firstChild;
    _$jscoverage['qunit/qunit.js'][306]++;
    li.appendChild(b);
    _$jscoverage['qunit/qunit.js'][307]++;
    li.appendChild(a);
    _$jscoverage['qunit/qunit.js'][308]++;
    li.appendChild(time);
    _$jscoverage['qunit/qunit.js'][309]++;
    li.appendChild(ol);
  }
  else {
    _$jscoverage['qunit/qunit.js'][312]++;
    for (i = 0; (i < this.assertions.length); (i++)) {
      _$jscoverage['qunit/qunit.js'][313]++;
      if ((! this.assertions[i].result)) {
        _$jscoverage['qunit/qunit.js'][314]++;
        (bad++);
        _$jscoverage['qunit/qunit.js'][315]++;
        (config.stats.bad++);
        _$jscoverage['qunit/qunit.js'][316]++;
        (config.moduleStats.bad++);
      }
}
  }
  _$jscoverage['qunit/qunit.js'][321]++;
  runLoggingCallbacks("testDone", QUnit, {name: this.testName, module: this.module, failed: bad, passed: (this.assertions.length - bad), total: this.assertions.length, duration: this.runtime});
  _$jscoverage['qunit/qunit.js'][330]++;
  QUnit.reset();
  _$jscoverage['qunit/qunit.js'][332]++;
  config.current = undefined;
}), queue: (function () {
  _$jscoverage['qunit/qunit.js'][336]++;
  var bad, test = this;
  _$jscoverage['qunit/qunit.js'][339]++;
  synchronize((function () {
  _$jscoverage['qunit/qunit.js'][340]++;
  test.init();
}));
  _$jscoverage['qunit/qunit.js'][342]++;
  function run() {
    _$jscoverage['qunit/qunit.js'][344]++;
    synchronize((function () {
  _$jscoverage['qunit/qunit.js'][345]++;
  test.setup();
}));
    _$jscoverage['qunit/qunit.js'][347]++;
    synchronize((function () {
  _$jscoverage['qunit/qunit.js'][348]++;
  test.run();
}));
    _$jscoverage['qunit/qunit.js'][350]++;
    synchronize((function () {
  _$jscoverage['qunit/qunit.js'][351]++;
  test.teardown();
}));
    _$jscoverage['qunit/qunit.js'][353]++;
    synchronize((function () {
  _$jscoverage['qunit/qunit.js'][354]++;
  test.finish();
}));
}
  _$jscoverage['qunit/qunit.js'][360]++;
  bad = (QUnit.config.reorder && defined.sessionStorage && (+ sessionStorage.getItem(("qunit-test-" + this.module + "-" + this.testName))));
  _$jscoverage['qunit/qunit.js'][363]++;
  if (bad) {
    _$jscoverage['qunit/qunit.js'][364]++;
    run();
  }
  else {
    _$jscoverage['qunit/qunit.js'][366]++;
    synchronize(run, true);
  }
})};
  _$jscoverage['qunit/qunit.js'][373]++;
  QUnit = {module: (function (name, testEnvironment) {
  _$jscoverage['qunit/qunit.js'][377]++;
  config.currentModule = name;
  _$jscoverage['qunit/qunit.js'][378]++;
  config.currentModuleTestEnvironment = testEnvironment;
  _$jscoverage['qunit/qunit.js'][379]++;
  config.modules[name] = true;
}), asyncTest: (function (testName, expected, callback) {
  _$jscoverage['qunit/qunit.js'][383]++;
  if ((arguments.length === 2)) {
    _$jscoverage['qunit/qunit.js'][384]++;
    callback = expected;
    _$jscoverage['qunit/qunit.js'][385]++;
    expected = null;
  }
  _$jscoverage['qunit/qunit.js'][388]++;
  QUnit.test(testName, expected, callback, true);
}), test: (function (testName, expected, callback, async) {
  _$jscoverage['qunit/qunit.js'][392]++;
  var test, nameHtml = ("<span class='test-name'>" + escapeText(testName) + "</span>");
  _$jscoverage['qunit/qunit.js'][395]++;
  if ((arguments.length === 2)) {
    _$jscoverage['qunit/qunit.js'][396]++;
    callback = expected;
    _$jscoverage['qunit/qunit.js'][397]++;
    expected = null;
  }
  _$jscoverage['qunit/qunit.js'][400]++;
  if (config.currentModule) {
    _$jscoverage['qunit/qunit.js'][401]++;
    nameHtml = ("<span class='module-name'>" + escapeText(config.currentModule) + "</span>: " + nameHtml);
  }
  _$jscoverage['qunit/qunit.js'][404]++;
  test = new Test({nameHtml: nameHtml, testName: testName, expected: expected, async: async, callback: callback, module: config.currentModule, moduleTestEnvironment: config.currentModuleTestEnvironment, stack: sourceFromStacktrace(2)});
  _$jscoverage['qunit/qunit.js'][415]++;
  if ((! validTest(test))) {
    _$jscoverage['qunit/qunit.js'][416]++;
    return;
  }
  _$jscoverage['qunit/qunit.js'][419]++;
  test.queue();
}), expect: (function (asserts) {
  _$jscoverage['qunit/qunit.js'][424]++;
  if ((arguments.length === 1)) {
    _$jscoverage['qunit/qunit.js'][425]++;
    config.current.expected = asserts;
  }
  else {
    _$jscoverage['qunit/qunit.js'][427]++;
    return config.current.expected;
  }
}), start: (function (count) {
  _$jscoverage['qunit/qunit.js'][434]++;
  if ((config.semaphore === undefined)) {
    _$jscoverage['qunit/qunit.js'][435]++;
    QUnit.begin((function () {
  _$jscoverage['qunit/qunit.js'][437]++;
  setTimeout((function () {
  _$jscoverage['qunit/qunit.js'][438]++;
  QUnit.start(count);
}));
}));
    _$jscoverage['qunit/qunit.js'][441]++;
    return;
  }
  _$jscoverage['qunit/qunit.js'][444]++;
  config.semaphore -= (count || 1);
  _$jscoverage['qunit/qunit.js'][446]++;
  if ((config.semaphore > 0)) {
    _$jscoverage['qunit/qunit.js'][447]++;
    return;
  }
  _$jscoverage['qunit/qunit.js'][450]++;
  if ((config.semaphore < 0)) {
    _$jscoverage['qunit/qunit.js'][451]++;
    config.semaphore = 0;
    _$jscoverage['qunit/qunit.js'][452]++;
    QUnit.pushFailure("Called start() while already started (QUnit.config.semaphore was 0 already)", null, sourceFromStacktrace(2));
    _$jscoverage['qunit/qunit.js'][453]++;
    return;
  }
  _$jscoverage['qunit/qunit.js'][456]++;
  if (defined.setTimeout) {
    _$jscoverage['qunit/qunit.js'][457]++;
    window.setTimeout((function () {
  _$jscoverage['qunit/qunit.js'][458]++;
  if ((config.semaphore > 0)) {
    _$jscoverage['qunit/qunit.js'][459]++;
    return;
  }
  _$jscoverage['qunit/qunit.js'][461]++;
  if (config.timeout) {
    _$jscoverage['qunit/qunit.js'][462]++;
    clearTimeout(config.timeout);
  }
  _$jscoverage['qunit/qunit.js'][465]++;
  config.blocking = false;
  _$jscoverage['qunit/qunit.js'][466]++;
  process(true);
}), 13);
  }
  else {
    _$jscoverage['qunit/qunit.js'][469]++;
    config.blocking = false;
    _$jscoverage['qunit/qunit.js'][470]++;
    process(true);
  }
}), stop: (function (count) {
  _$jscoverage['qunit/qunit.js'][475]++;
  config.semaphore += (count || 1);
  _$jscoverage['qunit/qunit.js'][476]++;
  config.blocking = true;
  _$jscoverage['qunit/qunit.js'][478]++;
  if ((config.testTimeout && defined.setTimeout)) {
    _$jscoverage['qunit/qunit.js'][479]++;
    clearTimeout(config.timeout);
    _$jscoverage['qunit/qunit.js'][480]++;
    config.timeout = window.setTimeout((function () {
  _$jscoverage['qunit/qunit.js'][481]++;
  QUnit.ok(false, "Test timed out");
  _$jscoverage['qunit/qunit.js'][482]++;
  config.semaphore = 1;
  _$jscoverage['qunit/qunit.js'][483]++;
  QUnit.start();
}), config.testTimeout);
  }
})};
  _$jscoverage['qunit/qunit.js'][496]++;
  assert = {ok: (function (result, msg) {
  _$jscoverage['qunit/qunit.js'][504]++;
  if ((! config.current)) {
    _$jscoverage['qunit/qunit.js'][505]++;
    throw new Error(("ok() assertion outside test context, was " + sourceFromStacktrace(2)));
  }
  _$jscoverage['qunit/qunit.js'][507]++;
  result = (! (! result));
  _$jscoverage['qunit/qunit.js'][509]++;
  var source, details = {module: config.current.module, name: config.current.testName, result: result, message: msg};
  _$jscoverage['qunit/qunit.js'][517]++;
  msg = escapeText((msg || (result? "okay": "failed")));
  _$jscoverage['qunit/qunit.js'][518]++;
  msg = ("<span class='test-message'>" + msg + "</span>");
  _$jscoverage['qunit/qunit.js'][520]++;
  if ((! result)) {
    _$jscoverage['qunit/qunit.js'][521]++;
    source = sourceFromStacktrace(2);
    _$jscoverage['qunit/qunit.js'][522]++;
    if (source) {
      _$jscoverage['qunit/qunit.js'][523]++;
      details.source = source;
      _$jscoverage['qunit/qunit.js'][524]++;
      msg += ("<table><tr class='test-source'><th>Source: </th><td><pre>" + escapeText(source) + "</pre></td></tr></table>");
    }
  }
  _$jscoverage['qunit/qunit.js'][527]++;
  runLoggingCallbacks("log", QUnit, details);
  _$jscoverage['qunit/qunit.js'][528]++;
  config.current.assertions.push({result: result, message: msg});
}), equal: (function (actual, expected, message) {
  _$jscoverage['qunit/qunit.js'][543]++;
  QUnit.push((expected == actual), actual, expected, message);
}), notEqual: (function (actual, expected, message) {
  _$jscoverage['qunit/qunit.js'][552]++;
  QUnit.push((expected != actual), actual, expected, message);
}), propEqual: (function (actual, expected, message) {
  _$jscoverage['qunit/qunit.js'][560]++;
  actual = objectValues(actual);
  _$jscoverage['qunit/qunit.js'][561]++;
  expected = objectValues(expected);
  _$jscoverage['qunit/qunit.js'][562]++;
  QUnit.push(QUnit.equiv(actual, expected), actual, expected, message);
}), notPropEqual: (function (actual, expected, message) {
  _$jscoverage['qunit/qunit.js'][570]++;
  actual = objectValues(actual);
  _$jscoverage['qunit/qunit.js'][571]++;
  expected = objectValues(expected);
  _$jscoverage['qunit/qunit.js'][572]++;
  QUnit.push((! QUnit.equiv(actual, expected)), actual, expected, message);
}), deepEqual: (function (actual, expected, message) {
  _$jscoverage['qunit/qunit.js'][580]++;
  QUnit.push(QUnit.equiv(actual, expected), actual, expected, message);
}), notDeepEqual: (function (actual, expected, message) {
  _$jscoverage['qunit/qunit.js'][588]++;
  QUnit.push((! QUnit.equiv(actual, expected)), actual, expected, message);
}), strictEqual: (function (actual, expected, message) {
  _$jscoverage['qunit/qunit.js'][596]++;
  QUnit.push((expected === actual), actual, expected, message);
}), notStrictEqual: (function (actual, expected, message) {
  _$jscoverage['qunit/qunit.js'][604]++;
  QUnit.push((expected !== actual), actual, expected, message);
}), "throws": (function (block, expected, message) {
  _$jscoverage['qunit/qunit.js'][608]++;
  var actual, expectedOutput = expected, ok = false;
  _$jscoverage['qunit/qunit.js'][613]++;
  if (((typeof expected) === "string")) {
    _$jscoverage['qunit/qunit.js'][614]++;
    message = expected;
    _$jscoverage['qunit/qunit.js'][615]++;
    expected = null;
  }
  _$jscoverage['qunit/qunit.js'][618]++;
  config.current.ignoreGlobalErrors = true;
  _$jscoverage['qunit/qunit.js'][619]++;
  try {
    _$jscoverage['qunit/qunit.js'][620]++;
    block.call(config.current.testEnvironment);
  }
  catch (e) {
    _$jscoverage['qunit/qunit.js'][622]++;
    actual = e;
  }
  _$jscoverage['qunit/qunit.js'][624]++;
  config.current.ignoreGlobalErrors = false;
  _$jscoverage['qunit/qunit.js'][626]++;
  if (actual) {
    _$jscoverage['qunit/qunit.js'][628]++;
    if ((! expected)) {
      _$jscoverage['qunit/qunit.js'][629]++;
      ok = true;
      _$jscoverage['qunit/qunit.js'][630]++;
      expectedOutput = null;
    }
    else {
      _$jscoverage['qunit/qunit.js'][632]++;
      if ((QUnit.objectType(expected) === "regexp")) {
        _$jscoverage['qunit/qunit.js'][633]++;
        ok = expected.test(errorString(actual));
      }
      else {
        _$jscoverage['qunit/qunit.js'][635]++;
        if ((actual instanceof expected)) {
          _$jscoverage['qunit/qunit.js'][636]++;
          ok = true;
        }
        else {
          _$jscoverage['qunit/qunit.js'][638]++;
          if ((expected.call({}, actual) === true)) {
            _$jscoverage['qunit/qunit.js'][639]++;
            expectedOutput = null;
            _$jscoverage['qunit/qunit.js'][640]++;
            ok = true;
          }
        }
      }
    }
    _$jscoverage['qunit/qunit.js'][643]++;
    QUnit.push(ok, actual, expectedOutput, message);
  }
  else {
    _$jscoverage['qunit/qunit.js'][645]++;
    QUnit.pushFailure(message, null, "No exception was thrown.");
  }
})};
  _$jscoverage['qunit/qunit.js'][654]++;
  extend(QUnit, assert);
  _$jscoverage['qunit/qunit.js'][661]++;
  QUnit.raises = assert["throws"];
  _$jscoverage['qunit/qunit.js'][667]++;
  QUnit.equals = (function () {
  _$jscoverage['qunit/qunit.js'][668]++;
  QUnit.push(false, false, false, "QUnit.equals has been deprecated since 2009 (e88049a0), use QUnit.equal instead");
});
  _$jscoverage['qunit/qunit.js'][670]++;
  QUnit.same = (function () {
  _$jscoverage['qunit/qunit.js'][671]++;
  QUnit.push(false, false, false, "QUnit.same has been deprecated since 2009 (e88049a0), use QUnit.deepEqual instead");
});
  _$jscoverage['qunit/qunit.js'][675]++;
  (function () {
  _$jscoverage['qunit/qunit.js'][676]++;
  function F() {
}
  _$jscoverage['qunit/qunit.js'][677]++;
  F.prototype = QUnit;
  _$jscoverage['qunit/qunit.js'][678]++;
  QUnit = new F();
  _$jscoverage['qunit/qunit.js'][680]++;
  QUnit.constructor = F;
})();
  _$jscoverage['qunit/qunit.js'][688]++;
  config = {queue: [], blocking: true, hidepassed: false, reorder: true, altertitle: true, requireExpects: false, urlConfig: [{id: "noglobals", label: "Check for Globals", tooltip: "Enabling this will test if any test introduces new properties on the `window` object. Stored as query-strings."}, {id: "notrycatch", label: "No try-catch", tooltip: "Enabling this will run tests outside of a try-catch block. Makes debugging exceptions in IE reasonable. Stored as query-strings."}], modules: {}, begin: [], done: [], log: [], testStart: [], testDone: [], moduleStart: [], moduleDone: []};
  _$jscoverage['qunit/qunit.js'][739]++;
  if (((typeof exports) === "undefined")) {
    _$jscoverage['qunit/qunit.js'][740]++;
    extend(window, QUnit);
    _$jscoverage['qunit/qunit.js'][743]++;
    window.QUnit = QUnit;
  }
  _$jscoverage['qunit/qunit.js'][747]++;
  (function () {
  _$jscoverage['qunit/qunit.js'][748]++;
  var i, location = (window.location || {search: "", protocol: "file:"}), params = location.search.slice(1).split("&"), length = params.length, urlParams = {}, current;
  _$jscoverage['qunit/qunit.js'][755]++;
  if (params[0]) {
    _$jscoverage['qunit/qunit.js'][756]++;
    for (i = 0; (i < length); (i++)) {
      _$jscoverage['qunit/qunit.js'][757]++;
      current = params[i].split("=");
      _$jscoverage['qunit/qunit.js'][758]++;
      current[0] = decodeURIComponent(current[0]);
      _$jscoverage['qunit/qunit.js'][760]++;
      current[1] = (current[1]? decodeURIComponent(current[1]): true);
      _$jscoverage['qunit/qunit.js'][761]++;
      urlParams[current[0]] = current[1];
}
  }
  _$jscoverage['qunit/qunit.js'][765]++;
  QUnit.urlParams = urlParams;
  _$jscoverage['qunit/qunit.js'][768]++;
  config.filter = urlParams.filter;
  _$jscoverage['qunit/qunit.js'][771]++;
  config.module = urlParams.module;
  _$jscoverage['qunit/qunit.js'][773]++;
  config.testNumber = (parseInt(urlParams.testNumber, 10) || null);
  _$jscoverage['qunit/qunit.js'][776]++;
  QUnit.isLocal = (location.protocol === "file:");
})();
  _$jscoverage['qunit/qunit.js'][781]++;
  extend(QUnit, {assert: assert, config: config, init: (function () {
  _$jscoverage['qunit/qunit.js'][788]++;
  extend(config, {stats: {all: 0, bad: 0}, moduleStats: {all: 0, bad: 0}, started: (+ new Date()), updateRate: 1000, blocking: false, autostart: true, autorun: false, filter: "", queue: [], semaphore: 1});
  _$jscoverage['qunit/qunit.js'][801]++;
  var tests, banner, result, qunit = id("qunit");
  _$jscoverage['qunit/qunit.js'][804]++;
  if (qunit) {
    _$jscoverage['qunit/qunit.js'][805]++;
    qunit.innerHTML = ("<h1 id='qunit-header'>" + escapeText(document.title) + "</h1>" + "<h2 id='qunit-banner'></h2>" + "<div id='qunit-testrunner-toolbar'></div>" + "<h2 id='qunit-userAgent'></h2>" + "<ol id='qunit-tests'></ol>");
  }
  _$jscoverage['qunit/qunit.js'][813]++;
  tests = id("qunit-tests");
  _$jscoverage['qunit/qunit.js'][814]++;
  banner = id("qunit-banner");
  _$jscoverage['qunit/qunit.js'][815]++;
  result = id("qunit-testresult");
  _$jscoverage['qunit/qunit.js'][817]++;
  if (tests) {
    _$jscoverage['qunit/qunit.js'][818]++;
    tests.innerHTML = "";
  }
  _$jscoverage['qunit/qunit.js'][821]++;
  if (banner) {
    _$jscoverage['qunit/qunit.js'][822]++;
    banner.className = "";
  }
  _$jscoverage['qunit/qunit.js'][825]++;
  if (result) {
    _$jscoverage['qunit/qunit.js'][826]++;
    result.parentNode.removeChild(result);
  }
  _$jscoverage['qunit/qunit.js'][829]++;
  if (tests) {
    _$jscoverage['qunit/qunit.js'][830]++;
    result = document.createElement("p");
    _$jscoverage['qunit/qunit.js'][831]++;
    result.id = "qunit-testresult";
    _$jscoverage['qunit/qunit.js'][832]++;
    result.className = "result";
    _$jscoverage['qunit/qunit.js'][833]++;
    tests.parentNode.insertBefore(result, tests);
    _$jscoverage['qunit/qunit.js'][834]++;
    result.innerHTML = "Running...<br/>&nbsp;";
  }
}), reset: (function () {
  _$jscoverage['qunit/qunit.js'][840]++;
  var fixture = id("qunit-fixture");
  _$jscoverage['qunit/qunit.js'][841]++;
  if (fixture) {
    _$jscoverage['qunit/qunit.js'][842]++;
    fixture.innerHTML = config.fixture;
  }
}), triggerEvent: (function (elem, type, event) {
  _$jscoverage['qunit/qunit.js'][849]++;
  if (document.createEvent) {
    _$jscoverage['qunit/qunit.js'][850]++;
    event = document.createEvent("MouseEvents");
    _$jscoverage['qunit/qunit.js'][851]++;
    event.initMouseEvent(type, true, true, elem.ownerDocument.defaultView, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
    _$jscoverage['qunit/qunit.js'][854]++;
    elem.dispatchEvent(event);
  }
  else {
    _$jscoverage['qunit/qunit.js'][855]++;
    if (elem.fireEvent) {
      _$jscoverage['qunit/qunit.js'][856]++;
      elem.fireEvent(("on" + type));
    }
  }
}), is: (function (type, obj) {
  _$jscoverage['qunit/qunit.js'][862]++;
  return (QUnit.objectType(obj) === type);
}), objectType: (function (obj) {
  _$jscoverage['qunit/qunit.js'][866]++;
  if (((typeof obj) === "undefined")) {
    _$jscoverage['qunit/qunit.js'][867]++;
    return "undefined";
  }
  _$jscoverage['qunit/qunit.js'][870]++;
  if ((obj === null)) {
    _$jscoverage['qunit/qunit.js'][871]++;
    return "null";
  }
  _$jscoverage['qunit/qunit.js'][874]++;
  var match = toString.call(obj).match(/^\[object\s(.*)\]$/), type = ((match && match[1]) || "");
  _$jscoverage['qunit/qunit.js'][877]++;
  switch (type) {
  case "Number":
    _$jscoverage['qunit/qunit.js'][879]++;
    if (isNaN(obj)) {
      _$jscoverage['qunit/qunit.js'][880]++;
      return "nan";
    }
    _$jscoverage['qunit/qunit.js'][882]++;
    return "number";
  case "String":
  case "Boolean":
  case "Array":
  case "Date":
  case "RegExp":
  case "Function":
    _$jscoverage['qunit/qunit.js'][889]++;
    return type.toLowerCase();
  }
  _$jscoverage['qunit/qunit.js'][891]++;
  if (((typeof obj) === "object")) {
    _$jscoverage['qunit/qunit.js'][892]++;
    return "object";
  }
  _$jscoverage['qunit/qunit.js'][894]++;
  return undefined;
}), push: (function (result, actual, expected, message) {
  _$jscoverage['qunit/qunit.js'][898]++;
  if ((! config.current)) {
    _$jscoverage['qunit/qunit.js'][899]++;
    throw new Error(("assertion outside test context, was " + sourceFromStacktrace()));
  }
  _$jscoverage['qunit/qunit.js'][902]++;
  var output, source, details = {module: config.current.module, name: config.current.testName, result: result, message: message, actual: actual, expected: expected};
  _$jscoverage['qunit/qunit.js'][912]++;
  message = (escapeText(message) || (result? "okay": "failed"));
  _$jscoverage['qunit/qunit.js'][913]++;
  message = ("<span class='test-message'>" + message + "</span>");
  _$jscoverage['qunit/qunit.js'][914]++;
  output = message;
  _$jscoverage['qunit/qunit.js'][916]++;
  if ((! result)) {
    _$jscoverage['qunit/qunit.js'][917]++;
    expected = escapeText(QUnit.jsDump.parse(expected));
    _$jscoverage['qunit/qunit.js'][918]++;
    actual = escapeText(QUnit.jsDump.parse(actual));
    _$jscoverage['qunit/qunit.js'][919]++;
    output += ("<table><tr class='test-expected'><th>Expected: </th><td><pre>" + expected + "</pre></td></tr>");
    _$jscoverage['qunit/qunit.js'][921]++;
    if ((actual !== expected)) {
      _$jscoverage['qunit/qunit.js'][922]++;
      output += ("<tr class='test-actual'><th>Result: </th><td><pre>" + actual + "</pre></td></tr>");
      _$jscoverage['qunit/qunit.js'][923]++;
      output += ("<tr class='test-diff'><th>Diff: </th><td><pre>" + QUnit.diff(expected, actual) + "</pre></td></tr>");
    }
    _$jscoverage['qunit/qunit.js'][926]++;
    source = sourceFromStacktrace();
    _$jscoverage['qunit/qunit.js'][928]++;
    if (source) {
      _$jscoverage['qunit/qunit.js'][929]++;
      details.source = source;
      _$jscoverage['qunit/qunit.js'][930]++;
      output += ("<tr class='test-source'><th>Source: </th><td><pre>" + escapeText(source) + "</pre></td></tr>");
    }
    _$jscoverage['qunit/qunit.js'][933]++;
    output += "</table>";
  }
  _$jscoverage['qunit/qunit.js'][936]++;
  runLoggingCallbacks("log", QUnit, details);
  _$jscoverage['qunit/qunit.js'][938]++;
  config.current.assertions.push({result: (! (! result)), message: output});
}), pushFailure: (function (message, source, actual) {
  _$jscoverage['qunit/qunit.js'][945]++;
  if ((! config.current)) {
    _$jscoverage['qunit/qunit.js'][946]++;
    throw new Error(("pushFailure() assertion outside test context, was " + sourceFromStacktrace(2)));
  }
  _$jscoverage['qunit/qunit.js'][949]++;
  var output, details = {module: config.current.module, name: config.current.testName, result: false, message: message};
  _$jscoverage['qunit/qunit.js'][957]++;
  message = (escapeText(message) || "error");
  _$jscoverage['qunit/qunit.js'][958]++;
  message = ("<span class='test-message'>" + message + "</span>");
  _$jscoverage['qunit/qunit.js'][959]++;
  output = message;
  _$jscoverage['qunit/qunit.js'][961]++;
  output += "<table>";
  _$jscoverage['qunit/qunit.js'][963]++;
  if (actual) {
    _$jscoverage['qunit/qunit.js'][964]++;
    output += ("<tr class='test-actual'><th>Result: </th><td><pre>" + escapeText(actual) + "</pre></td></tr>");
  }
  _$jscoverage['qunit/qunit.js'][967]++;
  if (source) {
    _$jscoverage['qunit/qunit.js'][968]++;
    details.source = source;
    _$jscoverage['qunit/qunit.js'][969]++;
    output += ("<tr class='test-source'><th>Source: </th><td><pre>" + escapeText(source) + "</pre></td></tr>");
  }
  _$jscoverage['qunit/qunit.js'][972]++;
  output += "</table>";
  _$jscoverage['qunit/qunit.js'][974]++;
  runLoggingCallbacks("log", QUnit, details);
  _$jscoverage['qunit/qunit.js'][976]++;
  config.current.assertions.push({result: false, message: output});
}), url: (function (params) {
  _$jscoverage['qunit/qunit.js'][983]++;
  params = extend(extend({}, QUnit.urlParams), params);
  _$jscoverage['qunit/qunit.js'][984]++;
  var key, querystring = "?";
  _$jscoverage['qunit/qunit.js'][987]++;
  for (key in params) {
    _$jscoverage['qunit/qunit.js'][988]++;
    if ((! hasOwn.call(params, key))) {
      _$jscoverage['qunit/qunit.js'][989]++;
      continue;
    }
    _$jscoverage['qunit/qunit.js'][991]++;
    querystring += (encodeURIComponent(key) + "=" + encodeURIComponent(params[key]) + "&");
}
  _$jscoverage['qunit/qunit.js'][994]++;
  return (window.location.protocol + "//" + window.location.host + window.location.pathname + querystring.slice(0, -1));
}), extend: extend, id: id, addEvent: addEvent, addClass: addClass, hasClass: hasClass, removeClass: removeClass});
  _$jscoverage['qunit/qunit.js'][1014]++;
  extend(QUnit.constructor.prototype, {begin: registerLoggingCallback("begin"), done: registerLoggingCallback("done"), log: registerLoggingCallback("log"), testStart: registerLoggingCallback("testStart"), testDone: registerLoggingCallback("testDone"), moduleStart: registerLoggingCallback("moduleStart"), moduleDone: registerLoggingCallback("moduleDone")});
  _$jscoverage['qunit/qunit.js'][1039]++;
  if ((((typeof document) === "undefined") || (document.readyState === "complete"))) {
    _$jscoverage['qunit/qunit.js'][1040]++;
    config.autorun = true;
  }
  _$jscoverage['qunit/qunit.js'][1043]++;
  QUnit.load = (function () {
  _$jscoverage['qunit/qunit.js'][1044]++;
  runLoggingCallbacks("begin", QUnit, {});
  _$jscoverage['qunit/qunit.js'][1047]++;
  var banner, filter, i, label, len, main, ol, toolbar, userAgent, val, urlConfigCheckboxesContainer, urlConfigCheckboxes, moduleFilter, numModules = 0, moduleNames = [], moduleFilterHtml = "", urlConfigHtml = "", oldconfig = extend({}, config);
  _$jscoverage['qunit/qunit.js'][1055]++;
  QUnit.init();
  _$jscoverage['qunit/qunit.js'][1056]++;
  extend(config, oldconfig);
  _$jscoverage['qunit/qunit.js'][1058]++;
  config.blocking = false;
  _$jscoverage['qunit/qunit.js'][1060]++;
  len = config.urlConfig.length;
  _$jscoverage['qunit/qunit.js'][1062]++;
  for (i = 0; (i < len); (i++)) {
    _$jscoverage['qunit/qunit.js'][1063]++;
    val = config.urlConfig[i];
    _$jscoverage['qunit/qunit.js'][1064]++;
    if (((typeof val) === "string")) {
      _$jscoverage['qunit/qunit.js'][1065]++;
      val = {id: val, label: val, tooltip: "[no tooltip available]"};
    }
    _$jscoverage['qunit/qunit.js'][1071]++;
    config[val.id] = QUnit.urlParams[val.id];
    _$jscoverage['qunit/qunit.js'][1072]++;
    urlConfigHtml += ("<input id='qunit-urlconfig-" + escapeText(val.id) + "' name='" + escapeText(val.id) + "' type='checkbox'" + (config[val.id]? " checked='checked'": "") + " title='" + escapeText(val.tooltip) + "'><label for='qunit-urlconfig-" + escapeText(val.id) + "' title='" + escapeText(val.tooltip) + "'>" + val.label + "</label>");
}
  _$jscoverage['qunit/qunit.js'][1079]++;
  for (i in config.modules) {
    _$jscoverage['qunit/qunit.js'][1080]++;
    if (config.modules.hasOwnProperty(i)) {
      _$jscoverage['qunit/qunit.js'][1081]++;
      moduleNames.push(i);
    }
}
  _$jscoverage['qunit/qunit.js'][1084]++;
  numModules = moduleNames.length;
  _$jscoverage['qunit/qunit.js'][1085]++;
  moduleNames.sort((function (a, b) {
  _$jscoverage['qunit/qunit.js'][1086]++;
  return a.localeCompare(b);
}));
  _$jscoverage['qunit/qunit.js'][1088]++;
  moduleFilterHtml += ("<label for='qunit-modulefilter'>Module: </label><select id='qunit-modulefilter' name='modulefilter'><option value='' " + ((config.module === undefined)? "selected='selected'": "") + ">< All Modules ></option>");
  _$jscoverage['qunit/qunit.js'][1093]++;
  for (i = 0; (i < numModules); (i++)) {
    _$jscoverage['qunit/qunit.js'][1094]++;
    moduleFilterHtml += ("<option value='" + escapeText(encodeURIComponent(moduleNames[i])) + "' " + ((config.module === moduleNames[i])? "selected='selected'": "") + ">" + escapeText(moduleNames[i]) + "</option>");
}
  _$jscoverage['qunit/qunit.js'][1098]++;
  moduleFilterHtml += "</select>";
  _$jscoverage['qunit/qunit.js'][1101]++;
  userAgent = id("qunit-userAgent");
  _$jscoverage['qunit/qunit.js'][1102]++;
  if (userAgent) {
    _$jscoverage['qunit/qunit.js'][1103]++;
    userAgent.innerHTML = navigator.userAgent;
  }
  _$jscoverage['qunit/qunit.js'][1107]++;
  banner = id("qunit-header");
  _$jscoverage['qunit/qunit.js'][1108]++;
  if (banner) {
    _$jscoverage['qunit/qunit.js'][1109]++;
    banner.innerHTML = ("<a href='" + QUnit.url({filter: undefined, module: undefined, testNumber: undefined}) + "'>" + banner.innerHTML + "</a> ");
  }
  _$jscoverage['qunit/qunit.js'][1113]++;
  toolbar = id("qunit-testrunner-toolbar");
  _$jscoverage['qunit/qunit.js'][1114]++;
  if (toolbar) {
    _$jscoverage['qunit/qunit.js'][1116]++;
    filter = document.createElement("input");
    _$jscoverage['qunit/qunit.js'][1117]++;
    filter.type = "checkbox";
    _$jscoverage['qunit/qunit.js'][1118]++;
    filter.id = "qunit-filter-pass";
    _$jscoverage['qunit/qunit.js'][1120]++;
    addEvent(filter, "click", (function () {
  _$jscoverage['qunit/qunit.js'][1121]++;
  var tmp, ol = document.getElementById("qunit-tests");
  _$jscoverage['qunit/qunit.js'][1124]++;
  if (filter.checked) {
    _$jscoverage['qunit/qunit.js'][1125]++;
    ol.className = (ol.className + " hidepass");
  }
  else {
    _$jscoverage['qunit/qunit.js'][1127]++;
    tmp = (" " + ol.className.replace(/[\n\t\r]/g, " ") + " ");
    _$jscoverage['qunit/qunit.js'][1128]++;
    ol.className = tmp.replace(/ hidepass /, " ");
  }
  _$jscoverage['qunit/qunit.js'][1130]++;
  if (defined.sessionStorage) {
    _$jscoverage['qunit/qunit.js'][1131]++;
    if (filter.checked) {
      _$jscoverage['qunit/qunit.js'][1132]++;
      sessionStorage.setItem("qunit-filter-passed-tests", "true");
    }
    else {
      _$jscoverage['qunit/qunit.js'][1134]++;
      sessionStorage.removeItem("qunit-filter-passed-tests");
    }
  }
}));
    _$jscoverage['qunit/qunit.js'][1139]++;
    if ((config.hidepassed || (defined.sessionStorage && sessionStorage.getItem("qunit-filter-passed-tests")))) {
      _$jscoverage['qunit/qunit.js'][1140]++;
      filter.checked = true;
      _$jscoverage['qunit/qunit.js'][1142]++;
      ol = document.getElementById("qunit-tests");
      _$jscoverage['qunit/qunit.js'][1143]++;
      ol.className = (ol.className + " hidepass");
    }
    _$jscoverage['qunit/qunit.js'][1145]++;
    toolbar.appendChild(filter);
    _$jscoverage['qunit/qunit.js'][1148]++;
    label = document.createElement("label");
    _$jscoverage['qunit/qunit.js'][1149]++;
    label.setAttribute("for", "qunit-filter-pass");
    _$jscoverage['qunit/qunit.js'][1150]++;
    label.setAttribute("title", "Only show tests and assertions that fail. Stored in sessionStorage.");
    _$jscoverage['qunit/qunit.js'][1151]++;
    label.innerHTML = "Hide passed tests";
    _$jscoverage['qunit/qunit.js'][1152]++;
    toolbar.appendChild(label);
    _$jscoverage['qunit/qunit.js'][1154]++;
    urlConfigCheckboxesContainer = document.createElement("span");
    _$jscoverage['qunit/qunit.js'][1155]++;
    urlConfigCheckboxesContainer.innerHTML = urlConfigHtml;
    _$jscoverage['qunit/qunit.js'][1156]++;
    urlConfigCheckboxes = urlConfigCheckboxesContainer.getElementsByTagName("input");
    _$jscoverage['qunit/qunit.js'][1161]++;
    addEvents(urlConfigCheckboxes, "click", (function (event) {
  _$jscoverage['qunit/qunit.js'][1162]++;
  var params = {}, target = (event.target || event.srcElement);
  _$jscoverage['qunit/qunit.js'][1164]++;
  params[target.name] = (target.checked? true: undefined);
  _$jscoverage['qunit/qunit.js'][1165]++;
  window.location = QUnit.url(params);
}));
    _$jscoverage['qunit/qunit.js'][1167]++;
    toolbar.appendChild(urlConfigCheckboxesContainer);
    _$jscoverage['qunit/qunit.js'][1169]++;
    if ((numModules > 1)) {
      _$jscoverage['qunit/qunit.js'][1170]++;
      moduleFilter = document.createElement("span");
      _$jscoverage['qunit/qunit.js'][1171]++;
      moduleFilter.setAttribute("id", "qunit-modulefilter-container");
      _$jscoverage['qunit/qunit.js'][1172]++;
      moduleFilter.innerHTML = moduleFilterHtml;
      _$jscoverage['qunit/qunit.js'][1173]++;
      addEvent(moduleFilter.lastChild, "change", (function () {
  _$jscoverage['qunit/qunit.js'][1174]++;
  var selectBox = moduleFilter.getElementsByTagName("select")[0], selectedModule = decodeURIComponent(selectBox.options[selectBox.selectedIndex].value);
  _$jscoverage['qunit/qunit.js'][1177]++;
  window.location = QUnit.url({module: ((selectedModule === "")? undefined: selectedModule)});
}));
      _$jscoverage['qunit/qunit.js'][1179]++;
      toolbar.appendChild(moduleFilter);
    }
  }
  _$jscoverage['qunit/qunit.js'][1184]++;
  main = id("qunit-fixture");
  _$jscoverage['qunit/qunit.js'][1185]++;
  if (main) {
    _$jscoverage['qunit/qunit.js'][1186]++;
    config.fixture = main.innerHTML;
  }
  _$jscoverage['qunit/qunit.js'][1189]++;
  if (config.autostart) {
    _$jscoverage['qunit/qunit.js'][1190]++;
    QUnit.start();
  }
});
  _$jscoverage['qunit/qunit.js'][1194]++;
  addEvent(window, "load", QUnit.load);
  _$jscoverage['qunit/qunit.js'][1198]++;
  onErrorFnPrev = window.onerror;
  _$jscoverage['qunit/qunit.js'][1203]++;
  window.onerror = (function (error, filePath, linerNr) {
  _$jscoverage['qunit/qunit.js'][1204]++;
  var ret = false;
  _$jscoverage['qunit/qunit.js'][1205]++;
  if (onErrorFnPrev) {
    _$jscoverage['qunit/qunit.js'][1206]++;
    ret = onErrorFnPrev(error, filePath, linerNr);
  }
  _$jscoverage['qunit/qunit.js'][1211]++;
  if ((ret !== true)) {
    _$jscoverage['qunit/qunit.js'][1212]++;
    if (QUnit.config.current) {
      _$jscoverage['qunit/qunit.js'][1213]++;
      if (QUnit.config.current.ignoreGlobalErrors) {
        _$jscoverage['qunit/qunit.js'][1214]++;
        return true;
      }
      _$jscoverage['qunit/qunit.js'][1216]++;
      QUnit.pushFailure(error, (filePath + ":" + linerNr));
    }
    else {
      _$jscoverage['qunit/qunit.js'][1218]++;
      QUnit.test("global failure", extend((function () {
  _$jscoverage['qunit/qunit.js'][1219]++;
  QUnit.pushFailure(error, (filePath + ":" + linerNr));
}), {validTest: validTest}));
    }
    _$jscoverage['qunit/qunit.js'][1222]++;
    return false;
  }
  _$jscoverage['qunit/qunit.js'][1225]++;
  return ret;
});
  _$jscoverage['qunit/qunit.js'][1228]++;
  function done() {
    _$jscoverage['qunit/qunit.js'][1229]++;
    config.autorun = true;
    _$jscoverage['qunit/qunit.js'][1232]++;
    if (config.currentModule) {
      _$jscoverage['qunit/qunit.js'][1233]++;
      runLoggingCallbacks("moduleDone", QUnit, {name: config.currentModule, failed: config.moduleStats.bad, passed: (config.moduleStats.all - config.moduleStats.bad), total: config.moduleStats.all});
    }
    _$jscoverage['qunit/qunit.js'][1241]++;
    var i, key, banner = id("qunit-banner"), tests = id("qunit-tests"), runtime = ((+ new Date()) - config.started), passed = (config.stats.all - config.stats.bad), html = ["Tests completed in ", runtime, " milliseconds.<br/>", "<span class='passed'>", passed, "</span> assertions of <span class='total'>", config.stats.all, "</span> passed, <span class='failed'>", config.stats.bad, "</span> failed."].join("");
    _$jscoverage['qunit/qunit.js'][1259]++;
    if (banner) {
      _$jscoverage['qunit/qunit.js'][1260]++;
      banner.className = (config.stats.bad? "qunit-fail": "qunit-pass");
    }
    _$jscoverage['qunit/qunit.js'][1263]++;
    if (tests) {
      _$jscoverage['qunit/qunit.js'][1264]++;
      id("qunit-testresult").innerHTML = html;
    }
    _$jscoverage['qunit/qunit.js'][1267]++;
    if ((config.altertitle && ((typeof document) !== "undefined") && document.title)) {
      _$jscoverage['qunit/qunit.js'][1270]++;
      document.title = [(config.stats.bad? "\u2716": "\u2714"), document.title.replace(/^[\u2714\u2716] /i, "")].join(" ");
    }
    _$jscoverage['qunit/qunit.js'][1277]++;
    if ((config.reorder && defined.sessionStorage && (config.stats.bad === 0))) {
      _$jscoverage['qunit/qunit.js'][1279]++;
      for (i = 0; (i < sessionStorage.length); (i++)) {
        _$jscoverage['qunit/qunit.js'][1280]++;
        key = sessionStorage.key((i++));
        _$jscoverage['qunit/qunit.js'][1281]++;
        if ((key.indexOf("qunit-test-") === 0)) {
          _$jscoverage['qunit/qunit.js'][1282]++;
          sessionStorage.removeItem(key);
        }
}
    }
    _$jscoverage['qunit/qunit.js'][1288]++;
    if (window.scrollTo) {
      _$jscoverage['qunit/qunit.js'][1289]++;
      window.scrollTo(0, 0);
    }
    _$jscoverage['qunit/qunit.js'][1292]++;
    runLoggingCallbacks("done", QUnit, {failed: config.stats.bad, passed: passed, total: config.stats.all, runtime: runtime});
}
  _$jscoverage['qunit/qunit.js'][1301]++;
  function validTest(test) {
    _$jscoverage['qunit/qunit.js'][1302]++;
    var include, filter = (config.filter && config.filter.toLowerCase()), module = (config.module && config.module.toLowerCase()), fullName = (test.module + ": " + test.testName).toLowerCase();
    _$jscoverage['qunit/qunit.js'][1308]++;
    if ((test.callback && (test.callback.validTest === validTest))) {
      _$jscoverage['qunit/qunit.js'][1309]++;
      (delete test.callback.validTest);
      _$jscoverage['qunit/qunit.js'][1310]++;
      return true;
    }
    _$jscoverage['qunit/qunit.js'][1313]++;
    if (config.testNumber) {
      _$jscoverage['qunit/qunit.js'][1314]++;
      return (test.testNumber === config.testNumber);
    }
    _$jscoverage['qunit/qunit.js'][1317]++;
    if ((module && ((! test.module) || (test.module.toLowerCase() !== module)))) {
      _$jscoverage['qunit/qunit.js'][1318]++;
      return false;
    }
    _$jscoverage['qunit/qunit.js'][1321]++;
    if ((! filter)) {
      _$jscoverage['qunit/qunit.js'][1322]++;
      return true;
    }
    _$jscoverage['qunit/qunit.js'][1325]++;
    include = (filter.charAt(0) !== "!");
    _$jscoverage['qunit/qunit.js'][1326]++;
    if ((! include)) {
      _$jscoverage['qunit/qunit.js'][1327]++;
      filter = filter.slice(1);
    }
    _$jscoverage['qunit/qunit.js'][1331]++;
    if ((fullName.indexOf(filter) !== -1)) {
      _$jscoverage['qunit/qunit.js'][1332]++;
      return include;
    }
    _$jscoverage['qunit/qunit.js'][1336]++;
    return (! include);
}
  _$jscoverage['qunit/qunit.js'][1342]++;
  function extractStacktrace(e, offset) {
    _$jscoverage['qunit/qunit.js'][1343]++;
    offset = ((offset === undefined)? 3: offset);
    _$jscoverage['qunit/qunit.js'][1345]++;
    var stack, include, i;
    _$jscoverage['qunit/qunit.js'][1347]++;
    if (e.stacktrace) {
      _$jscoverage['qunit/qunit.js'][1349]++;
      return e.stacktrace.split("\n")[(offset + 3)];
    }
    else {
      _$jscoverage['qunit/qunit.js'][1350]++;
      if (e.stack) {
        _$jscoverage['qunit/qunit.js'][1352]++;
        stack = e.stack.split("\n");
        _$jscoverage['qunit/qunit.js'][1353]++;
        if (/^error$/i.test(stack[0])) {
          _$jscoverage['qunit/qunit.js'][1354]++;
          stack.shift();
        }
        _$jscoverage['qunit/qunit.js'][1356]++;
        if (fileName) {
          _$jscoverage['qunit/qunit.js'][1357]++;
          include = [];
          _$jscoverage['qunit/qunit.js'][1358]++;
          for (i = offset; (i < stack.length); (i++)) {
            _$jscoverage['qunit/qunit.js'][1359]++;
            if ((stack[i].indexOf(fileName) !== -1)) {
              _$jscoverage['qunit/qunit.js'][1360]++;
              break;
            }
            _$jscoverage['qunit/qunit.js'][1362]++;
            include.push(stack[i]);
}
          _$jscoverage['qunit/qunit.js'][1364]++;
          if (include.length) {
            _$jscoverage['qunit/qunit.js'][1365]++;
            return include.join("\n");
          }
        }
        _$jscoverage['qunit/qunit.js'][1368]++;
        return stack[offset];
      }
      else {
        _$jscoverage['qunit/qunit.js'][1369]++;
        if (e.sourceURL) {
          _$jscoverage['qunit/qunit.js'][1373]++;
          if (/qunit.js$/.test(e.sourceURL)) {
            _$jscoverage['qunit/qunit.js'][1374]++;
            return;
          }
          _$jscoverage['qunit/qunit.js'][1377]++;
          return (e.sourceURL + ":" + e.line);
        }
      }
    }
}
  _$jscoverage['qunit/qunit.js'][1380]++;
  function sourceFromStacktrace(offset) {
    _$jscoverage['qunit/qunit.js'][1381]++;
    try {
      _$jscoverage['qunit/qunit.js'][1382]++;
      throw new Error();
    }
    catch (e) {
      _$jscoverage['qunit/qunit.js'][1384]++;
      return extractStacktrace(e, offset);
    }
}
  _$jscoverage['qunit/qunit.js'][1391]++;
  function escapeText(s) {
    _$jscoverage['qunit/qunit.js'][1392]++;
    if ((! s)) {
      _$jscoverage['qunit/qunit.js'][1393]++;
      return "";
    }
    _$jscoverage['qunit/qunit.js'][1395]++;
    s = (s + "");
    _$jscoverage['qunit/qunit.js'][1397]++;
    return s.replace(/['"<>&]/g, (function (s) {
  _$jscoverage['qunit/qunit.js'][1398]++;
  switch (s) {
  case "'":
    _$jscoverage['qunit/qunit.js'][1400]++;
    return "&#039;";
  case "\"":
    _$jscoverage['qunit/qunit.js'][1402]++;
    return "&quot;";
  case "<":
    _$jscoverage['qunit/qunit.js'][1404]++;
    return "&lt;";
  case ">":
    _$jscoverage['qunit/qunit.js'][1406]++;
    return "&gt;";
  case "&":
    _$jscoverage['qunit/qunit.js'][1408]++;
    return "&amp;";
  }
}));
}
  _$jscoverage['qunit/qunit.js'][1413]++;
  function synchronize(callback, last) {
    _$jscoverage['qunit/qunit.js'][1414]++;
    config.queue.push(callback);
    _$jscoverage['qunit/qunit.js'][1416]++;
    if ((config.autorun && (! config.blocking))) {
      _$jscoverage['qunit/qunit.js'][1417]++;
      process(last);
    }
}
  _$jscoverage['qunit/qunit.js'][1421]++;
  function process(last) {
    _$jscoverage['qunit/qunit.js'][1422]++;
    function next() {
      _$jscoverage['qunit/qunit.js'][1423]++;
      process(last);
}
    _$jscoverage['qunit/qunit.js'][1425]++;
    var start = new Date().getTime();
    _$jscoverage['qunit/qunit.js'][1426]++;
    config.depth = (config.depth? (config.depth + 1): 1);
    _$jscoverage['qunit/qunit.js'][1428]++;
    while ((config.queue.length && (! config.blocking))) {
      _$jscoverage['qunit/qunit.js'][1429]++;
      if (((! defined.setTimeout) || (config.updateRate <= 0) || ((new Date().getTime() - start) < config.updateRate))) {
        _$jscoverage['qunit/qunit.js'][1430]++;
        (config.queue.shift())();
      }
      else {
        _$jscoverage['qunit/qunit.js'][1432]++;
        window.setTimeout(next, 13);
        _$jscoverage['qunit/qunit.js'][1433]++;
        break;
      }
}
    _$jscoverage['qunit/qunit.js'][1436]++;
    (config.depth--);
    _$jscoverage['qunit/qunit.js'][1437]++;
    if ((last && (! config.blocking) && (! config.queue.length) && (config.depth === 0))) {
      _$jscoverage['qunit/qunit.js'][1438]++;
      done();
    }
}
  _$jscoverage['qunit/qunit.js'][1442]++;
  function saveGlobal() {
    _$jscoverage['qunit/qunit.js'][1443]++;
    config.pollution = [];
    _$jscoverage['qunit/qunit.js'][1445]++;
    if (config.noglobals) {
      _$jscoverage['qunit/qunit.js'][1446]++;
      for (var key in window) {
        _$jscoverage['qunit/qunit.js'][1448]++;
        if (((! hasOwn.call(window, key)) || /^qunit-test-output/.test(key))) {
          _$jscoverage['qunit/qunit.js'][1449]++;
          continue;
        }
        _$jscoverage['qunit/qunit.js'][1451]++;
        config.pollution.push(key);
}
    }
}
  _$jscoverage['qunit/qunit.js'][1456]++;
  function checkPollution() {
    _$jscoverage['qunit/qunit.js'][1457]++;
    var newGlobals, deletedGlobals, old = config.pollution;
    _$jscoverage['qunit/qunit.js'][1461]++;
    saveGlobal();
    _$jscoverage['qunit/qunit.js'][1463]++;
    newGlobals = diff(config.pollution, old);
    _$jscoverage['qunit/qunit.js'][1464]++;
    if ((newGlobals.length > 0)) {
      _$jscoverage['qunit/qunit.js'][1465]++;
      QUnit.pushFailure(("Introduced global variable(s): " + newGlobals.join(", ")));
    }
    _$jscoverage['qunit/qunit.js'][1468]++;
    deletedGlobals = diff(old, config.pollution);
    _$jscoverage['qunit/qunit.js'][1469]++;
    if ((deletedGlobals.length > 0)) {
      _$jscoverage['qunit/qunit.js'][1470]++;
      QUnit.pushFailure(("Deleted global variable(s): " + deletedGlobals.join(", ")));
    }
}
  _$jscoverage['qunit/qunit.js'][1475]++;
  function diff(a, b) {
    _$jscoverage['qunit/qunit.js'][1476]++;
    var i, j, result = a.slice();
    _$jscoverage['qunit/qunit.js'][1479]++;
    for (i = 0; (i < result.length); (i++)) {
      _$jscoverage['qunit/qunit.js'][1480]++;
      for (j = 0; (j < b.length); (j++)) {
        _$jscoverage['qunit/qunit.js'][1481]++;
        if ((result[i] === b[j])) {
          _$jscoverage['qunit/qunit.js'][1482]++;
          result.splice(i, 1);
          _$jscoverage['qunit/qunit.js'][1483]++;
          (i--);
          _$jscoverage['qunit/qunit.js'][1484]++;
          break;
        }
}
}
    _$jscoverage['qunit/qunit.js'][1488]++;
    return result;
}
  _$jscoverage['qunit/qunit.js'][1491]++;
  function extend(a, b) {
    _$jscoverage['qunit/qunit.js'][1492]++;
    for (var prop in b) {
      _$jscoverage['qunit/qunit.js'][1493]++;
      if ((b[prop] === undefined)) {
        _$jscoverage['qunit/qunit.js'][1494]++;
        (delete a[prop]);
      }
      else {
        _$jscoverage['qunit/qunit.js'][1497]++;
        if (((prop !== "constructor") || (a !== window))) {
          _$jscoverage['qunit/qunit.js'][1498]++;
          a[prop] = b[prop];
        }
      }
}
    _$jscoverage['qunit/qunit.js'][1502]++;
    return a;
}
  _$jscoverage['qunit/qunit.js'][1510]++;
  function addEvent(elem, type, fn) {
    _$jscoverage['qunit/qunit.js'][1512]++;
    if (elem.addEventListener) {
      _$jscoverage['qunit/qunit.js'][1513]++;
      elem.addEventListener(type, fn, false);
    }
    else {
      _$jscoverage['qunit/qunit.js'][1516]++;
      elem.attachEvent(("on" + type), fn);
    }
}
  _$jscoverage['qunit/qunit.js'][1525]++;
  function addEvents(elems, type, fn) {
    _$jscoverage['qunit/qunit.js'][1526]++;
    var i = elems.length;
    _$jscoverage['qunit/qunit.js'][1527]++;
    while ((i--)) {
      _$jscoverage['qunit/qunit.js'][1528]++;
      addEvent(elems[i], type, fn);
}
}
  _$jscoverage['qunit/qunit.js'][1532]++;
  function hasClass(elem, name) {
    _$jscoverage['qunit/qunit.js'][1533]++;
    return ((" " + elem.className + " ").indexOf((" " + name + " ")) > -1);
}
  _$jscoverage['qunit/qunit.js'][1536]++;
  function addClass(elem, name) {
    _$jscoverage['qunit/qunit.js'][1537]++;
    if ((! hasClass(elem, name))) {
      _$jscoverage['qunit/qunit.js'][1538]++;
      elem.className += ((elem.className? " ": "") + name);
    }
}
  _$jscoverage['qunit/qunit.js'][1542]++;
  function removeClass(elem, name) {
    _$jscoverage['qunit/qunit.js'][1543]++;
    var set = (" " + elem.className + " ");
    _$jscoverage['qunit/qunit.js'][1545]++;
    while ((set.indexOf((" " + name + " ")) > -1)) {
      _$jscoverage['qunit/qunit.js'][1546]++;
      set = set.replace((" " + name + " "), " ");
}
    _$jscoverage['qunit/qunit.js'][1549]++;
    elem.className = (window.jQuery? jQuery.trim(set): (set.trim? set.trim(): set));
}
  _$jscoverage['qunit/qunit.js'][1552]++;
  function id(name) {
    _$jscoverage['qunit/qunit.js'][1553]++;
    return ((! (! (((typeof document) !== "undefined") && document && document.getElementById))) && document.getElementById(name));
}
  _$jscoverage['qunit/qunit.js'][1557]++;
  function registerLoggingCallback(key) {
    _$jscoverage['qunit/qunit.js'][1558]++;
    return (function (callback) {
  _$jscoverage['qunit/qunit.js'][1559]++;
  config[key].push(callback);
});
}
  _$jscoverage['qunit/qunit.js'][1564]++;
  function runLoggingCallbacks(key, scope, args) {
    _$jscoverage['qunit/qunit.js'][1565]++;
    var i, callbacks;
    _$jscoverage['qunit/qunit.js'][1566]++;
    if (QUnit.hasOwnProperty(key)) {
      _$jscoverage['qunit/qunit.js'][1567]++;
      QUnit[key].call(scope, args);
    }
    else {
      _$jscoverage['qunit/qunit.js'][1569]++;
      callbacks = config[key];
      _$jscoverage['qunit/qunit.js'][1570]++;
      for (i = 0; (i < callbacks.length); (i++)) {
        _$jscoverage['qunit/qunit.js'][1571]++;
        callbacks[i].call(scope, args);
}
    }
}
  _$jscoverage['qunit/qunit.js'][1578]++;
  QUnit.equiv = (function () {
  _$jscoverage['qunit/qunit.js'][1581]++;
  function bindCallbacks(o, callbacks, args) {
    _$jscoverage['qunit/qunit.js'][1582]++;
    var prop = QUnit.objectType(o);
    _$jscoverage['qunit/qunit.js'][1583]++;
    if (prop) {
      _$jscoverage['qunit/qunit.js'][1584]++;
      if ((QUnit.objectType(callbacks[prop]) === "function")) {
        _$jscoverage['qunit/qunit.js'][1585]++;
        return callbacks[prop].apply(callbacks, args);
      }
      else {
        _$jscoverage['qunit/qunit.js'][1587]++;
        return callbacks[prop];
      }
    }
}
  _$jscoverage['qunit/qunit.js'][1593]++;
  var innerEquiv, callers = [], parents = [], parentsB = [], getProto = (Object.getPrototypeOf || (function (obj) {
  _$jscoverage['qunit/qunit.js'][1601]++;
  return obj.__proto__;
})), callbacks = (function () {
  _$jscoverage['qunit/qunit.js'][1606]++;
  function useStrictEquality(b, a) {
    _$jscoverage['qunit/qunit.js'][1608]++;
    if (((b instanceof a.constructor) || (a instanceof b.constructor))) {
      _$jscoverage['qunit/qunit.js'][1613]++;
      return (a == b);
    }
    else {
      _$jscoverage['qunit/qunit.js'][1615]++;
      return (a === b);
    }
}
  _$jscoverage['qunit/qunit.js'][1619]++;
  return ({"string": useStrictEquality, "boolean": useStrictEquality, "number": useStrictEquality, "null": useStrictEquality, "undefined": useStrictEquality, "nan": (function (b) {
  _$jscoverage['qunit/qunit.js'][1627]++;
  return isNaN(b);
}), "date": (function (b, a) {
  _$jscoverage['qunit/qunit.js'][1631]++;
  return ((QUnit.objectType(b) === "date") && (a.valueOf() === b.valueOf()));
}), "regexp": (function (b, a) {
  _$jscoverage['qunit/qunit.js'][1635]++;
  return ((QUnit.objectType(b) === "regexp") && (a.source === b.source) && (a.global === b.global) && (a.ignoreCase === b.ignoreCase) && (a.multiline === b.multiline) && (a.sticky === b.sticky));
}), "function": (function () {
  _$jscoverage['qunit/qunit.js'][1650]++;
  var caller = callers[(callers.length - 1)];
  _$jscoverage['qunit/qunit.js'][1651]++;
  return ((caller !== Object) && ((typeof caller) !== "undefined"));
}), "array": (function (b, a) {
  _$jscoverage['qunit/qunit.js'][1655]++;
  var i, j, len, loop, aCircular, bCircular;
  _$jscoverage['qunit/qunit.js'][1658]++;
  if ((QUnit.objectType(b) !== "array")) {
    _$jscoverage['qunit/qunit.js'][1659]++;
    return false;
  }
  _$jscoverage['qunit/qunit.js'][1662]++;
  len = a.length;
  _$jscoverage['qunit/qunit.js'][1663]++;
  if ((len !== b.length)) {
    _$jscoverage['qunit/qunit.js'][1665]++;
    return false;
  }
  _$jscoverage['qunit/qunit.js'][1669]++;
  parents.push(a);
  _$jscoverage['qunit/qunit.js'][1670]++;
  parentsB.push(b);
  _$jscoverage['qunit/qunit.js'][1671]++;
  for (i = 0; (i < len); (i++)) {
    _$jscoverage['qunit/qunit.js'][1672]++;
    loop = false;
    _$jscoverage['qunit/qunit.js'][1673]++;
    for (j = 0; (j < parents.length); (j++)) {
      _$jscoverage['qunit/qunit.js'][1674]++;
      aCircular = (parents[j] === a[i]);
      _$jscoverage['qunit/qunit.js'][1675]++;
      bCircular = (parentsB[j] === b[i]);
      _$jscoverage['qunit/qunit.js'][1676]++;
      if ((aCircular || bCircular)) {
        _$jscoverage['qunit/qunit.js'][1677]++;
        if (((a[i] === b[i]) || (aCircular && bCircular))) {
          _$jscoverage['qunit/qunit.js'][1678]++;
          loop = true;
        }
        else {
          _$jscoverage['qunit/qunit.js'][1680]++;
          parents.pop();
          _$jscoverage['qunit/qunit.js'][1681]++;
          parentsB.pop();
          _$jscoverage['qunit/qunit.js'][1682]++;
          return false;
        }
      }
}
    _$jscoverage['qunit/qunit.js'][1686]++;
    if (((! loop) && (! innerEquiv(a[i], b[i])))) {
      _$jscoverage['qunit/qunit.js'][1687]++;
      parents.pop();
      _$jscoverage['qunit/qunit.js'][1688]++;
      parentsB.pop();
      _$jscoverage['qunit/qunit.js'][1689]++;
      return false;
    }
}
  _$jscoverage['qunit/qunit.js'][1692]++;
  parents.pop();
  _$jscoverage['qunit/qunit.js'][1693]++;
  parentsB.pop();
  _$jscoverage['qunit/qunit.js'][1694]++;
  return true;
}), "object": (function (b, a) {
  _$jscoverage['qunit/qunit.js'][1698]++;
  var i, j, loop, aCircular, bCircular, eq = true, aProperties = [], bProperties = [];
  _$jscoverage['qunit/qunit.js'][1706]++;
  if ((a.constructor !== b.constructor)) {
    _$jscoverage['qunit/qunit.js'][1709]++;
    if ((! (((getProto(a) === null) && (getProto(b) === Object.prototype)) || ((getProto(b) === null) && (getProto(a) === Object.prototype))))) {
      _$jscoverage['qunit/qunit.js'][1711]++;
      return false;
    }
  }
  _$jscoverage['qunit/qunit.js'][1716]++;
  callers.push(a.constructor);
  _$jscoverage['qunit/qunit.js'][1719]++;
  parents.push(a);
  _$jscoverage['qunit/qunit.js'][1720]++;
  parentsB.push(b);
  _$jscoverage['qunit/qunit.js'][1723]++;
  for (i in a) {
    _$jscoverage['qunit/qunit.js'][1724]++;
    loop = false;
    _$jscoverage['qunit/qunit.js'][1725]++;
    for (j = 0; (j < parents.length); (j++)) {
      _$jscoverage['qunit/qunit.js'][1726]++;
      aCircular = (parents[j] === a[i]);
      _$jscoverage['qunit/qunit.js'][1727]++;
      bCircular = (parentsB[j] === b[i]);
      _$jscoverage['qunit/qunit.js'][1728]++;
      if ((aCircular || bCircular)) {
        _$jscoverage['qunit/qunit.js'][1729]++;
        if (((a[i] === b[i]) || (aCircular && bCircular))) {
          _$jscoverage['qunit/qunit.js'][1730]++;
          loop = true;
        }
        else {
          _$jscoverage['qunit/qunit.js'][1732]++;
          eq = false;
          _$jscoverage['qunit/qunit.js'][1733]++;
          break;
        }
      }
}
    _$jscoverage['qunit/qunit.js'][1737]++;
    aProperties.push(i);
    _$jscoverage['qunit/qunit.js'][1738]++;
    if (((! loop) && (! innerEquiv(a[i], b[i])))) {
      _$jscoverage['qunit/qunit.js'][1739]++;
      eq = false;
      _$jscoverage['qunit/qunit.js'][1740]++;
      break;
    }
}
  _$jscoverage['qunit/qunit.js'][1744]++;
  parents.pop();
  _$jscoverage['qunit/qunit.js'][1745]++;
  parentsB.pop();
  _$jscoverage['qunit/qunit.js'][1746]++;
  callers.pop();
  _$jscoverage['qunit/qunit.js'][1748]++;
  for (i in b) {
    _$jscoverage['qunit/qunit.js'][1749]++;
    bProperties.push(i);
}
  _$jscoverage['qunit/qunit.js'][1753]++;
  return (eq && innerEquiv(aProperties.sort(), bProperties.sort()));
})});
})();
  _$jscoverage['qunit/qunit.js'][1758]++;
  innerEquiv = (function () {
  _$jscoverage['qunit/qunit.js'][1759]++;
  var args = [].slice.apply(arguments);
  _$jscoverage['qunit/qunit.js'][1760]++;
  if ((args.length < 2)) {
    _$jscoverage['qunit/qunit.js'][1761]++;
    return true;
  }
  _$jscoverage['qunit/qunit.js'][1764]++;
  return ((function (a, b) {
  _$jscoverage['qunit/qunit.js'][1765]++;
  if ((a === b)) {
    _$jscoverage['qunit/qunit.js'][1766]++;
    return true;
  }
  else {
    _$jscoverage['qunit/qunit.js'][1767]++;
    if (((a === null) || (b === null) || ((typeof a) === "undefined") || ((typeof b) === "undefined") || (QUnit.objectType(a) !== QUnit.objectType(b)))) {
      _$jscoverage['qunit/qunit.js'][1770]++;
      return false;
    }
    else {
      _$jscoverage['qunit/qunit.js'][1772]++;
      return bindCallbacks(a, callbacks, [b, a]);
    }
  }
})(args[0], args[1]) && arguments.callee.apply(this, args.splice(1, (args.length - 1))));
});
  _$jscoverage['qunit/qunit.js'][1779]++;
  return innerEquiv;
})();
  _$jscoverage['qunit/qunit.js'][1792]++;
  QUnit.jsDump = (function () {
  _$jscoverage['qunit/qunit.js'][1793]++;
  function quote(str) {
    _$jscoverage['qunit/qunit.js'][1794]++;
    return ("\"" + str.toString().replace(/"/g, "\\\"") + "\"");
}
  _$jscoverage['qunit/qunit.js'][1796]++;
  function literal(o) {
    _$jscoverage['qunit/qunit.js'][1797]++;
    return (o + "");
}
  _$jscoverage['qunit/qunit.js'][1799]++;
  function join(pre, arr, post) {
    _$jscoverage['qunit/qunit.js'][1800]++;
    var s = jsDump.separator(), base = jsDump.indent(), inner = jsDump.indent(1);
    _$jscoverage['qunit/qunit.js'][1803]++;
    if (arr.join) {
      _$jscoverage['qunit/qunit.js'][1804]++;
      arr = arr.join(("," + s + inner));
    }
    _$jscoverage['qunit/qunit.js'][1806]++;
    if ((! arr)) {
      _$jscoverage['qunit/qunit.js'][1807]++;
      return (pre + post);
    }
    _$jscoverage['qunit/qunit.js'][1809]++;
    return [pre, (inner + arr), (base + post)].join(s);
}
  _$jscoverage['qunit/qunit.js'][1811]++;
  function array(arr, stack) {
    _$jscoverage['qunit/qunit.js'][1812]++;
    var i = arr.length, ret = new Array(i);
    _$jscoverage['qunit/qunit.js'][1813]++;
    this.up();
    _$jscoverage['qunit/qunit.js'][1814]++;
    while ((i--)) {
      _$jscoverage['qunit/qunit.js'][1815]++;
      ret[i] = this.parse(arr[i], undefined, stack);
}
    _$jscoverage['qunit/qunit.js'][1817]++;
    this.down();
    _$jscoverage['qunit/qunit.js'][1818]++;
    return join("[", ret, "]");
}
  _$jscoverage['qunit/qunit.js'][1821]++;
  var reName = /^function (\w+)/, jsDump = {parse: (function (obj, type, stack) {
  _$jscoverage['qunit/qunit.js'][1825]++;
  stack = (stack || []);
  _$jscoverage['qunit/qunit.js'][1826]++;
  var inStack, res, parser = this.parsers[(type || this.typeOf(obj))];
  _$jscoverage['qunit/qunit.js'][1829]++;
  type = (typeof parser);
  _$jscoverage['qunit/qunit.js'][1830]++;
  inStack = inArray(obj, stack);
  _$jscoverage['qunit/qunit.js'][1832]++;
  if ((inStack !== -1)) {
    _$jscoverage['qunit/qunit.js'][1833]++;
    return ("recursion(" + (inStack - stack.length) + ")");
  }
  _$jscoverage['qunit/qunit.js'][1835]++;
  if ((type === "function")) {
    _$jscoverage['qunit/qunit.js'][1836]++;
    stack.push(obj);
    _$jscoverage['qunit/qunit.js'][1837]++;
    res = parser.call(this, obj, stack);
    _$jscoverage['qunit/qunit.js'][1838]++;
    stack.pop();
    _$jscoverage['qunit/qunit.js'][1839]++;
    return res;
  }
  _$jscoverage['qunit/qunit.js'][1841]++;
  return ((type === "string")? parser: this.parsers.error);
}), typeOf: (function (obj) {
  _$jscoverage['qunit/qunit.js'][1844]++;
  var type;
  _$jscoverage['qunit/qunit.js'][1845]++;
  if ((obj === null)) {
    _$jscoverage['qunit/qunit.js'][1846]++;
    type = "null";
  }
  else {
    _$jscoverage['qunit/qunit.js'][1847]++;
    if (((typeof obj) === "undefined")) {
      _$jscoverage['qunit/qunit.js'][1848]++;
      type = "undefined";
    }
    else {
      _$jscoverage['qunit/qunit.js'][1849]++;
      if (QUnit.is("regexp", obj)) {
        _$jscoverage['qunit/qunit.js'][1850]++;
        type = "regexp";
      }
      else {
        _$jscoverage['qunit/qunit.js'][1851]++;
        if (QUnit.is("date", obj)) {
          _$jscoverage['qunit/qunit.js'][1852]++;
          type = "date";
        }
        else {
          _$jscoverage['qunit/qunit.js'][1853]++;
          if (QUnit.is("function", obj)) {
            _$jscoverage['qunit/qunit.js'][1854]++;
            type = "function";
          }
          else {
            _$jscoverage['qunit/qunit.js'][1855]++;
            if ((((typeof obj.setInterval) !== undefined) && ((typeof obj.document) !== "undefined") && ((typeof obj.nodeType) === "undefined"))) {
              _$jscoverage['qunit/qunit.js'][1856]++;
              type = "window";
            }
            else {
              _$jscoverage['qunit/qunit.js'][1857]++;
              if ((obj.nodeType === 9)) {
                _$jscoverage['qunit/qunit.js'][1858]++;
                type = "document";
              }
              else {
                _$jscoverage['qunit/qunit.js'][1859]++;
                if (obj.nodeType) {
                  _$jscoverage['qunit/qunit.js'][1860]++;
                  type = "node";
                }
                else {
                  _$jscoverage['qunit/qunit.js'][1861]++;
                  if (((toString.call(obj) === "[object Array]") || (((typeof obj.length) === "number") && ((typeof obj.item) !== "undefined") && (obj.length? (obj.item(0) === obj[0]): ((obj.item(0) === null) && ((typeof obj[0]) === "undefined")))))) {
                    _$jscoverage['qunit/qunit.js'][1867]++;
                    type = "array";
                  }
                  else {
                    _$jscoverage['qunit/qunit.js'][1868]++;
                    if ((obj.constructor === Error.prototype.constructor)) {
                      _$jscoverage['qunit/qunit.js'][1869]++;
                      type = "error";
                    }
                    else {
                      _$jscoverage['qunit/qunit.js'][1871]++;
                      type = (typeof obj);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  _$jscoverage['qunit/qunit.js'][1873]++;
  return type;
}), separator: (function () {
  _$jscoverage['qunit/qunit.js'][1876]++;
  return (this.multiline? (this.HTML? "<br />": "\n"): (this.HTML? "&nbsp;": " "));
}), indent: (function (extra) {
  _$jscoverage['qunit/qunit.js'][1880]++;
  if ((! this.multiline)) {
    _$jscoverage['qunit/qunit.js'][1881]++;
    return "";
  }
  _$jscoverage['qunit/qunit.js'][1883]++;
  var chr = this.indentChar;
  _$jscoverage['qunit/qunit.js'][1884]++;
  if (this.HTML) {
    _$jscoverage['qunit/qunit.js'][1885]++;
    chr = chr.replace(/\t/g, "   ").replace(/ /g, "&nbsp;");
  }
  _$jscoverage['qunit/qunit.js'][1887]++;
  return new Array((this._depth_ + (extra || 0))).join(chr);
}), up: (function (a) {
  _$jscoverage['qunit/qunit.js'][1890]++;
  this._depth_ += (a || 1);
}), down: (function (a) {
  _$jscoverage['qunit/qunit.js'][1893]++;
  this._depth_ -= (a || 1);
}), setParser: (function (name, parser) {
  _$jscoverage['qunit/qunit.js'][1896]++;
  this.parsers[name] = parser;
}), quote: quote, literal: literal, join: join, _depth_: 1, parsers: {window: "[Window]", document: "[Document]", error: (function (error) {
  _$jscoverage['qunit/qunit.js'][1909]++;
  return ("Error(\"" + error.message + "\")");
}), unknown: "[Unknown]", "null": "null", "undefined": "undefined", "function": (function (fn) {
  _$jscoverage['qunit/qunit.js'][1915]++;
  var ret = "function", name = (("name" in fn)? fn.name: (reName.exec(fn) || [])[1]);
  _$jscoverage['qunit/qunit.js'][1919]++;
  if (name) {
    _$jscoverage['qunit/qunit.js'][1920]++;
    ret += (" " + name);
  }
  _$jscoverage['qunit/qunit.js'][1922]++;
  ret += "( ";
  _$jscoverage['qunit/qunit.js'][1924]++;
  ret = [ret, QUnit.jsDump.parse(fn, "functionArgs"), "){"].join("");
  _$jscoverage['qunit/qunit.js'][1925]++;
  return join(ret, QUnit.jsDump.parse(fn, "functionCode"), "}");
}), array: array, nodelist: array, "arguments": array, object: (function (map, stack) {
  _$jscoverage['qunit/qunit.js'][1931]++;
  var ret = [], keys, key, val, i;
  _$jscoverage['qunit/qunit.js'][1932]++;
  QUnit.jsDump.up();
  _$jscoverage['qunit/qunit.js'][1933]++;
  keys = [];
  _$jscoverage['qunit/qunit.js'][1934]++;
  for (key in map) {
    _$jscoverage['qunit/qunit.js'][1935]++;
    keys.push(key);
}
  _$jscoverage['qunit/qunit.js'][1937]++;
  keys.sort();
  _$jscoverage['qunit/qunit.js'][1938]++;
  for (i = 0; (i < keys.length); (i++)) {
    _$jscoverage['qunit/qunit.js'][1939]++;
    key = keys[i];
    _$jscoverage['qunit/qunit.js'][1940]++;
    val = map[key];
    _$jscoverage['qunit/qunit.js'][1941]++;
    ret.push((QUnit.jsDump.parse(key, "key") + ": " + QUnit.jsDump.parse(val, undefined, stack)));
}
  _$jscoverage['qunit/qunit.js'][1943]++;
  QUnit.jsDump.down();
  _$jscoverage['qunit/qunit.js'][1944]++;
  return join("{", ret, "}");
}), node: (function (node) {
  _$jscoverage['qunit/qunit.js'][1947]++;
  var len, i, val, open = (QUnit.jsDump.HTML? "&lt;": "<"), close = (QUnit.jsDump.HTML? "&gt;": ">"), tag = node.nodeName.toLowerCase(), ret = (open + tag), attrs = node.attributes;
  _$jscoverage['qunit/qunit.js'][1954]++;
  if (attrs) {
    _$jscoverage['qunit/qunit.js'][1955]++;
    for (((i = 0), (len = attrs.length)); (i < len); (i++)) {
      _$jscoverage['qunit/qunit.js'][1956]++;
      val = attrs[i].nodeValue;
      _$jscoverage['qunit/qunit.js'][1959]++;
      if ((val && (val !== "inherit"))) {
        _$jscoverage['qunit/qunit.js'][1960]++;
        ret += (" " + attrs[i].nodeName + "=" + QUnit.jsDump.parse(val, "attribute"));
      }
}
  }
  _$jscoverage['qunit/qunit.js'][1964]++;
  ret += close;
  _$jscoverage['qunit/qunit.js'][1967]++;
  if (((node.nodeType === 3) || (node.nodeType === 4))) {
    _$jscoverage['qunit/qunit.js'][1968]++;
    ret += node.nodeValue;
  }
  _$jscoverage['qunit/qunit.js'][1971]++;
  return (ret + open + "/" + tag + close);
}), functionArgs: (function (fn) {
  _$jscoverage['qunit/qunit.js'][1975]++;
  var args, l = fn.length;
  _$jscoverage['qunit/qunit.js'][1978]++;
  if ((! l)) {
    _$jscoverage['qunit/qunit.js'][1979]++;
    return "";
  }
  _$jscoverage['qunit/qunit.js'][1982]++;
  args = new Array(l);
  _$jscoverage['qunit/qunit.js'][1983]++;
  while ((l--)) {
    _$jscoverage['qunit/qunit.js'][1985]++;
    args[l] = String.fromCharCode((97 + l));
}
  _$jscoverage['qunit/qunit.js'][1987]++;
  return (" " + args.join(", ") + " ");
}), key: quote, functionCode: "[code]", attribute: quote, string: quote, date: quote, regexp: literal, number: literal, "boolean": literal}, HTML: false, indentChar: "  ", multiline: true};
  _$jscoverage['qunit/qunit.js'][2009]++;
  return jsDump;
})();
  _$jscoverage['qunit/qunit.js'][2013]++;
  function inArray(elem, array) {
    _$jscoverage['qunit/qunit.js'][2014]++;
    if (array.indexOf) {
      _$jscoverage['qunit/qunit.js'][2015]++;
      return array.indexOf(elem);
    }
    _$jscoverage['qunit/qunit.js'][2018]++;
    for (var i = 0, length = array.length; (i < length); (i++)) {
      _$jscoverage['qunit/qunit.js'][2019]++;
      if ((array[i] === elem)) {
        _$jscoverage['qunit/qunit.js'][2020]++;
        return i;
      }
}
    _$jscoverage['qunit/qunit.js'][2024]++;
    return -1;
}
  _$jscoverage['qunit/qunit.js'][2041]++;
  QUnit.diff = (function () {
  _$jscoverage['qunit/qunit.js'][2043]++;
  function diff(o, n) {
    _$jscoverage['qunit/qunit.js'][2044]++;
    var i, ns = {}, os = {};
    _$jscoverage['qunit/qunit.js'][2048]++;
    for (i = 0; (i < n.length); (i++)) {
      _$jscoverage['qunit/qunit.js'][2049]++;
      if ((! hasOwn.call(ns, n[i]))) {
        _$jscoverage['qunit/qunit.js'][2050]++;
        ns[n[i]] = {rows: [], o: null};
      }
      _$jscoverage['qunit/qunit.js'][2055]++;
      ns[n[i]].rows.push(i);
}
    _$jscoverage['qunit/qunit.js'][2058]++;
    for (i = 0; (i < o.length); (i++)) {
      _$jscoverage['qunit/qunit.js'][2059]++;
      if ((! hasOwn.call(os, o[i]))) {
        _$jscoverage['qunit/qunit.js'][2060]++;
        os[o[i]] = {rows: [], n: null};
      }
      _$jscoverage['qunit/qunit.js'][2065]++;
      os[o[i]].rows.push(i);
}
    _$jscoverage['qunit/qunit.js'][2068]++;
    for (i in ns) {
      _$jscoverage['qunit/qunit.js'][2069]++;
      if ((! hasOwn.call(ns, i))) {
        _$jscoverage['qunit/qunit.js'][2070]++;
        continue;
      }
      _$jscoverage['qunit/qunit.js'][2072]++;
      if (((ns[i].rows.length === 1) && hasOwn.call(os, i) && (os[i].rows.length === 1))) {
        _$jscoverage['qunit/qunit.js'][2073]++;
        n[ns[i].rows[0]] = {text: n[ns[i].rows[0]], row: os[i].rows[0]};
        _$jscoverage['qunit/qunit.js'][2077]++;
        o[os[i].rows[0]] = {text: o[os[i].rows[0]], row: ns[i].rows[0]};
      }
}
    _$jscoverage['qunit/qunit.js'][2084]++;
    for (i = 0; (i < (n.length - 1)); (i++)) {
      _$jscoverage['qunit/qunit.js'][2085]++;
      if (((n[i].text != null) && (n[(i + 1)].text == null) && ((n[i].row + 1) < o.length) && (o[(n[i].row + 1)].text == null) && (n[(i + 1)] == o[(n[i].row + 1)]))) {
        _$jscoverage['qunit/qunit.js'][2088]++;
        n[(i + 1)] = {text: n[(i + 1)], row: (n[i].row + 1)};
        _$jscoverage['qunit/qunit.js'][2092]++;
        o[(n[i].row + 1)] = {text: o[(n[i].row + 1)], row: (i + 1)};
      }
}
    _$jscoverage['qunit/qunit.js'][2099]++;
    for (i = (n.length - 1); (i > 0); (i--)) {
      _$jscoverage['qunit/qunit.js'][2100]++;
      if (((n[i].text != null) && (n[(i - 1)].text == null) && (n[i].row > 0) && (o[(n[i].row - 1)].text == null) && (n[(i - 1)] == o[(n[i].row - 1)]))) {
        _$jscoverage['qunit/qunit.js'][2103]++;
        n[(i - 1)] = {text: n[(i - 1)], row: (n[i].row - 1)};
        _$jscoverage['qunit/qunit.js'][2107]++;
        o[(n[i].row - 1)] = {text: o[(n[i].row - 1)], row: (i - 1)};
      }
}
    _$jscoverage['qunit/qunit.js'][2114]++;
    return ({o: o, n: n});
}
  _$jscoverage['qunit/qunit.js'][2120]++;
  return (function (o, n) {
  _$jscoverage['qunit/qunit.js'][2121]++;
  o = o.replace(/\s+$/, "");
  _$jscoverage['qunit/qunit.js'][2122]++;
  n = n.replace(/\s+$/, "");
  _$jscoverage['qunit/qunit.js'][2124]++;
  var i, pre, str = "", out = diff(((o === "")? []: o.split(/\s+/)), ((n === "")? []: n.split(/\s+/))), oSpace = o.match(/\s+/g), nSpace = n.match(/\s+/g);
  _$jscoverage['qunit/qunit.js'][2130]++;
  if ((oSpace == null)) {
    _$jscoverage['qunit/qunit.js'][2131]++;
    oSpace = [" "];
  }
  else {
    _$jscoverage['qunit/qunit.js'][2134]++;
    oSpace.push(" ");
  }
  _$jscoverage['qunit/qunit.js'][2137]++;
  if ((nSpace == null)) {
    _$jscoverage['qunit/qunit.js'][2138]++;
    nSpace = [" "];
  }
  else {
    _$jscoverage['qunit/qunit.js'][2141]++;
    nSpace.push(" ");
  }
  _$jscoverage['qunit/qunit.js'][2144]++;
  if ((out.n.length === 0)) {
    _$jscoverage['qunit/qunit.js'][2145]++;
    for (i = 0; (i < out.o.length); (i++)) {
      _$jscoverage['qunit/qunit.js'][2146]++;
      str += ("<del>" + out.o[i] + oSpace[i] + "</del>");
}
  }
  else {
    _$jscoverage['qunit/qunit.js'][2150]++;
    if ((out.n[0].text == null)) {
      _$jscoverage['qunit/qunit.js'][2151]++;
      for (n = 0; ((n < out.o.length) && (out.o[n].text == null)); (n++)) {
        _$jscoverage['qunit/qunit.js'][2152]++;
        str += ("<del>" + out.o[n] + oSpace[n] + "</del>");
}
    }
    _$jscoverage['qunit/qunit.js'][2156]++;
    for (i = 0; (i < out.n.length); (i++)) {
      _$jscoverage['qunit/qunit.js'][2157]++;
      if ((out.n[i].text == null)) {
        _$jscoverage['qunit/qunit.js'][2158]++;
        str += ("<ins>" + out.n[i] + nSpace[i] + "</ins>");
      }
      else {
        _$jscoverage['qunit/qunit.js'][2162]++;
        pre = "";
        _$jscoverage['qunit/qunit.js'][2164]++;
        for (n = (out.n[i].row + 1); ((n < out.o.length) && (out.o[n].text == null)); (n++)) {
          _$jscoverage['qunit/qunit.js'][2165]++;
          pre += ("<del>" + out.o[n] + oSpace[n] + "</del>");
}
        _$jscoverage['qunit/qunit.js'][2167]++;
        str += (" " + out.n[i].text + nSpace[i] + pre);
      }
}
  }
  _$jscoverage['qunit/qunit.js'][2172]++;
  return str;
});
})();
  _$jscoverage['qunit/qunit.js'][2177]++;
  if (((typeof exports) !== "undefined")) {
    _$jscoverage['qunit/qunit.js'][2178]++;
    extend(exports, QUnit);
  }
})((function () {
  _$jscoverage['qunit/qunit.js'][2182]++;
  return this;
}).call());

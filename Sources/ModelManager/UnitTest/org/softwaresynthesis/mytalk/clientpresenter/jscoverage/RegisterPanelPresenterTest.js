/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['RegisterPanelPresenterTest.js']) {
  _$jscoverage['RegisterPanelPresenterTest.js'] = [];
  _$jscoverage['RegisterPanelPresenterTest.js'][1] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][4] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][5] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][6] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][7] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][8] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][10] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][12] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][14] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][19] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][22] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][27] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][28] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][29] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][30] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][32] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][33] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][34] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][35] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][37] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][38] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][40] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][41] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][43] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][45] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][46] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][48] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][49] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][50] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][51] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][52] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][53] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][54] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][57] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][58] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][59] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][60] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][61] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][62] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][65] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][66] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][67] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][68] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][69] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][70] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][73] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][74] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][75] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][76] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][77] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][78] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][81] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][82] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][83] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][84] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][85] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][86] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][89] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][90] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][91] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][93] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][94] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][95] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][98] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][99] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][100] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][101] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][102] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][103] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][106] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][107] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][108] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][109] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][110] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][111] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][114] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][115] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][117] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][118] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][119] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][120] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][121] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][122] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][123] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][124] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][126] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][129] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][130] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][131] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][135] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][136] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][138] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][141] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][142] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][144] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][145] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][146] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][147] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][148] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][149] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][151] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][153] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][156] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][158] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][159] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][160] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][161] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][162] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][165] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][166] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][167] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][170] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][171] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][174] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][175] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][176] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][177] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][178] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][181] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][182] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][185] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][186] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][187] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][188] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][190] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][194] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][195] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][196] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][198] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][200] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][203] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][204] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][208] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][209] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][212] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][213] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][214] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][215] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][216] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][219] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][220] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][223] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][224] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][225] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][226] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][228] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][231] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][232] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][235] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][236] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][239] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][240] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][241] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][242] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][245] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][246] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][249] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][250] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][251] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][252] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][254] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][257] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][258] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][261] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][262] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][265] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][266] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][267] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][268] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][271] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][272] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][275] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][276] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][277] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][278] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][280] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][283] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][284] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][287] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][289] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][290] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][291] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][292] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][295] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][296] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][297] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][300] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][302] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][303] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][304] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][305] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][308] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][309] = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][310] = 0;
}
_$jscoverage['RegisterPanelPresenterTest.js'].source = ["module<span class=\"k\">(</span><span class=\"s\">\"RegisterPanelPresenterTest\"</span><span class=\"k\">,</span> <span class=\"k\">{</span>","\tsetup<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t<span class=\"c\">// questo &#195;&#168; uno stub</span>","\t\telement <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"div\"</span><span class=\"k\">);</span>","\t\telement<span class=\"k\">.</span>setAttribute<span class=\"k\">(</span><span class=\"s\">\"id\"</span><span class=\"k\">,</span> <span class=\"s\">\"RegisterPanel\"</span><span class=\"k\">);</span>","\t\telement<span class=\"k\">.</span>style<span class=\"k\">.</span>position <span class=\"k\">=</span> <span class=\"s\">\"absolute\"</span><span class=\"k\">;</span>","\t\telement<span class=\"k\">.</span>style<span class=\"k\">.</span>left <span class=\"k\">=</span><span class=\"s\">\"-999em\"</span><span class=\"k\">;</span>","\t\tdocument<span class=\"k\">.</span>body<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>element<span class=\"k\">);</span>","\t\t<span class=\"c\">// anche questo &#195;&#168; uno stub</span>","\t\tmediator <span class=\"k\">=</span> <span class=\"k\">{</span>buildUI<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{}}</span><span class=\"k\">;</span>","\t\t<span class=\"c\">// altro stub</span>","\t\tcommunicationcenter <span class=\"k\">=</span> <span class=\"k\">new</span> Object<span class=\"k\">();</span>","\t\t","\t\tconfigurationFile <span class=\"k\">=</span> <span class=\"s\">\"/ModelManager/WebContent/Conf/servletlocationtest.xml\"</span><span class=\"k\">;</span>","\t\t","\t\t<span class=\"c\">/* oggetto da testare, lo script PHP che sta al posto della servlet</span>","<span class=\"c\">\t\t * LoginManager &#195;&#168; anch'esso, ebbene s&#195;&#172;, uno stub!</span>","<span class=\"c\">\t\t */</span>","\t\ttester <span class=\"k\">=</span> <span class=\"k\">new</span> RegisterPanelPresenter<span class=\"k\">(</span><span class=\"s\">\"LoginManager.php\"</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","\tteardown<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\tdocument<span class=\"k\">.</span>body<span class=\"k\">.</span>removeChild<span class=\"k\">(</span>element<span class=\"k\">);</span>","\t<span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">);</span>","","","test<span class=\"k\">(</span><span class=\"s\">\"testInitialize()\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t<span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","\ttester<span class=\"k\">.</span>initialize<span class=\"k\">();</span>","\tok<span class=\"k\">(</span>element<span class=\"k\">,</span> <span class=\"s\">\"l'elemento esiste ancora\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\t","\t<span class=\"k\">var</span> children <span class=\"k\">=</span> element<span class=\"k\">.</span>childNodes<span class=\"k\">;</span>","\tequal<span class=\"k\">(</span>children<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"l'elemento contiene un solo figlio\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\t<span class=\"k\">var</span> form <span class=\"k\">=</span> children<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","\tequal<span class=\"k\">(</span>form<span class=\"k\">.</span>nodeName<span class=\"k\">,</span> <span class=\"s\">\"FORM\"</span><span class=\"k\">,</span> <span class=\"s\">\"l'elemento &#195;&#168; un &lt;form&gt;\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\t","\tchildren <span class=\"k\">=</span> form<span class=\"k\">.</span>childNodes<span class=\"k\">;</span>","\tequal<span class=\"k\">(</span>children<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">2</span><span class=\"k\">,</span> <span class=\"s\">\"il form ha due figli\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\t","\t<span class=\"k\">var</span> list <span class=\"k\">=</span> children<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","\tequal<span class=\"k\">(</span>list<span class=\"k\">.</span>nodeName<span class=\"k\">,</span> <span class=\"s\">\"UL\"</span><span class=\"k\">,</span> <span class=\"s\">\"il form contiene una lista\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\t","\t<span class=\"k\">var</span> divButtons <span class=\"k\">=</span> children<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">];</span>","\t","\tchildren <span class=\"k\">=</span> list<span class=\"k\">.</span>childNodes<span class=\"k\">;</span>","\tequal<span class=\"k\">(</span>children<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">7</span><span class=\"k\">,</span> <span class=\"s\">\"la lista contiene sette elementi\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\t","\t<span class=\"k\">var</span> liUsername <span class=\"k\">=</span> children<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","\t<span class=\"k\">var</span> liPassword <span class=\"k\">=</span> children<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">];</span>","\t<span class=\"k\">var</span> liSecretQ <span class=\"k\">=</span> children<span class=\"k\">[</span><span class=\"s\">2</span><span class=\"k\">];</span>","\t<span class=\"k\">var</span> liAnswerSQ <span class=\"k\">=</span> children<span class=\"k\">[</span><span class=\"s\">3</span><span class=\"k\">];</span>","\t<span class=\"k\">var</span> liName <span class=\"k\">=</span> children<span class=\"k\">[</span><span class=\"s\">4</span><span class=\"k\">];</span>","\t<span class=\"k\">var</span> liSurname <span class=\"k\">=</span> children<span class=\"k\">[</span><span class=\"s\">5</span><span class=\"k\">];</span>","\t<span class=\"k\">var</span> liPicture <span class=\"k\">=</span> children<span class=\"k\">[</span><span class=\"s\">6</span><span class=\"k\">];</span>","\t","\t<span class=\"c\">// per lo username</span>","\t<span class=\"k\">var</span> labelUsername <span class=\"k\">=</span> liUsername<span class=\"k\">.</span>childNodes<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","\t<span class=\"k\">var</span> inputUsername <span class=\"k\">=</span> liUsername<span class=\"k\">.</span>childNodes<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">];</span>","\tequal<span class=\"k\">(</span>labelUsername<span class=\"k\">.</span>nodeName<span class=\"k\">,</span> <span class=\"s\">\"LABEL\"</span><span class=\"k\">,</span> <span class=\"s\">\"la label ha il tipo corretto\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\tequal<span class=\"k\">(</span>labelUsername<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">\"for\"</span><span class=\"k\">),</span> inputUsername<span class=\"k\">.</span>id<span class=\"k\">,</span> <span class=\"s\">\"attributo for della label corretto\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\tequal<span class=\"k\">(</span>inputUsername<span class=\"k\">.</span>type<span class=\"k\">,</span> <span class=\"s\">\"email\"</span><span class=\"k\">,</span> <span class=\"s\">\"l'input username ha il tipo corretto\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\tok<span class=\"k\">(</span>inputUsername<span class=\"k\">.</span>required<span class=\"k\">,</span> <span class=\"s\">\"attributo required corretto per username\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\t","\t<span class=\"c\">// per la password</span>","\t<span class=\"k\">var</span> labelPassword <span class=\"k\">=</span> liPassword<span class=\"k\">.</span>childNodes<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","\t<span class=\"k\">var</span> inputPassword <span class=\"k\">=</span> liPassword<span class=\"k\">.</span>childNodes<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">];</span>","\tequal<span class=\"k\">(</span>labelPassword<span class=\"k\">.</span>nodeName<span class=\"k\">,</span> <span class=\"s\">\"LABEL\"</span><span class=\"k\">,</span> <span class=\"s\">\"la label ha il tipo corretto\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\tequal<span class=\"k\">(</span>labelPassword<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">\"for\"</span><span class=\"k\">),</span> inputPassword<span class=\"k\">.</span>id<span class=\"k\">,</span> <span class=\"s\">\"la label ha l'attributo for corretto\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\tequal<span class=\"k\">(</span>inputPassword<span class=\"k\">.</span>type<span class=\"k\">,</span> <span class=\"s\">\"password\"</span><span class=\"k\">,</span> <span class=\"s\">\"tipo corretto dell'input per la password\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\tok<span class=\"k\">(</span>inputPassword<span class=\"k\">,</span> <span class=\"s\">\"attributo required corretto per password\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\t","\t<span class=\"c\">// per la domanda segreta</span>","\t<span class=\"k\">var</span> labelSecretQ <span class=\"k\">=</span> liSecretQ<span class=\"k\">.</span>childNodes<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","\t<span class=\"k\">var</span> inputSecretQ <span class=\"k\">=</span> liSecretQ<span class=\"k\">.</span>childNodes<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">];</span>","\tequal<span class=\"k\">(</span>labelSecretQ<span class=\"k\">.</span>nodeName<span class=\"k\">,</span> <span class=\"s\">\"LABEL\"</span><span class=\"k\">,</span> <span class=\"s\">\"la label ha il tipo corretto\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\tequal<span class=\"k\">(</span>labelSecretQ<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">\"for\"</span><span class=\"k\">),</span> inputSecretQ<span class=\"k\">.</span>id<span class=\"k\">,</span> <span class=\"s\">\"la label ha l'attributo for corretto\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\tequal<span class=\"k\">(</span>inputSecretQ<span class=\"k\">.</span>type<span class=\"k\">,</span> <span class=\"s\">\"text\"</span><span class=\"k\">,</span> <span class=\"s\">\"tipo corretto dell'input per la domanda segreta\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\tok<span class=\"k\">(</span>inputSecretQ<span class=\"k\">,</span> <span class=\"s\">\"attributo required corretto per la domanda segreta\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\t","\t<span class=\"c\">// per la risposta alla domanda segreta</span>","\t<span class=\"k\">var</span> labelAnswerSQ <span class=\"k\">=</span> liAnswerSQ<span class=\"k\">.</span>childNodes<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","\t<span class=\"k\">var</span> inputAnswerSQ <span class=\"k\">=</span> liAnswerSQ<span class=\"k\">.</span>childNodes<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">];</span>","\tequal<span class=\"k\">(</span>labelAnswerSQ<span class=\"k\">.</span>nodeName<span class=\"k\">,</span> <span class=\"s\">\"LABEL\"</span><span class=\"k\">,</span> <span class=\"s\">\"la label ha il tipo corretto\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\tequal<span class=\"k\">(</span>labelAnswerSQ<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">\"for\"</span><span class=\"k\">),</span> inputAnswerSQ<span class=\"k\">.</span>id<span class=\"k\">,</span> <span class=\"s\">\"la label ha l'attributo for corretto\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\tequal<span class=\"k\">(</span>inputAnswerSQ<span class=\"k\">.</span>type<span class=\"k\">,</span> <span class=\"s\">\"text\"</span><span class=\"k\">,</span> <span class=\"s\">\"tipo corretto dell'input per la risposta alla domanda segreta\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\tok<span class=\"k\">(</span>inputAnswerSQ<span class=\"k\">,</span> <span class=\"s\">\"attributo required corretto per la risposta alla domanda segreta\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\t","\t<span class=\"c\">// per il nome</span>","\t<span class=\"k\">var</span> labelName <span class=\"k\">=</span> liName<span class=\"k\">.</span>childNodes<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","\t<span class=\"k\">var</span> inputName <span class=\"k\">=</span> liName<span class=\"k\">.</span>childNodes<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">];</span>","\tequal<span class=\"k\">(</span>labelName<span class=\"k\">.</span>nodeName<span class=\"k\">,</span> <span class=\"s\">\"LABEL\"</span><span class=\"k\">,</span> <span class=\"s\">\"la label ha il tipo corretto\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\t<span class=\"c\">// trovato errore: nell'attributo 'for' del '&lt;label&gt;' era scritto firtname invece di firstname ;)</span>","\tequal<span class=\"k\">(</span>labelName<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">\"for\"</span><span class=\"k\">),</span> inputName<span class=\"k\">.</span>id<span class=\"k\">,</span> <span class=\"s\">\"attributo for della label corretto\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\tequal<span class=\"k\">(</span>inputName<span class=\"k\">.</span>type<span class=\"k\">,</span> <span class=\"s\">\"text\"</span><span class=\"k\">,</span> <span class=\"s\">\"l'input per il nome ha il tipo corretto\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\tok<span class=\"k\">(!</span>inputName<span class=\"k\">.</span>required<span class=\"k\">,</span> <span class=\"s\">\"attributo required corretto per name\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\t","\t<span class=\"c\">// per il cognome</span>","\t<span class=\"k\">var</span> labelSurname <span class=\"k\">=</span> liSurname<span class=\"k\">.</span>childNodes<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","\t<span class=\"k\">var</span> inputSurname <span class=\"k\">=</span> liSurname<span class=\"k\">.</span>childNodes<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">];</span>","\tequal<span class=\"k\">(</span>labelSurname<span class=\"k\">.</span>nodeName<span class=\"k\">,</span> <span class=\"s\">\"LABEL\"</span><span class=\"k\">,</span> <span class=\"s\">\"la label ha il tipo corretto\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\tequal<span class=\"k\">(</span>labelSurname<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">\"for\"</span><span class=\"k\">),</span> inputSurname<span class=\"k\">.</span>id<span class=\"k\">,</span> <span class=\"s\">\"attributo for della label corretto\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\tequal<span class=\"k\">(</span>inputSurname<span class=\"k\">.</span>type<span class=\"k\">,</span> <span class=\"s\">\"text\"</span><span class=\"k\">,</span> <span class=\"s\">\"l'input per il cognome ha il tipo corretto\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\tok<span class=\"k\">(!</span>inputSurname<span class=\"k\">.</span>required<span class=\"k\">,</span> <span class=\"s\">\"attributo required corretto per il cognome\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\t","\t<span class=\"c\">// per l'immagine</span>","\t<span class=\"k\">var</span> labelPicture <span class=\"k\">=</span> liPicture<span class=\"k\">.</span>childNodes<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","\t<span class=\"k\">var</span> inputPicture <span class=\"k\">=</span> liPicture<span class=\"k\">.</span>childNodes<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">];</span>","\tequal<span class=\"k\">(</span>labelPicture<span class=\"k\">.</span>nodeName<span class=\"k\">,</span> <span class=\"s\">\"LABEL\"</span><span class=\"k\">,</span> <span class=\"s\">\"la label ha il tipo corretto\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\tequal<span class=\"k\">(</span>labelPicture<span class=\"k\">.</span>getAttribute<span class=\"k\">(</span><span class=\"s\">\"for\"</span><span class=\"k\">),</span> inputPicture<span class=\"k\">.</span>id<span class=\"k\">,</span> <span class=\"s\">\"attributo for della label corretto\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\tequal<span class=\"k\">(</span>inputPicture<span class=\"k\">.</span>type<span class=\"k\">,</span> <span class=\"s\">\"file\"</span><span class=\"k\">,</span> <span class=\"s\">\"l'input per l'immagine ha il tipo corretto\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\tok<span class=\"k\">(!</span>inputPicture<span class=\"k\">.</span>required<span class=\"k\">,</span> <span class=\"s\">\"attributo required corretto per l'immagine\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\t","\t","\tequal<span class=\"k\">(</span>divButtons<span class=\"k\">.</span>childNodes<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">2</span><span class=\"k\">,</span> <span class=\"s\">\"i pulsanti sono due\"</span><span class=\"k\">);</span>","\ti<span class=\"k\">++;</span>","\t<span class=\"c\">// per il pulsante</span>","\t<span class=\"k\">var</span> button <span class=\"k\">=</span> divButtons<span class=\"k\">.</span>childNodes<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","\tequal<span class=\"k\">(</span>button<span class=\"k\">.</span>nodeName<span class=\"k\">,</span> <span class=\"s\">\"BUTTON\"</span><span class=\"k\">,</span> <span class=\"s\">\"elemento pulsante corretto\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\tequal<span class=\"k\">(</span>button<span class=\"k\">.</span>type<span class=\"k\">,</span> <span class=\"s\">\"submit\"</span><span class=\"k\">,</span> <span class=\"s\">\"il pulsante e' presente\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\tequal<span class=\"k\">(</span>button<span class=\"k\">.</span>innerHTML<span class=\"k\">,</span> <span class=\"s\">\"Indietro\"</span><span class=\"k\">,</span> <span class=\"s\">\"testo del pulsante corretto\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\tbutton <span class=\"k\">=</span> divButtons<span class=\"k\">.</span>childNodes<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">];</span>","\tequal<span class=\"k\">(</span>button<span class=\"k\">.</span>nodeName<span class=\"k\">,</span> <span class=\"s\">\"BUTTON\"</span><span class=\"k\">,</span> <span class=\"s\">\"elemento pulsante corretto\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\tequal<span class=\"k\">(</span>button<span class=\"k\">.</span>type<span class=\"k\">,</span> <span class=\"s\">\"submit\"</span><span class=\"k\">,</span> <span class=\"s\">\"il pulsante &#195;&#168; presente\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\tequal<span class=\"k\">(</span>button<span class=\"k\">.</span>innerHTML<span class=\"k\">,</span> <span class=\"s\">\"Registrati\"</span><span class=\"k\">,</span> <span class=\"s\">\"testo del pulsante corretto\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\t","\texpect<span class=\"k\">(</span>i<span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">);</span>","","test<span class=\"k\">(</span><span class=\"s\">\"testHide()\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\ttester<span class=\"k\">.</span>hide<span class=\"k\">();</span>","\tequal<span class=\"k\">(</span>element<span class=\"k\">.</span>style<span class=\"k\">.</span>display<span class=\"k\">,</span> <span class=\"s\">\"none\"</span><span class=\"k\">,</span> <span class=\"s\">\"il pannello &#195;&#168; stato correttamente nascosto\"</span><span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">);</span>","","<span class=\"c\">// richiede di essere in un WEB SERVER per essere eseguito (altrimenti non interpreta lo script PHP)</span>","test<span class=\"k\">(</span><span class=\"s\">\"testRegister()\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t<span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","\t<span class=\"c\">// questo &#195;&#168; uno stub (simula i dati recuperati dal form dell'interfaccia)</span>","\t<span class=\"k\">var</span> data <span class=\"k\">=</span> <span class=\"k\">{</span>name<span class=\"k\">:</span> <span class=\"s\">\"Flavia\"</span><span class=\"k\">,</span> surname<span class=\"k\">:</span> <span class=\"s\">\"Bacco\"</span><span class=\"k\">,</span> username<span class=\"k\">:</span> <span class=\"s\">\"flabacco@gmail.com\"</span><span class=\"k\">,</span>","\t\t\t    password<span class=\"k\">:</span> <span class=\"s\">\"farfalla\"</span><span class=\"k\">,</span> picturePath<span class=\"k\">:</span> <span class=\"s\">\"flavietta.png\"</span><span class=\"k\">,</span>","\t\t\t    question<span class=\"k\">:</span> <span class=\"s\">\"di che colore e' la mia gatta?\"</span><span class=\"k\">,</span> answer<span class=\"k\">:</span> <span class=\"s\">\"tricolore\"</span><span class=\"k\">}</span><span class=\"k\">;</span>","\t<span class=\"k\">var</span> querystring <span class=\"k\">=</span> tester<span class=\"k\">.</span>register<span class=\"k\">(</span>data<span class=\"k\">);</span>","\tequal<span class=\"k\">(</span>querystring<span class=\"k\">,</span>","\t\t\t<span class=\"s\">\"username=flabacco%40gmail.com&amp;password=farfalla&amp;question=di%20che%20colore%20e'%20la%20mia%20gatta%3F&amp;answer=tricolore&amp;name=Flavia&amp;surname=Bacco&amp;picturePath=flavietta.png\"</span><span class=\"k\">,</span>","\t\t\t<span class=\"s\">\"stringa di query generata correttamente\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","    equal<span class=\"k\">(</span>communicationcenter<span class=\"k\">.</span>my<span class=\"k\">.</span>name<span class=\"k\">,</span> <span class=\"s\">\"Flavia\"</span><span class=\"k\">,</span> <span class=\"s\">\"nome registrato correttamente\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","    equal<span class=\"k\">(</span>communicationcenter<span class=\"k\">.</span>my<span class=\"k\">.</span>surname<span class=\"k\">,</span> <span class=\"s\">\"Bacco\"</span><span class=\"k\">,</span> <span class=\"s\">\"cognome registrato correttamente\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","    equal<span class=\"k\">(</span>communicationcenter<span class=\"k\">.</span>my<span class=\"k\">.</span>username<span class=\"k\">,</span> <span class=\"s\">\"flabacco@gmail.com\"</span><span class=\"k\">,</span> <span class=\"s\">\"username registrato correttamente\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","    equal<span class=\"k\">(</span>communicationcenter<span class=\"k\">.</span>my<span class=\"k\">.</span>id<span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">\"id del nuovo utente impostato correttamente\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","    equal<span class=\"k\">(</span>communicationcenter<span class=\"k\">.</span>my<span class=\"k\">.</span>picturePath<span class=\"k\">,</span>","    \t\t<span class=\"s\">\"http://softwaresynthesis.org/pictures/flavietta.png\"</span><span class=\"k\">,</span>","    \t\t<span class=\"s\">\"immagine del nuovo utente salvata correttamente\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\t","\texpect<span class=\"k\">(</span>i<span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">);</span>","","test<span class=\"k\">(</span><span class=\"s\">\"testGetPicturePath()\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t<span class=\"c\">// crea lo stub di interfaccia grafica</span>","\t<span class=\"k\">var</span> inputPicture <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"input\"</span><span class=\"k\">);</span>","\tinputPicture<span class=\"k\">.</span>type <span class=\"k\">=</span><span class=\"s\">\"file\"</span><span class=\"k\">;</span>","\tinputPicture<span class=\"k\">.</span>id <span class=\"k\">=</span> <span class=\"s\">\"picture\"</span><span class=\"k\">;</span>","\tinputPicture<span class=\"k\">.</span>setAttribute<span class=\"k\">(</span><span class=\"s\">\"value\"</span><span class=\"k\">,</span> <span class=\"s\">\"home/flavia/Immagini/flavietta.png\"</span><span class=\"k\">);</span>","\telement<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>inputPicture<span class=\"k\">);</span>","\t","\t<span class=\"c\">// invoca il metodo da testare</span>","\t<span class=\"k\">var</span> picturePath <span class=\"k\">=</span> tester<span class=\"k\">.</span>getPicturePath<span class=\"k\">();</span>","\tequal<span class=\"k\">(</span>picturePath<span class=\"k\">,</span> inputPicture<span class=\"k\">.</span>value<span class=\"k\">,</span> <span class=\"s\">\"percorso dell'immagine recuperato correttamente\"</span><span class=\"k\">);</span>","\telement<span class=\"k\">.</span>removeChild<span class=\"k\">(</span>inputPicture<span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">);</span>","","test<span class=\"k\">(</span><span class=\"s\">\"testGetUsername()\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t<span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","\t","\t<span class=\"c\">// crea lo stub di interfaccia grafica</span>","\t<span class=\"k\">var</span> inputUsername <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"input\"</span><span class=\"k\">);</span>","\tinputUsername<span class=\"k\">.</span>type <span class=\"k\">=</span><span class=\"s\">\"email\"</span><span class=\"k\">;</span>","\tinputUsername<span class=\"k\">.</span>id <span class=\"k\">=</span> <span class=\"s\">\"username\"</span><span class=\"k\">;</span>","\tinputUsername<span class=\"k\">.</span>value <span class=\"k\">=</span> <span class=\"s\">\"flabacco@gmail.com\"</span><span class=\"k\">;</span>","\telement<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>inputUsername<span class=\"k\">);</span>","\t","\t<span class=\"c\">// invoca il metodo da testare la prima volta</span>","\t<span class=\"k\">var</span> username <span class=\"k\">=</span> tester<span class=\"k\">.</span>getUsername<span class=\"k\">();</span>","\tequal<span class=\"k\">(</span>username<span class=\"k\">,</span> inputUsername<span class=\"k\">.</span>value<span class=\"k\">,</span> <span class=\"s\">\"usename recuperato correttamente\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\t","\t<span class=\"c\">// controlla che il campo sia compilato corrrettamente</span>","\tinputUsername<span class=\"k\">.</span>value <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t\ttester<span class=\"k\">.</span>getUsername<span class=\"k\">();</span>","\t\tok<span class=\"k\">(</span><span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"s\">\"non rilevato username mancante\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\t<span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>err<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tequal<span class=\"k\">(</span>err<span class=\"k\">,</span> <span class=\"s\">\"indirizzo email non specificato\"</span><span class=\"k\">,</span> <span class=\"s\">\"username mancante rilevato correttamente\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\t<span class=\"k\">}</span>","\t","\t<span class=\"c\">// crea un indirizzo email non valido</span>","\tinputUsername<span class=\"k\">.</span>value <span class=\"k\">=</span> <span class=\"s\">\"flabacco.gmail.com\"</span><span class=\"k\">;</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t\ttester<span class=\"k\">.</span>getUsername<span class=\"k\">();</span>","\t\t<span class=\"c\">// se arriva qui significa che il metodo non rileva l'errore</span>","\t\tok<span class=\"k\">(</span><span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"s\">\"non rilevato indirizzo email malformato\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\t<span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>err<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tequal<span class=\"k\">(</span>err<span class=\"k\">,</span> <span class=\"s\">\"indirizzo email non valido\"</span><span class=\"k\">,</span> <span class=\"s\">\"email malformato rilevato correttamente\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\t<span class=\"k\">}</span>","\t","\telement<span class=\"k\">.</span>removeChild<span class=\"k\">(</span>inputUsername<span class=\"k\">);</span>","\texpect<span class=\"k\">(</span>i<span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">);</span>","","","test<span class=\"k\">(</span><span class=\"s\">\"testGetPassword()\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t<span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","\t","\t<span class=\"c\">// crea lo stub di interfaccia grafica</span>","\t<span class=\"k\">var</span> inputPassword <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"input\"</span><span class=\"k\">);</span>","\tinputPassword<span class=\"k\">.</span>type <span class=\"k\">=</span> <span class=\"s\">\"password\"</span><span class=\"k\">;</span>","\tinputPassword<span class=\"k\">.</span>id <span class=\"k\">=</span> <span class=\"s\">\"password\"</span><span class=\"k\">;</span>","\tinputPassword<span class=\"k\">.</span>value <span class=\"k\">=</span> <span class=\"s\">\"farfalla\"</span><span class=\"k\">;</span>","\telement<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>inputPassword<span class=\"k\">);</span>","\t","\t<span class=\"c\">// invoca il metodo da testare con una password legale</span>","\t<span class=\"k\">var</span> password <span class=\"k\">=</span> tester<span class=\"k\">.</span>getPassword<span class=\"k\">();</span>","\tequal<span class=\"k\">(</span>password<span class=\"k\">,</span> inputPassword<span class=\"k\">.</span>value<span class=\"k\">,</span> <span class=\"s\">\"password recuperata correttamente\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\t","\t<span class=\"c\">// verifica se rileva password mancante</span>","\tinputPassword<span class=\"k\">.</span>value <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t\ttester<span class=\"k\">.</span>getPassword<span class=\"k\">();</span>","\t\tok<span class=\"k\">(</span><span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"s\">\"non rilevata la password mancante\"</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>err<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tequal<span class=\"k\">(</span>err<span class=\"k\">,</span> <span class=\"s\">\"password non specificata\"</span><span class=\"k\">,</span> <span class=\"s\">\"password mancante rilevata correttamente\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\t<span class=\"k\">}</span>","\t","\telement<span class=\"k\">.</span>removeChild<span class=\"k\">(</span>inputPassword<span class=\"k\">);</span>","\texpect<span class=\"k\">(</span>i<span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">);</span>","","test<span class=\"k\">(</span><span class=\"s\">\"testGetQuestion()\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t<span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","\t","\t<span class=\"c\">// crea lo stub di interfaccia grafica</span>","\t<span class=\"k\">var</span> inputSecretQ <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"input\"</span><span class=\"k\">);</span>","\tinputSecretQ<span class=\"k\">.</span>id <span class=\"k\">=</span> <span class=\"s\">\"question\"</span><span class=\"k\">;</span>","\tinputSecretQ<span class=\"k\">.</span>value <span class=\"k\">=</span> <span class=\"s\">\"Di che colore &#195;&#168; il mio gatto?\"</span><span class=\"k\">;</span>","\telement<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>inputSecretQ<span class=\"k\">);</span>","\t","\t<span class=\"c\">// invoca il metodo da testare con una domanda legale</span>","\t<span class=\"k\">var</span> question <span class=\"k\">=</span> tester<span class=\"k\">.</span>getQuestion<span class=\"k\">();</span>","\tequal<span class=\"k\">(</span>question<span class=\"k\">,</span> inputSecretQ<span class=\"k\">.</span>value<span class=\"k\">,</span> <span class=\"s\">\"domanda segreta recuperata correttamente\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\t","\t<span class=\"c\">// verifica se rileva domanda mancante</span>","\tinputSecretQ<span class=\"k\">.</span>value <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t\ttester<span class=\"k\">.</span>getQuestion<span class=\"k\">();</span>","\t\tok<span class=\"k\">(</span><span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"s\">\"non rilevata la domanda segreta mancante\"</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>err<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tequal<span class=\"k\">(</span>err<span class=\"k\">,</span> <span class=\"s\">\"domanda segreta non specificata\"</span><span class=\"k\">,</span> <span class=\"s\">\"domanda segreta mancante rilevata correttamente\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\t<span class=\"k\">}</span>","\t","\telement<span class=\"k\">.</span>removeChild<span class=\"k\">(</span>inputSecretQ<span class=\"k\">);</span>","\texpect<span class=\"k\">(</span>i<span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">);</span>","","test<span class=\"k\">(</span><span class=\"s\">\"testGetAnswer()\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t<span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","\t","\t<span class=\"c\">// crea lo stub di interfaccia grafica</span>","\t<span class=\"k\">var</span> inputAnswer <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"input\"</span><span class=\"k\">);</span>","\tinputAnswer<span class=\"k\">.</span>id <span class=\"k\">=</span> <span class=\"s\">\"answer\"</span><span class=\"k\">;</span>","\tinputAnswer<span class=\"k\">.</span>value <span class=\"k\">=</span> <span class=\"s\">\"tricolore\"</span><span class=\"k\">;</span>","\telement<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>inputAnswer<span class=\"k\">);</span>","\t","\t<span class=\"c\">// invoca il metodo da testare con una risposta legale</span>","\t<span class=\"k\">var</span> answer <span class=\"k\">=</span> tester<span class=\"k\">.</span>getAnswer<span class=\"k\">();</span>","\tequal<span class=\"k\">(</span>answer<span class=\"k\">,</span> inputAnswer<span class=\"k\">.</span>value<span class=\"k\">,</span> <span class=\"s\">\"risposta recuperata correttamente\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\t","\t<span class=\"c\">// verifica se rileva risposta mancante</span>","\tinputAnswer<span class=\"k\">.</span>value <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t\ttester<span class=\"k\">.</span>getAnswer<span class=\"k\">();</span>","\t\tok<span class=\"k\">(</span><span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"s\">\"non rilevata la risposta mancante\"</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>err<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tequal<span class=\"k\">(</span>err<span class=\"k\">,</span> <span class=\"s\">\"risposta alla domanda segreta non specificata\"</span><span class=\"k\">,</span> <span class=\"s\">\"risposta mancante rilevata correttamente\"</span><span class=\"k\">);</span> i<span class=\"k\">++;</span>","\t<span class=\"k\">}</span>","\t","\telement<span class=\"k\">.</span>removeChild<span class=\"k\">(</span>inputAnswer<span class=\"k\">);</span>","\texpect<span class=\"k\">(</span>i<span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">);</span>","","test<span class=\"k\">(</span><span class=\"s\">\"testGetName()\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t<span class=\"c\">// crea lo stub di interfaccia grafica</span>","\t<span class=\"k\">var</span> inputName <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"input\"</span><span class=\"k\">);</span>","\tinputName<span class=\"k\">.</span>id <span class=\"k\">=</span> <span class=\"s\">\"firstname\"</span><span class=\"k\">;</span>","\tinputName<span class=\"k\">.</span>value <span class=\"k\">=</span> <span class=\"s\">\"Flavia\"</span><span class=\"k\">;</span>","\telement<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>inputName<span class=\"k\">);</span>","\t","\t<span class=\"c\">// invoca il metodo da testare</span>","\t<span class=\"k\">var</span> name <span class=\"k\">=</span> tester<span class=\"k\">.</span>getName<span class=\"k\">();</span>","\tequal<span class=\"k\">(</span>name<span class=\"k\">,</span> inputName<span class=\"k\">.</span>value<span class=\"k\">,</span> <span class=\"s\">\"nome recuperato correttamente\"</span><span class=\"k\">);</span>","\telement<span class=\"k\">.</span>removeChild<span class=\"k\">(</span>inputName<span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">);</span>","","test<span class=\"k\">(</span><span class=\"s\">\"testGetSurname()\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t<span class=\"c\">// crea lo stub di interfaccia grafica</span>","\t<span class=\"k\">var</span> inputSurname <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"input\"</span><span class=\"k\">);</span>","\tinputSurname<span class=\"k\">.</span>id <span class=\"k\">=</span> <span class=\"s\">\"lastname\"</span><span class=\"k\">;</span>","\tinputSurname<span class=\"k\">.</span>value <span class=\"k\">=</span> <span class=\"s\">\"Bacco\"</span><span class=\"k\">;</span>","\telement<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>inputSurname<span class=\"k\">);</span>","\t","\t<span class=\"c\">// invoca il metodo da testare</span>","\t<span class=\"k\">var</span> surname <span class=\"k\">=</span> tester<span class=\"k\">.</span>getSurname<span class=\"k\">();</span>","\tequal<span class=\"k\">(</span>surname<span class=\"k\">,</span> inputSurname<span class=\"k\">.</span>value<span class=\"k\">,</span> <span class=\"s\">\"cognome recuperato correttamente\"</span><span class=\"k\">);</span>","\telement<span class=\"k\">.</span>removeChild<span class=\"k\">(</span>inputSurname<span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">);</span>"];
_$jscoverage['RegisterPanelPresenterTest.js'][1]++;
module("RegisterPanelPresenterTest", {setup: (function () {
  _$jscoverage['RegisterPanelPresenterTest.js'][4]++;
  element = document.createElement("div");
  _$jscoverage['RegisterPanelPresenterTest.js'][5]++;
  element.setAttribute("id", "RegisterPanel");
  _$jscoverage['RegisterPanelPresenterTest.js'][6]++;
  element.style.position = "absolute";
  _$jscoverage['RegisterPanelPresenterTest.js'][7]++;
  element.style.left = "-999em";
  _$jscoverage['RegisterPanelPresenterTest.js'][8]++;
  document.body.appendChild(element);
  _$jscoverage['RegisterPanelPresenterTest.js'][10]++;
  mediator = {buildUI: (function () {
})};
  _$jscoverage['RegisterPanelPresenterTest.js'][12]++;
  communicationcenter = new Object();
  _$jscoverage['RegisterPanelPresenterTest.js'][14]++;
  configurationFile = "/ModelManager/WebContent/Conf/servletlocationtest.xml";
  _$jscoverage['RegisterPanelPresenterTest.js'][19]++;
  tester = new RegisterPanelPresenter("LoginManager.php");
}), teardown: (function () {
  _$jscoverage['RegisterPanelPresenterTest.js'][22]++;
  document.body.removeChild(element);
})});
_$jscoverage['RegisterPanelPresenterTest.js'][27]++;
test("testInitialize()", (function () {
  _$jscoverage['RegisterPanelPresenterTest.js'][28]++;
  var i = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][29]++;
  tester.initialize();
  _$jscoverage['RegisterPanelPresenterTest.js'][30]++;
  ok(element, "l'elemento esiste ancora");
  _$jscoverage['RegisterPanelPresenterTest.js'][30]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][32]++;
  var children = element.childNodes;
  _$jscoverage['RegisterPanelPresenterTest.js'][33]++;
  equal(children.length, 1, "l'elemento contiene un solo figlio");
  _$jscoverage['RegisterPanelPresenterTest.js'][33]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][34]++;
  var form = children[0];
  _$jscoverage['RegisterPanelPresenterTest.js'][35]++;
  equal(form.nodeName, "FORM", "l'elemento \u00c3\u00a8 un <form>");
  _$jscoverage['RegisterPanelPresenterTest.js'][35]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][37]++;
  children = form.childNodes;
  _$jscoverage['RegisterPanelPresenterTest.js'][38]++;
  equal(children.length, 2, "il form ha due figli");
  _$jscoverage['RegisterPanelPresenterTest.js'][38]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][40]++;
  var list = children[0];
  _$jscoverage['RegisterPanelPresenterTest.js'][41]++;
  equal(list.nodeName, "UL", "il form contiene una lista");
  _$jscoverage['RegisterPanelPresenterTest.js'][41]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][43]++;
  var divButtons = children[1];
  _$jscoverage['RegisterPanelPresenterTest.js'][45]++;
  children = list.childNodes;
  _$jscoverage['RegisterPanelPresenterTest.js'][46]++;
  equal(children.length, 7, "la lista contiene sette elementi");
  _$jscoverage['RegisterPanelPresenterTest.js'][46]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][48]++;
  var liUsername = children[0];
  _$jscoverage['RegisterPanelPresenterTest.js'][49]++;
  var liPassword = children[1];
  _$jscoverage['RegisterPanelPresenterTest.js'][50]++;
  var liSecretQ = children[2];
  _$jscoverage['RegisterPanelPresenterTest.js'][51]++;
  var liAnswerSQ = children[3];
  _$jscoverage['RegisterPanelPresenterTest.js'][52]++;
  var liName = children[4];
  _$jscoverage['RegisterPanelPresenterTest.js'][53]++;
  var liSurname = children[5];
  _$jscoverage['RegisterPanelPresenterTest.js'][54]++;
  var liPicture = children[6];
  _$jscoverage['RegisterPanelPresenterTest.js'][57]++;
  var labelUsername = liUsername.childNodes[0];
  _$jscoverage['RegisterPanelPresenterTest.js'][58]++;
  var inputUsername = liUsername.childNodes[1];
  _$jscoverage['RegisterPanelPresenterTest.js'][59]++;
  equal(labelUsername.nodeName, "LABEL", "la label ha il tipo corretto");
  _$jscoverage['RegisterPanelPresenterTest.js'][59]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][60]++;
  equal(labelUsername.getAttribute("for"), inputUsername.id, "attributo for della label corretto");
  _$jscoverage['RegisterPanelPresenterTest.js'][60]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][61]++;
  equal(inputUsername.type, "email", "l'input username ha il tipo corretto");
  _$jscoverage['RegisterPanelPresenterTest.js'][61]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][62]++;
  ok(inputUsername.required, "attributo required corretto per username");
  _$jscoverage['RegisterPanelPresenterTest.js'][62]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][65]++;
  var labelPassword = liPassword.childNodes[0];
  _$jscoverage['RegisterPanelPresenterTest.js'][66]++;
  var inputPassword = liPassword.childNodes[1];
  _$jscoverage['RegisterPanelPresenterTest.js'][67]++;
  equal(labelPassword.nodeName, "LABEL", "la label ha il tipo corretto");
  _$jscoverage['RegisterPanelPresenterTest.js'][67]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][68]++;
  equal(labelPassword.getAttribute("for"), inputPassword.id, "la label ha l'attributo for corretto");
  _$jscoverage['RegisterPanelPresenterTest.js'][68]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][69]++;
  equal(inputPassword.type, "password", "tipo corretto dell'input per la password");
  _$jscoverage['RegisterPanelPresenterTest.js'][69]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][70]++;
  ok(inputPassword, "attributo required corretto per password");
  _$jscoverage['RegisterPanelPresenterTest.js'][70]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][73]++;
  var labelSecretQ = liSecretQ.childNodes[0];
  _$jscoverage['RegisterPanelPresenterTest.js'][74]++;
  var inputSecretQ = liSecretQ.childNodes[1];
  _$jscoverage['RegisterPanelPresenterTest.js'][75]++;
  equal(labelSecretQ.nodeName, "LABEL", "la label ha il tipo corretto");
  _$jscoverage['RegisterPanelPresenterTest.js'][75]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][76]++;
  equal(labelSecretQ.getAttribute("for"), inputSecretQ.id, "la label ha l'attributo for corretto");
  _$jscoverage['RegisterPanelPresenterTest.js'][76]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][77]++;
  equal(inputSecretQ.type, "text", "tipo corretto dell'input per la domanda segreta");
  _$jscoverage['RegisterPanelPresenterTest.js'][77]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][78]++;
  ok(inputSecretQ, "attributo required corretto per la domanda segreta");
  _$jscoverage['RegisterPanelPresenterTest.js'][78]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][81]++;
  var labelAnswerSQ = liAnswerSQ.childNodes[0];
  _$jscoverage['RegisterPanelPresenterTest.js'][82]++;
  var inputAnswerSQ = liAnswerSQ.childNodes[1];
  _$jscoverage['RegisterPanelPresenterTest.js'][83]++;
  equal(labelAnswerSQ.nodeName, "LABEL", "la label ha il tipo corretto");
  _$jscoverage['RegisterPanelPresenterTest.js'][83]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][84]++;
  equal(labelAnswerSQ.getAttribute("for"), inputAnswerSQ.id, "la label ha l'attributo for corretto");
  _$jscoverage['RegisterPanelPresenterTest.js'][84]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][85]++;
  equal(inputAnswerSQ.type, "text", "tipo corretto dell'input per la risposta alla domanda segreta");
  _$jscoverage['RegisterPanelPresenterTest.js'][85]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][86]++;
  ok(inputAnswerSQ, "attributo required corretto per la risposta alla domanda segreta");
  _$jscoverage['RegisterPanelPresenterTest.js'][86]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][89]++;
  var labelName = liName.childNodes[0];
  _$jscoverage['RegisterPanelPresenterTest.js'][90]++;
  var inputName = liName.childNodes[1];
  _$jscoverage['RegisterPanelPresenterTest.js'][91]++;
  equal(labelName.nodeName, "LABEL", "la label ha il tipo corretto");
  _$jscoverage['RegisterPanelPresenterTest.js'][91]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][93]++;
  equal(labelName.getAttribute("for"), inputName.id, "attributo for della label corretto");
  _$jscoverage['RegisterPanelPresenterTest.js'][93]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][94]++;
  equal(inputName.type, "text", "l'input per il nome ha il tipo corretto");
  _$jscoverage['RegisterPanelPresenterTest.js'][94]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][95]++;
  ok((! inputName.required), "attributo required corretto per name");
  _$jscoverage['RegisterPanelPresenterTest.js'][95]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][98]++;
  var labelSurname = liSurname.childNodes[0];
  _$jscoverage['RegisterPanelPresenterTest.js'][99]++;
  var inputSurname = liSurname.childNodes[1];
  _$jscoverage['RegisterPanelPresenterTest.js'][100]++;
  equal(labelSurname.nodeName, "LABEL", "la label ha il tipo corretto");
  _$jscoverage['RegisterPanelPresenterTest.js'][100]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][101]++;
  equal(labelSurname.getAttribute("for"), inputSurname.id, "attributo for della label corretto");
  _$jscoverage['RegisterPanelPresenterTest.js'][101]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][102]++;
  equal(inputSurname.type, "text", "l'input per il cognome ha il tipo corretto");
  _$jscoverage['RegisterPanelPresenterTest.js'][102]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][103]++;
  ok((! inputSurname.required), "attributo required corretto per il cognome");
  _$jscoverage['RegisterPanelPresenterTest.js'][103]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][106]++;
  var labelPicture = liPicture.childNodes[0];
  _$jscoverage['RegisterPanelPresenterTest.js'][107]++;
  var inputPicture = liPicture.childNodes[1];
  _$jscoverage['RegisterPanelPresenterTest.js'][108]++;
  equal(labelPicture.nodeName, "LABEL", "la label ha il tipo corretto");
  _$jscoverage['RegisterPanelPresenterTest.js'][108]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][109]++;
  equal(labelPicture.getAttribute("for"), inputPicture.id, "attributo for della label corretto");
  _$jscoverage['RegisterPanelPresenterTest.js'][109]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][110]++;
  equal(inputPicture.type, "file", "l'input per l'immagine ha il tipo corretto");
  _$jscoverage['RegisterPanelPresenterTest.js'][110]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][111]++;
  ok((! inputPicture.required), "attributo required corretto per l'immagine");
  _$jscoverage['RegisterPanelPresenterTest.js'][111]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][114]++;
  equal(divButtons.childNodes.length, 2, "i pulsanti sono due");
  _$jscoverage['RegisterPanelPresenterTest.js'][115]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][117]++;
  var button = divButtons.childNodes[0];
  _$jscoverage['RegisterPanelPresenterTest.js'][118]++;
  equal(button.nodeName, "BUTTON", "elemento pulsante corretto");
  _$jscoverage['RegisterPanelPresenterTest.js'][118]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][119]++;
  equal(button.type, "submit", "il pulsante e' presente");
  _$jscoverage['RegisterPanelPresenterTest.js'][119]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][120]++;
  equal(button.innerHTML, "Indietro", "testo del pulsante corretto");
  _$jscoverage['RegisterPanelPresenterTest.js'][120]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][121]++;
  button = divButtons.childNodes[1];
  _$jscoverage['RegisterPanelPresenterTest.js'][122]++;
  equal(button.nodeName, "BUTTON", "elemento pulsante corretto");
  _$jscoverage['RegisterPanelPresenterTest.js'][122]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][123]++;
  equal(button.type, "submit", "il pulsante \u00c3\u00a8 presente");
  _$jscoverage['RegisterPanelPresenterTest.js'][123]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][124]++;
  equal(button.innerHTML, "Registrati", "testo del pulsante corretto");
  _$jscoverage['RegisterPanelPresenterTest.js'][124]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][126]++;
  expect(i);
}));
_$jscoverage['RegisterPanelPresenterTest.js'][129]++;
test("testHide()", (function () {
  _$jscoverage['RegisterPanelPresenterTest.js'][130]++;
  tester.hide();
  _$jscoverage['RegisterPanelPresenterTest.js'][131]++;
  equal(element.style.display, "none", "il pannello \u00c3\u00a8 stato correttamente nascosto");
}));
_$jscoverage['RegisterPanelPresenterTest.js'][135]++;
test("testRegister()", (function () {
  _$jscoverage['RegisterPanelPresenterTest.js'][136]++;
  var i = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][138]++;
  var data = {name: "Flavia", surname: "Bacco", username: "flabacco@gmail.com", password: "farfalla", picturePath: "flavietta.png", question: "di che colore e' la mia gatta?", answer: "tricolore"};
  _$jscoverage['RegisterPanelPresenterTest.js'][141]++;
  var querystring = tester.register(data);
  _$jscoverage['RegisterPanelPresenterTest.js'][142]++;
  equal(querystring, "username=flabacco%40gmail.com&password=farfalla&question=di%20che%20colore%20e'%20la%20mia%20gatta%3F&answer=tricolore&name=Flavia&surname=Bacco&picturePath=flavietta.png", "stringa di query generata correttamente");
  _$jscoverage['RegisterPanelPresenterTest.js'][144]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][145]++;
  equal(communicationcenter.my.name, "Flavia", "nome registrato correttamente");
  _$jscoverage['RegisterPanelPresenterTest.js'][145]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][146]++;
  equal(communicationcenter.my.surname, "Bacco", "cognome registrato correttamente");
  _$jscoverage['RegisterPanelPresenterTest.js'][146]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][147]++;
  equal(communicationcenter.my.username, "flabacco@gmail.com", "username registrato correttamente");
  _$jscoverage['RegisterPanelPresenterTest.js'][147]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][148]++;
  equal(communicationcenter.my.id, 0, "id del nuovo utente impostato correttamente");
  _$jscoverage['RegisterPanelPresenterTest.js'][148]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][149]++;
  equal(communicationcenter.my.picturePath, "http://softwaresynthesis.org/pictures/flavietta.png", "immagine del nuovo utente salvata correttamente");
  _$jscoverage['RegisterPanelPresenterTest.js'][151]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][153]++;
  expect(i);
}));
_$jscoverage['RegisterPanelPresenterTest.js'][156]++;
test("testGetPicturePath()", (function () {
  _$jscoverage['RegisterPanelPresenterTest.js'][158]++;
  var inputPicture = document.createElement("input");
  _$jscoverage['RegisterPanelPresenterTest.js'][159]++;
  inputPicture.type = "file";
  _$jscoverage['RegisterPanelPresenterTest.js'][160]++;
  inputPicture.id = "picture";
  _$jscoverage['RegisterPanelPresenterTest.js'][161]++;
  inputPicture.setAttribute("value", "home/flavia/Immagini/flavietta.png");
  _$jscoverage['RegisterPanelPresenterTest.js'][162]++;
  element.appendChild(inputPicture);
  _$jscoverage['RegisterPanelPresenterTest.js'][165]++;
  var picturePath = tester.getPicturePath();
  _$jscoverage['RegisterPanelPresenterTest.js'][166]++;
  equal(picturePath, inputPicture.value, "percorso dell'immagine recuperato correttamente");
  _$jscoverage['RegisterPanelPresenterTest.js'][167]++;
  element.removeChild(inputPicture);
}));
_$jscoverage['RegisterPanelPresenterTest.js'][170]++;
test("testGetUsername()", (function () {
  _$jscoverage['RegisterPanelPresenterTest.js'][171]++;
  var i = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][174]++;
  var inputUsername = document.createElement("input");
  _$jscoverage['RegisterPanelPresenterTest.js'][175]++;
  inputUsername.type = "email";
  _$jscoverage['RegisterPanelPresenterTest.js'][176]++;
  inputUsername.id = "username";
  _$jscoverage['RegisterPanelPresenterTest.js'][177]++;
  inputUsername.value = "flabacco@gmail.com";
  _$jscoverage['RegisterPanelPresenterTest.js'][178]++;
  element.appendChild(inputUsername);
  _$jscoverage['RegisterPanelPresenterTest.js'][181]++;
  var username = tester.getUsername();
  _$jscoverage['RegisterPanelPresenterTest.js'][182]++;
  equal(username, inputUsername.value, "usename recuperato correttamente");
  _$jscoverage['RegisterPanelPresenterTest.js'][182]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][185]++;
  inputUsername.value = "";
  _$jscoverage['RegisterPanelPresenterTest.js'][186]++;
  try {
    _$jscoverage['RegisterPanelPresenterTest.js'][187]++;
    tester.getUsername();
    _$jscoverage['RegisterPanelPresenterTest.js'][188]++;
    ok(false, "non rilevato username mancante");
    _$jscoverage['RegisterPanelPresenterTest.js'][188]++;
    (i++);
  }
  catch (err) {
    _$jscoverage['RegisterPanelPresenterTest.js'][190]++;
    equal(err, "indirizzo email non specificato", "username mancante rilevato correttamente");
    _$jscoverage['RegisterPanelPresenterTest.js'][190]++;
    (i++);
  }
  _$jscoverage['RegisterPanelPresenterTest.js'][194]++;
  inputUsername.value = "flabacco.gmail.com";
  _$jscoverage['RegisterPanelPresenterTest.js'][195]++;
  try {
    _$jscoverage['RegisterPanelPresenterTest.js'][196]++;
    tester.getUsername();
    _$jscoverage['RegisterPanelPresenterTest.js'][198]++;
    ok(false, "non rilevato indirizzo email malformato");
    _$jscoverage['RegisterPanelPresenterTest.js'][198]++;
    (i++);
  }
  catch (err) {
    _$jscoverage['RegisterPanelPresenterTest.js'][200]++;
    equal(err, "indirizzo email non valido", "email malformato rilevato correttamente");
    _$jscoverage['RegisterPanelPresenterTest.js'][200]++;
    (i++);
  }
  _$jscoverage['RegisterPanelPresenterTest.js'][203]++;
  element.removeChild(inputUsername);
  _$jscoverage['RegisterPanelPresenterTest.js'][204]++;
  expect(i);
}));
_$jscoverage['RegisterPanelPresenterTest.js'][208]++;
test("testGetPassword()", (function () {
  _$jscoverage['RegisterPanelPresenterTest.js'][209]++;
  var i = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][212]++;
  var inputPassword = document.createElement("input");
  _$jscoverage['RegisterPanelPresenterTest.js'][213]++;
  inputPassword.type = "password";
  _$jscoverage['RegisterPanelPresenterTest.js'][214]++;
  inputPassword.id = "password";
  _$jscoverage['RegisterPanelPresenterTest.js'][215]++;
  inputPassword.value = "farfalla";
  _$jscoverage['RegisterPanelPresenterTest.js'][216]++;
  element.appendChild(inputPassword);
  _$jscoverage['RegisterPanelPresenterTest.js'][219]++;
  var password = tester.getPassword();
  _$jscoverage['RegisterPanelPresenterTest.js'][220]++;
  equal(password, inputPassword.value, "password recuperata correttamente");
  _$jscoverage['RegisterPanelPresenterTest.js'][220]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][223]++;
  inputPassword.value = "";
  _$jscoverage['RegisterPanelPresenterTest.js'][224]++;
  try {
    _$jscoverage['RegisterPanelPresenterTest.js'][225]++;
    tester.getPassword();
    _$jscoverage['RegisterPanelPresenterTest.js'][226]++;
    ok(false, "non rilevata la password mancante");
  }
  catch (err) {
    _$jscoverage['RegisterPanelPresenterTest.js'][228]++;
    equal(err, "password non specificata", "password mancante rilevata correttamente");
    _$jscoverage['RegisterPanelPresenterTest.js'][228]++;
    (i++);
  }
  _$jscoverage['RegisterPanelPresenterTest.js'][231]++;
  element.removeChild(inputPassword);
  _$jscoverage['RegisterPanelPresenterTest.js'][232]++;
  expect(i);
}));
_$jscoverage['RegisterPanelPresenterTest.js'][235]++;
test("testGetQuestion()", (function () {
  _$jscoverage['RegisterPanelPresenterTest.js'][236]++;
  var i = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][239]++;
  var inputSecretQ = document.createElement("input");
  _$jscoverage['RegisterPanelPresenterTest.js'][240]++;
  inputSecretQ.id = "question";
  _$jscoverage['RegisterPanelPresenterTest.js'][241]++;
  inputSecretQ.value = "Di che colore \u00c3\u00a8 il mio gatto?";
  _$jscoverage['RegisterPanelPresenterTest.js'][242]++;
  element.appendChild(inputSecretQ);
  _$jscoverage['RegisterPanelPresenterTest.js'][245]++;
  var question = tester.getQuestion();
  _$jscoverage['RegisterPanelPresenterTest.js'][246]++;
  equal(question, inputSecretQ.value, "domanda segreta recuperata correttamente");
  _$jscoverage['RegisterPanelPresenterTest.js'][246]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][249]++;
  inputSecretQ.value = "";
  _$jscoverage['RegisterPanelPresenterTest.js'][250]++;
  try {
    _$jscoverage['RegisterPanelPresenterTest.js'][251]++;
    tester.getQuestion();
    _$jscoverage['RegisterPanelPresenterTest.js'][252]++;
    ok(false, "non rilevata la domanda segreta mancante");
  }
  catch (err) {
    _$jscoverage['RegisterPanelPresenterTest.js'][254]++;
    equal(err, "domanda segreta non specificata", "domanda segreta mancante rilevata correttamente");
    _$jscoverage['RegisterPanelPresenterTest.js'][254]++;
    (i++);
  }
  _$jscoverage['RegisterPanelPresenterTest.js'][257]++;
  element.removeChild(inputSecretQ);
  _$jscoverage['RegisterPanelPresenterTest.js'][258]++;
  expect(i);
}));
_$jscoverage['RegisterPanelPresenterTest.js'][261]++;
test("testGetAnswer()", (function () {
  _$jscoverage['RegisterPanelPresenterTest.js'][262]++;
  var i = 0;
  _$jscoverage['RegisterPanelPresenterTest.js'][265]++;
  var inputAnswer = document.createElement("input");
  _$jscoverage['RegisterPanelPresenterTest.js'][266]++;
  inputAnswer.id = "answer";
  _$jscoverage['RegisterPanelPresenterTest.js'][267]++;
  inputAnswer.value = "tricolore";
  _$jscoverage['RegisterPanelPresenterTest.js'][268]++;
  element.appendChild(inputAnswer);
  _$jscoverage['RegisterPanelPresenterTest.js'][271]++;
  var answer = tester.getAnswer();
  _$jscoverage['RegisterPanelPresenterTest.js'][272]++;
  equal(answer, inputAnswer.value, "risposta recuperata correttamente");
  _$jscoverage['RegisterPanelPresenterTest.js'][272]++;
  (i++);
  _$jscoverage['RegisterPanelPresenterTest.js'][275]++;
  inputAnswer.value = "";
  _$jscoverage['RegisterPanelPresenterTest.js'][276]++;
  try {
    _$jscoverage['RegisterPanelPresenterTest.js'][277]++;
    tester.getAnswer();
    _$jscoverage['RegisterPanelPresenterTest.js'][278]++;
    ok(false, "non rilevata la risposta mancante");
  }
  catch (err) {
    _$jscoverage['RegisterPanelPresenterTest.js'][280]++;
    equal(err, "risposta alla domanda segreta non specificata", "risposta mancante rilevata correttamente");
    _$jscoverage['RegisterPanelPresenterTest.js'][280]++;
    (i++);
  }
  _$jscoverage['RegisterPanelPresenterTest.js'][283]++;
  element.removeChild(inputAnswer);
  _$jscoverage['RegisterPanelPresenterTest.js'][284]++;
  expect(i);
}));
_$jscoverage['RegisterPanelPresenterTest.js'][287]++;
test("testGetName()", (function () {
  _$jscoverage['RegisterPanelPresenterTest.js'][289]++;
  var inputName = document.createElement("input");
  _$jscoverage['RegisterPanelPresenterTest.js'][290]++;
  inputName.id = "firstname";
  _$jscoverage['RegisterPanelPresenterTest.js'][291]++;
  inputName.value = "Flavia";
  _$jscoverage['RegisterPanelPresenterTest.js'][292]++;
  element.appendChild(inputName);
  _$jscoverage['RegisterPanelPresenterTest.js'][295]++;
  var name = tester.getName();
  _$jscoverage['RegisterPanelPresenterTest.js'][296]++;
  equal(name, inputName.value, "nome recuperato correttamente");
  _$jscoverage['RegisterPanelPresenterTest.js'][297]++;
  element.removeChild(inputName);
}));
_$jscoverage['RegisterPanelPresenterTest.js'][300]++;
test("testGetSurname()", (function () {
  _$jscoverage['RegisterPanelPresenterTest.js'][302]++;
  var inputSurname = document.createElement("input");
  _$jscoverage['RegisterPanelPresenterTest.js'][303]++;
  inputSurname.id = "lastname";
  _$jscoverage['RegisterPanelPresenterTest.js'][304]++;
  inputSurname.value = "Bacco";
  _$jscoverage['RegisterPanelPresenterTest.js'][305]++;
  element.appendChild(inputSurname);
  _$jscoverage['RegisterPanelPresenterTest.js'][308]++;
  var surname = tester.getSurname();
  _$jscoverage['RegisterPanelPresenterTest.js'][309]++;
  equal(surname, inputSurname.value, "cognome recuperato correttamente");
  _$jscoverage['RegisterPanelPresenterTest.js'][310]++;
  element.removeChild(inputSurname);
}));
